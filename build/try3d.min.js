!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e():"function"==typeof define&&define.amd?define([],e):"object"==typeof exports?exports.Try3d=e():t.Try3d=e()}(self,(function(){return(()=>{"use strict";var __webpack_modules__={3815:(t,e,_)=>{_.d(e,{Z:()=>s});var i=_(6005),n=_(7997);class s{getType(){return null}constructor(t,e){e=e||{},this._mEvents=new n.Z,this._m_NeedUpdate=!1,this._m_Id=e.id||i.Z.nextId(),this._m_Components=[],this._m_ComponentIDs={},this._m_Scene=null,this._m_Owner=t,this._m_OwnerAttachComponents=[],this._m_OwnerAttachComponentIDs={},"Scene"==this.getType()?this._m_Scene=this:this._m_Scene=t._m_Scene,this._m_Scene.addComponentInScene(this),this._m_Owner&&this._m_Owner.attachComponent(this)}on(t,e,_){this._mEvents.register(t,e,_)}off(t,e,_){this._mEvents.unregister(t,e,_)}fire(t,e,_){this._mEvents.trigger(t,e,_)}getId(){return this._m_Id}attachComponent(t){t instanceof s?this._m_OwnerAttachComponentIDs[t.getId()]||(this._m_OwnerAttachComponentIDs[t.getId()]=t,this._m_OwnerAttachComponents.push(t)):console.error("component必须是一个组件!!")}getComponent(t){return this._m_OwnerAttachComponentIDs[t]?this._m_OwnerAttachComponentIDs[t]:null}getComponentAtIndex(t){return t>=this._m_OwnerAttachComponents.length?null:this._m_OwnerAttachComponents[t]}getComponentAtType(t){let e=this._m_OwnerAttachComponents.length;for(let _=0;_<e;_++)if(this._m_OwnerAttachComponents[_].getType()==t)return this._m_OwnerAttachComponents[_];return null}getComponentAtTypes(t){let e=this._m_OwnerAttachComponents.length,_=null;for(let i=0;i<e;i++)this._m_OwnerAttachComponents[i].getType()==t&&(_||(_=[]),_.push(this._m_OwnerAttachComponents[i]));return _}getComponents(){return this._m_OwnerAttachComponents}detachComponent(t){if(t instanceof s&&this._m_OwnerAttachComponentIDs[t.getId()]){this._m_OwnerAttachComponentIDs[t.getId()]=null;let e=this._m_OwnerAttachComponents.indexOf(t);e>-1&&this._m_OwnerAttachComponents.splice(e,1)}}_doUpdate(t){this._m_NeedUpdate=!1,t?this._update&&this._update():this._m_Scene.scheduleTask(this._update,this)}_update(){}}},1575:(t,e,_)=>{_.d(e,{Z:()=>a});var i=_(3815),n=_(9881),s=_(4963);class a extends i.Z{static S_PRE_FRAME_FILTER="PreFrame";static S_POST_FILTER="PostFilter";constructor(t,e){super(t,e);class _ extends s.Z{getType(){return"FramePicture"}constructor(t,e){super(t,e)}isFramePicture(){return!0}}this._m_Enable=!0,this._m_FramePicture=new _(t,{id:n.Z.nextId()}),this._m_PreFrames=null,this._m_PostFilters=null}getMaterial(){return this._m_FramePicture.getMaterial()}finish(){this._init()}_init(){this._m_FramePicture.getMaterial().getCurrentTechnology().getSubPasss(a.S_PRE_FRAME_FILTER)&&(this._m_PreFrames={},this._m_PreFrames[this._m_FramePicture.getMaterial().getId()]=[],this._m_PreFrames[this._m_FramePicture.getMaterial().getId()].push(this._m_FramePicture)),this._m_FramePicture.getMaterial().getCurrentTechnology().getSubPasss(a.S_POST_FILTER)&&(this._m_PostFilters={},this._m_PostFilters[this._m_FramePicture.getMaterial().getId()]=[],this._m_PostFilters[this._m_FramePicture.getMaterial().getId()].push(this._m_FramePicture))}preFrame(t){this._m_PreFrames}postFilter(){if(this._m_PostFilters){let t=this._m_Scene.getCanvas().getGLContext();this._m_Scene.getRender().draw(t,a.S_POST_FILTER,this._m_PostFilters,null,!0)}}static newFilterFromMaterial(t,e){let _=new a(t,{id:n.Z.nextId()});return _._m_FramePicture.setMaterial(e),_.finish(),_}isEnable(){return this._m_Enable}enable(){this._m_Enable=!0}disable(){this._m_Enable=!1}}},6005:(t,e,_)=>{_.d(e,{Z:()=>n});let i=0;class n{constructor(){}static nextId(){return i--}}},1189:(t,e,_)=>{_.d(e,{Z:()=>r});var i=_(1760),n=_(3792),s=_(9968),a=_(8803);class r extends i.Z{static S_SHADER_SPLIT_TYPE_HALF_TRANSITION=1;static S_SHADER_SPLIT_TYPE_FIXED=2;getType(){return"DirectionalLight"}getTypeId(){return 0}constructor(t,e){super(t,e),this._m_Direction=new n.Z}_genShadow(){this._m_ShadowCfg.id=this._m_Id+"_shadow",this._m_ShadowCfg.nbSplits=this._m_ShadowCfg.nbSplits||2,this._m_Shadow=new s.Z(this._m_Scene,this._m_ShadowCfg)}setShadowSplitNum(t){(t<1||t>4)&&a.Z.error("错误的分区数目:"+t),this._m_ShadowCfg.nbSplits=t||2}setShadowSplitType(t){this._m_ShadowCfg.shadowSplitType=t}setDirection(t){this._m_Direction.setTo(t)}getDirection(){return this._m_Direction}setDirectionXYZ(t,e,_){this._m_Direction.setToInXYZ(t,e,_),this._m_Direction.normal()}getBoundingVolume(){return null}}},1760:(t,e,_)=>{_.d(e,{Z:()=>s});var i=_(2245),n=_(9692);class s extends i.Z{static S_VISIBLE_LIGHT=1;static S_STATIC_LIGHT=2;static S_DYNAMIC=3;getType(){return"Light"}getTypeId(){return-1}constructor(t,e){super(t,e),this._m_Color=new n.Z,this._m_Enable=!0,this._m_Scene.enableLight(this),this._m_ProShadow=!1,this._m_ResetProShadow=this._m_ProShadow,this._m_Shadow=null,this._m_ShadowCfg={shadowMapSize:512,backfaceShadows:!1,debug:!1},this._m_Mark=0,this._init()}_init(){this._m_Mark|=s.S_VISIBLE_LIGHT,this._m_Mark|=s.S_DYNAMIC}enable(){this._m_Enable||(this._m_Enable=!0,this._m_Scene.enableLight(this),this._m_ResetProShadow&&(this._m_ResetProShadow=!1,this.proShadow(!0)))}getShadow(){return this._m_Shadow}setShadowMapSize(t){this._m_ShadowCfg.shadowMapSize=t}debugShadowMap(){this._m_ShadowCfg.debug=!0}proShadow(t){this._m_ProShadow=t,this._m_ProShadow&&!this._m_Shadow&&(this._genShadow(),this._m_Shadow&&this._m_Shadow.setLight(this)),this._m_Shadow&&this._m_Shadow.enable(t)}isProShadow(){return this._m_ProShadow}_genShadow(){}disable(){this._m_Enable&&(this._m_Enable=!1,this._m_Scene.disableLight(this),this._m_ProShadow&&(this._m_ResetProShadow=this._m_ProShadow,this.proShadow(!1)))}isEnable(){return this._m_Enable}setColor(t){this._m_Color.setTo(t)}getColor(){return this._m_Color}setColorRGBA(t,e,_,i){this._m_Color.setToInXYZW(t,e,_,i)}updateBounding(){this._updateBounding()}}},4771:(t,e,_)=>{_.d(e,{Z:()=>h});var i=_(3815),n=_(5356),s=_(4955),a=_(9085),r=_(8803),o=_(533);class h extends i.Z{getType(){return"Material"}constructor(t,e){if(super(t,e),this._m_Params={},this._m_ParamValues={},this._m_CanDefineParams={},this._m_AleadyDefinedParams={},this._m_ChangeParams=[],this._init(),this._m_CurrentSubShader=null,this._m_RenderTechnologys={},this._m_CurrentTechnology=null,e.materialDef){let t=this._m_Scene.getCanvas().getGLContext(),_=e.materialDef,i=_.getParams();for(let t in i)this._m_ParamValues[i[t].getName()]=null,this._m_Params[i[t].getName()]=!0,this._m_CanDefineParams[i[t].getName()]=!0;let a=_.getSubShaderDefs(),r={};for(let i in a)this._initGlobals(_,a[i]),r[a[i].getName()]=new n.Z(t,e.frameContext||this._m_Scene.getRender().getFrameContext(),a[i]);let o=_.getTechnologyDefs(),h=null,m=null,l=null;for(let t in o){h=o[t],this._m_RenderTechnologys[h.getName()]=new s.Z(h.getName()),m=h.getSubPass();for(let t in m)l=m[t],l.forEach((e=>{e.getPass().forEach((e=>{this._m_RenderTechnologys[h.getName()].addSubPass(t,r[e.pass.getName()],e.renderState)}))}))}this.selectTechnology(this._m_Scene.getRender().getPriorityTechnology())}else console.log("找不到materialDef...")}_newAtc(t,e,_,i,n){"color"==_?e.addTexture(t,i,t.RGBA,0,t.RGBA,t.UNSIGNED_BYTE,t.COLOR_ATTACHMENT0+Number(n),!0):"depth24_stencil8"==_&&e.addBuffer(t,i,t.DEPTH24_STENCIL8,t.DEPTH_STENCIL_ATTACHMENT)}_initGlobals(t){let e=this._m_Scene.getRender().getFrameContext(),_=t.getGlobals(),i=this._m_Scene.getCanvas().getGLContext(),n=this._m_Scene.getCanvas().getWidth(),s=this._m_Scene.getCanvas().getHeight();for(let t in _)if(!e.getFrameBuffer(t)){let a=_[t],h=a.width?a.width<=1?a.width*n:a.width:n,m=a.height?a.height<=1?a.height*s:a.height:s,l=new o.Z(i,t,h,m);if(null!=a.width&&null!=a.height&&(a.width<=1&&a.height<=1?(l.setRelativeSize(!0),l.setRelativeWidthHeight(a.width,a.height)):l.setFixedSize(!0)),e.addFrameBuffer(t,l),a){for(let t in a)a[t].length>1?this._newAtc(i,l,a[t][1].type,a[t][1].name,a[t][1].loc):a[t].length>0?this._newAtc(i,l,a[t][0].type,a[t][0].name):r.Z.log("错误的atc!");l.finish(i,this._m_Scene,!0)}r.Z.log("create global "+t)}}getRenderTechnology(t){return this._m_RenderTechnologys.get(t)}addTechnology(t,e){this._m_RenderTechnologys[t]=e}selectTechnology(t){if(null!=this._m_CurrentTechnology&&this._m_RenderTechnologys[t]==this._m_CurrentTechnology)return;let e=this._m_CurrentTechnology,_=null!=this._m_CurrentTechnology;if(this._m_CurrentTechnology=this._m_RenderTechnologys[t],null==this._m_CurrentTechnology&&(this._m_CurrentTechnology=null!=e?e:this._m_RenderTechnologys[""]),_){let t=null;for(let e in this._m_AleadyDefinedParams)for(let _ in this._m_CurrentTechnology.getSubPassList())t=this._m_CurrentTechnology.getSubPasss(_),t.getSubShaders().forEach((t=>{t.subShader.addDefine(e)}))}}getCurrentTechnology(){return this._m_CurrentTechnology}preload(){let t=this.getCurrentTechnology().getSubPassList();if(t){let e=null,_=this._m_Scene.getCanvas().getGLContext(),i=this._m_Scene.getRender().getFrameContext();for(let n in t)e=t[n],e.getSubShaders().forEach((t=>{t.subShader.needCompile()&&t.subShader._compile(_,i)}))}}_selectSubShader(t){let e=!1;this._m_CurrentSubShader=t;let _=this._m_Scene.getCanvas().getGLContext(),i=this._m_Scene.getRender().getFrameContext();if(this._m_CurrentSubShader.needCompile()&&this._m_CurrentSubShader._compile(_,i),i.m_LastSubShaderId!=t.getDefId()&&(t.use(_),i.m_LastSubShaderId=t.getDefId(),i.m_LastMaterial=this,i.m_SM++,e=!0),i.m_LastSubShader!=t){i.m_LastSubShader=t,i.m_SS++;for(let t in this._m_ParamValues)this._m_ParamValues[t]&&this._m_CurrentSubShader.uploadParam(_,t,this._m_ParamValues[t])}return this._m_ChangeParams.length>0&&(this._m_ChangeParams.forEach((t=>{this._m_ParamValues[t.paramName]&&this._m_ParamValues[t.paramName].compare(t.value)||(this._m_CurrentSubShader.uploadParam(_,t.paramName,t.value),this._m_ParamValues[t.paramName]=t.value)})),this._m_ChangeParams.length=0),e}_init(){}setParam(t,e){if(this._m_Params[t]){let _=!1;if(this._m_AleadyDefinedParams[t]||(_=!0,this._m_AleadyDefinedParams[t]=!0),_){let t=null;for(let e in this._m_AleadyDefinedParams)for(let _ in this._m_CurrentTechnology.getSubPassList())t=this._m_CurrentTechnology.getSubPasss(_),t.getSubShaders().forEach((t=>{t.subShader.addDefine(e)}))}let i=!0;if(this._m_ChangeParams.length>0)for(let _=0;_<this._m_ChangeParams.length;_++)if(this._m_ChangeParams[_].paramName==t){this._m_ChangeParams[_].value=e,i=!1;break}e.owner(this,t),i&&this._m_ChangeParams.push({paramName:t,value:e})}}clearParam(t,e){if(this._m_Params[t]){let e=!1;if(this._m_AleadyDefinedParams[t]&&(e=!0,delete this._m_AleadyDefinedParams[t]),e){let e=null;for(let _ in this._m_CurrentTechnology.getSubPassList())e=this._m_CurrentTechnology.getSubPasss(_),e.getSubShaders().forEach((e=>{e.subShader.clearDefine(t)}))}this._m_ParamValues[t].unowner(this)}}addDefine(t,e){let _=!1;if(this._m_AleadyDefinedParams[t]||(_=!0,this._m_AleadyDefinedParams[t]=!0),_){let _=null;for(let i in this._m_AleadyDefinedParams)for(let n in this._m_CurrentTechnology.getSubPassList())_=this._m_CurrentTechnology.getSubPasss(n),_.getSubShaders().forEach((_=>{_.subShader.addDefine(i,t==i&&null!=a.Z.Context_Data[t],e)}))}}clearDefine(t,e){let _=!1;if(this._m_AleadyDefinedParams[t]&&(_=!0,this._m_AleadyDefinedParams[t]=!1),_){let _=null;for(let i in this._m_AleadyDefinedParams)for(let n in this._m_CurrentTechnology.getSubPassList())_=this._m_CurrentTechnology.getSubPasss(n),_.getSubShaders().forEach((_=>{t==i&&_.subShader.clearDefine(i,t==i&&null!=a.Z.Context_Data[t],e)}))}}}},8655:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{Z:()=>MaterialDef});var _Util_AssetLoader_js__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(3396),_WebGL_ShaderSource_js__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(9085),_Util_Tools_js__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__(9881),_SubShaderDef_js__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__(1144),_TechnologyDef_js__WEBPACK_IMPORTED_MODULE_7__=__webpack_require__(89),_Render_Render_js__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__(2432),_Util_Log_js__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__(8803),_MaterialDefBuild_js__WEBPACK_IMPORTED_MODULE_6__=__webpack_require__(6815);class Block{constructor(t,e,_,i,n){this.m_Type=t,this.m_Id=e,this.m_Data=_,this.m_Start=i,this.m_End=n,this.m_SubBlock=[]}getName(){return this.m_Id}getType(){return this.m_Type}addSubBlock(t){this.m_SubBlock.push(t)}getSubBlock(){return this.m_SubBlock}setStart(t){this.m_Start=t}getStart(){return this.m_Start}setEnd(t){this.m_End=t}getEnd(){return this.m_End}getData(){return this.m_Data}toString(){return"type:"+this.m_Type+"\nid:"+this.m_Id+"\ndata:\n"+this.m_Data+"\n"}}class Param{constructor(){this.m_Name=null,this.m_Type=null,this.m_DefaultValue=null,this.m_Pattern=null,this.m_Pattern2=null,this.m_TagPattern=null,this.m_DefType=null}creator(){this.m_Pattern=eval("/Params."+this.m_Name+"/"),this.m_Pattern2=eval("/Params."+this.m_Name+"[\\s+-;.,\\*\\\\]{1,}/"),this.m_TagPattern=eval("/Params."+this.m_Name+"/g"),this.m_DefType=""+this.m_Name}getDefType(){return this.m_DefType}getPattern(){return this.m_Pattern}getPattern2(){return this.m_Pattern2}getTagPattern(){return this.m_TagPattern}setName(t){this.m_Name=t}getName(){return this.m_Name}setType(t){this.m_Type=t}getType(){return this.m_Type}setDefaultValue(t){this.m_DefaultValue=t}getDefaultVaule(){return this.m_DefaultValue}}class SubTechnology{constructor(){this.m_Name=null,this.m_Shaders={}}setName(t){this.m_Name=t}getName(){return this.m_Name}addShader(t,e){this.m_Shaders[t]=e}getShaders(){return this.m_Shaders}}class SubPassDef{constructor(t){this.m_RenderPath=t,this.m_Pass=[],this._m_FromMaterialDef=null}addPass(t,e){this.m_Pass.push({pass:t,renderState:e})}getPass(){return this.m_Pass}setFromMaterialDef(t){this._m_FromMaterialDef=t}getFromMaterialDef(){return this._m_FromMaterialDef}}class MaterialDef{constructor(t){this._m_Name=t,this._m_Globals={},this._m_Params={},this._m_SubShaderDefs={},this._m_TechnologyDefs={},this._m_FBs={}}addSubShaderDef(t,e){this._m_SubShaderDefs[t]=e,e.setFromMaterialDef(this)}getSubShaderDef(t){return this._m_SubShaderDefs[t]}getSubShaderDefs(){return this._m_SubShaderDefs}addTechnologyDef(t,e){this._m_TechnologyDefs[t]=e,e.setFromMaterialDef(this)}getTechnologyDef(t){return this._m_TechnologyDefs[t]}getTechnologyDefs(){return this._m_TechnologyDefs}addParam(t){this._m_Params[t.getName()]=t}getParams(){return this._m_Params}getGlobalInner(t){return t.indexOf("color")>-1?"color":t.indexOf("depth24_stencil8")>-1?"depth24_stencil8":t.indexOf("depth")>-1?"depth":t.indexOf("stencil")>-1?"stencil":void 0}addGlobal(name,type,dataType,varName){this._m_Globals[name]||(this._m_Globals[name]={});let pName=varName;varName="_"+name+varName,this._m_Globals[name][varName]=[];let innerType=this.getGlobalInner(type);if(type.indexOf("width")>-1)return void(this._m_Globals[name].width=Number(dataType));if(type.indexOf("height")>-1)return void(this._m_Globals[name].height=Number(dataType));let t=type.indexOf("color");if(t>-1){this._m_Globals[name][varName].push({type:innerType,dataType:"uniform sampler2D",refName:name,name:varName,pattern:eval("/Globals"+name+".In"+pName+"/"),pattern2:eval("/Globals"+name+".In"+pName+"[\\s+-;.,\\*\\\\]{1,}/"),tagPattern:eval("/Globals"+name+".In"+pName+"/g")});let loc=type.substring(t+5,type.length);_Util_Log_js__WEBPACK_IMPORTED_MODULE_5__.Z.log("loc:"+loc),this._m_Globals[name][varName].push({type:innerType,dataType,loc,refName:name,name:varName,pattern:eval("/Globals"+name+".Out"+pName+"/"),pattern2:eval("/Globals"+name+".Out"+pName+"[\\s+-;.,\\*\\\\]{1,}/"),tagPattern:eval("/Globals"+name+".Out"+pName+"/g")})}else this._m_Globals[name][varName].push({type:innerType,dataType,refName:name,name:varName,pattern:eval("/Globals"+name+".In"+pName+"/"),pattern2:eval("/Globals"+name+".In"+pName+"[\\s+-;.,\\*\\\\]{1,}/"),tagPattern:eval("/Globals"+name+".In"+pName+"/g")})}getGlobals(){return this._m_Globals}setName(t){this._m_Name=t}getName(){return this._m_Name}static load(t){return MaterialDef.parse(_Util_AssetLoader_js__WEBPACK_IMPORTED_MODULE_0__.Z.loadMaterialSourceDef(t))}static trim(t){return t.replace(/(^\s*)|(\s*$)/g,"")}static parseGlobals(t,e){let _=e.getName(),i=e.getData(),n=null;for(let s=e.getStart()+1;s<e.getEnd();s++)n=i[s],n=_Util_Tools_js__WEBPACK_IMPORTED_MODULE_2__.Z.trim(n),n=n.substring(0,n.length-1).split(" "),t.addGlobal(_,n[0],n[1],n[2])}static parseParams(t,e){let _=e.getData(),i=null,n=null;for(let s=e.getStart()+1;s<e.getEnd();s++)i=_[s],i=_Util_Tools_js__WEBPACK_IMPORTED_MODULE_2__.Z.trim(i),i.startsWith("//")||(i=i.substring(0,i.length-1).split(" "),n=new Param,n.setName(i[1]),n.setType(i[0]),n.creator(),i.length>2&&n.setDefaultValue(i[3]),t.addParam(n))}static parseSubTechnology(t,e){e.data}static parseShader(t,e){e.getSubBlock().forEach((e=>{MaterialDef.parseBlockDef(t,e)}))}static parseShaderVars(t,e){let _=e.getData(),i=null;for(let n=e.getStart()+1;n<e.getEnd();n++)i=_[n],i=_Util_Tools_js__WEBPACK_IMPORTED_MODULE_2__.Z.trim(i),i.startsWith("//")||(i=i.substring(0,i.length-1),i=i.split(" "),t.addVar(i[0],i[1]))}static parseAdvanced(t,e){let _=e.getData(),i=null;for(let n=e.getStart()+1;n<e.getEnd();n++)i=_[n],i=_Util_Tools_js__WEBPACK_IMPORTED_MODULE_2__.Z.trim(i),i.startsWith("//")||(i=i.substring(0,i.length-1),i=i.split(" "),i[0].startsWith("RenderProgram")&&t.setRenderProgramType(i[1]))}static parseVsShader(t,e){let _=e.getData(),i=null,n="",s=[],a=[],r=t.getVarTable(),o=t.getFromMaterialDef().getParams(),h=null,m=!1,l=[],u={},f={},c={};for(let g=e.getStart()+1;g<e.getEnd();g++){if(i=_Util_Tools_js__WEBPACK_IMPORTED_MODULE_2__.Z.trim(_[g]),i.startsWith("//"))continue;let e=null,d=-1,S=-1,p=null;if(r.forEach((t=>{d=_Util_Tools_js__WEBPACK_IMPORTED_MODULE_2__.Z.find2(i,t.pattern),-1!=d&&(S=_Util_Tools_js__WEBPACK_IMPORTED_MODULE_2__.Z.find2(i,t.pattern2),null!=S&&S!=d&&(d=S),p||(p={}),null!=p[d]?p[d].name.length<t.name.length&&(p[d]=t):p[d]=t)})),p)for(let t in p)e=p[t],c[e.name]||(c[e.name]=!0,a.push(e));e=null,d=-1,S=-1,p=null;for(let t in o)h=o[t],d=_Util_Tools_js__WEBPACK_IMPORTED_MODULE_2__.Z.find2(i,h.getPattern()),-1!=d&&(S=_Util_Tools_js__WEBPACK_IMPORTED_MODULE_2__.Z.find2(i,h.getPattern2()),null!=S&&S!=d&&(d=S),p||(p={}),null!=p[d]?p[d].getName().length<h.getName().length&&(p[d]=h):p[d]=h);if(p)for(let t in p)e=p[t],u[e.getName()]||(l.push(e),u[e.getName()]=!0),i=_Util_Tools_js__WEBPACK_IMPORTED_MODULE_2__.Z.repSrc(i,e.getPattern(),e.getTagPattern(),e.getName()),m=!0;let C=null;p=null;for(let e in _WebGL_ShaderSource_js__WEBPACK_IMPORTED_MODULE_1__.Z.Context_Data)if(C=_WebGL_ShaderSource_js__WEBPACK_IMPORTED_MODULE_1__.Z.Context_Data[e],null!=C.pattern&&(d=_Util_Tools_js__WEBPACK_IMPORTED_MODULE_2__.Z.find2(i,C.pattern),-1!=d&&(S=_Util_Tools_js__WEBPACK_IMPORTED_MODULE_2__.Z.find2(i,C.pattern2),null!=S&&S!=d&&(d=S),p||(p={}),null!=p[d]?p[d].src.length<C.src.length&&(p[d]=C):p[d]=C),p))for(let e in p)C=p[e],f[C.src]||(C.isFlagVariable?t.addContextDefine(_WebGL_ShaderSource_js__WEBPACK_IMPORTED_MODULE_1__.Z.VERTEX_SHADER,C.src):(f[C.src]=!0,s.push(C))),i=_Util_Tools_js__WEBPACK_IMPORTED_MODULE_2__.Z.repSrc(i,C.pattern,C.tagPattern,C.tag);n+=_Util_Tools_js__WEBPACK_IMPORTED_MODULE_2__.Z.trim(i)+"\n"}if(m){t.addUseParams(_WebGL_ShaderSource_js__WEBPACK_IMPORTED_MODULE_1__.Z.VERTEX_SHADER,l);let e="\n";for(let t in l)h=l[t],e+="uniform "+h.getType()+" "+h.getName()+";\n";n=e+n}if(a.length>0){let t="\n";a.forEach((e=>{t+="out "+e.type+" "+e.name+";\n"})),n=t+n}if(s.length>0){let e={},_=[];t.addUseContexts(s);let i="\n";s.forEach((t=>{null!=t.loc||null!=t.loc?i+="layout (location="+t.loc+") in "+t.type+" "+t.src+";\n":t.def?(e[t.def]||_.push(t.def),e[t.def]=t.def):t.utype?(i+=t.utype+" "+t.src,t.modifier&&(i+=t.modifier),i+=";\n"):t.type&&(i+=t.type+" "+t.src+";\n")})),t.addUseBlocks(_);for(let t in e)i+=_WebGL_ShaderSource_js__WEBPACK_IMPORTED_MODULE_1__.Z.BLOCKS[t].blockDef;n=i+n}n="#version 300 es\n"+n,t.addShaderSource(_WebGL_ShaderSource_js__WEBPACK_IMPORTED_MODULE_1__.Z.VERTEX_SHADER,n)}static parseVsShaderFun(t,e){}static parseVsShaderMain(t,e){let _=e.getData(),i=null,n="void main(){\n",s=[],a=[],r=t.getVarTable(),o=t.getFromMaterialDef().getParams(),h=null,m=!1,l=[],u={},f={},c={};for(let t=e.getStart()+1;t<e.getEnd();t++){if(i=_Util_Tools_js__WEBPACK_IMPORTED_MODULE_2__.Z.trim(_[t]),i.startsWith("//"))continue;r.forEach((t=>{_Util_Tools_js__WEBPACK_IMPORTED_MODULE_2__.Z.find(i,t.pattern)&&(c[t.name]||(c[t.name]=!0,a.push(t)))}));for(let t in o)h=o[t],_Util_Tools_js__WEBPACK_IMPORTED_MODULE_2__.Z.find(i,h.getPattern())&&(u[h.getName()]||(l.push(h),u[h.getName()]=!0),i=_Util_Tools_js__WEBPACK_IMPORTED_MODULE_2__.Z.repSrc(i,h.getPattern(),h.getTagPattern(),h.getName()),m=!0);let e=null;for(let t in _WebGL_ShaderSource_js__WEBPACK_IMPORTED_MODULE_1__.Z.Context_Data)e=_WebGL_ShaderSource_js__WEBPACK_IMPORTED_MODULE_1__.Z.Context_Data[t],_Util_Tools_js__WEBPACK_IMPORTED_MODULE_2__.Z.find(i,e.pattern)&&(f[e.src]||(f[e.src]=!0,s.push(e)),i=_Util_Tools_js__WEBPACK_IMPORTED_MODULE_2__.Z.repSrc(i,e.pattern,e.tagPattern,e.tag));n+=_Util_Tools_js__WEBPACK_IMPORTED_MODULE_2__.Z.trim(i)+"\n"}if(n+="}\n",m){t.addUseParams(l);let e="\n";for(let t in l)h=l[t],e+="uniform "+h.getType()+" "+h.getName()+";\n";n=e+n}if(a.length>0){let t="\n";a.forEach((e=>{t+="out "+e.type+" "+e.name+";\n"})),n=t+n}if(s.length>0){let e={},_=[];t.addUseContexts(s);let i="\n";s.forEach((t=>{null!=t.loc||null!=t.loc?i+="layout (location="+t.loc+") in "+t.type+" "+t.src+";\n":t.def?(e[t.def]||_.push(t.def),e[t.def]=t.def):t.utype?(i+=t.utype+" "+t.src,t.modifier&&(i+=t.modifier),i+=";\n"):t.type&&(i+=t.type+" "+t.src+";\n")})),t.addUseBlocks(_);for(let t in e)i+=_WebGL_ShaderSource_js__WEBPACK_IMPORTED_MODULE_1__.Z.BLOCKS[t].blockDef;n=i+n}return n="#version 300 es\n"+n,n}static parseFsShader(t,e){let _=e.getData(),i=null,n="",s=[],a=[],r=t.getVarTable(),o=t.getFromMaterialDef().getGlobals(),h=null,m=t.getFromMaterialDef().getParams(),l=null,u=!1,f=[],c=!1,g={},d={},S={},p={},C=[],T=null;for(let T=e.getStart()+1;T<e.getEnd();T++){if(i=_Util_Tools_js__WEBPACK_IMPORTED_MODULE_2__.Z.trim(_[T]),i.startsWith("//"))continue;let e=null,E=-1,D=-1,P=null;if(r.forEach((t=>{E=_Util_Tools_js__WEBPACK_IMPORTED_MODULE_2__.Z.find2(i,t.pattern),-1!=E&&(D=_Util_Tools_js__WEBPACK_IMPORTED_MODULE_2__.Z.find2(i,t.pattern2),null!=D&&D!=E&&(E=D),P||(P={}),null!=P[E]?P[E].name.length<t.name.length&&(P[E]=t):P[E]=t)})),P)for(let t in P)e=P[t],S[e.name]||(S[e.name]=!0,a.push(e));e=null,E=-1,D=-1,P=null;let M=null;for(let t in o){h=o[t];for(let t in h)for(let e=0;e<h[t].length;e++)M=h[t][e],E=_Util_Tools_js__WEBPACK_IMPORTED_MODULE_2__.Z.find2(i,M.pattern),-1!=E&&(D=_Util_Tools_js__WEBPACK_IMPORTED_MODULE_2__.Z.find2(i,M.pattern2),null!=D&&D!=E&&(E=D),P||(P={}),null!=P[E]?P[E].name.length<l.name.length&&(P[E]=M):P[E]=M)}if(P)for(let t in P)e=P[t],p[e.name]||(C.push(e),p[e.name]=!0),i=_Util_Tools_js__WEBPACK_IMPORTED_MODULE_2__.Z.repSrc(i,e.pattern,e.tagPattern,e.name),c=!0;e=null,E=-1,D=-1,P=null;for(let t in m)l=m[t],E=_Util_Tools_js__WEBPACK_IMPORTED_MODULE_2__.Z.find2(i,l.getPattern()),-1!=E&&(D=_Util_Tools_js__WEBPACK_IMPORTED_MODULE_2__.Z.find2(i,l.getPattern2()),null!=D&&D!=E&&(E=D),P||(P={}),null!=P[E]?P[E].getName().length<l.getName().length&&(P[E]=l):P[E]=l);if(P)for(let t in P)e=P[t],g[e.getName()]||(f.push(e),g[e.getName()]=!0),i=_Util_Tools_js__WEBPACK_IMPORTED_MODULE_2__.Z.repSrc(i,e.getPattern(),e.getTagPattern(),e.getName()),u=!0;let x=null;P=null;for(let e in _WebGL_ShaderSource_js__WEBPACK_IMPORTED_MODULE_1__.Z.Context_Data)if(x=_WebGL_ShaderSource_js__WEBPACK_IMPORTED_MODULE_1__.Z.Context_Data[e],null!=x.pattern&&(E=_Util_Tools_js__WEBPACK_IMPORTED_MODULE_2__.Z.find2(i,x.pattern),-1!=E&&(D=_Util_Tools_js__WEBPACK_IMPORTED_MODULE_2__.Z.find2(i,x.pattern2),null!=D&&D!=E&&(E=D),P||(P={}),null!=P[E]?P[E].src.length<x.src.length&&(P[E]=x):P[E]=x),P))for(let e in P)x=P[e],d[x.src]||(x.isFlagVariable?t.addContextDefine(_WebGL_ShaderSource_js__WEBPACK_IMPORTED_MODULE_1__.Z.FRAGMENT_SHADER,x.src):(d[x.src]=!0,s.push(x))),i=_Util_Tools_js__WEBPACK_IMPORTED_MODULE_2__.Z.repSrc(i,x.pattern,x.tagPattern,x.tag);n+=_Util_Tools_js__WEBPACK_IMPORTED_MODULE_2__.Z.trim(i)+"\n"}if(u){t.addUseParams(_WebGL_ShaderSource_js__WEBPACK_IMPORTED_MODULE_1__.Z.FRAGMENT_SHADER,f);let e="\n";for(let t in f)l=f[t],e+="uniform "+l.getType()+" "+l.getName()+";\n";n=e+n}if(c){t.addUseGlobals(C);let e="\n",_=null;for(let t in C)_=C[t],null!=_.loc||null!=_.loc?e+="layout (location="+_.loc+") out "+_.dataType+" "+_.name+";\n":e+=_.dataType+" "+_.name+";\n";n=e+n}if(a.length>0){let t="\n";a.forEach((e=>{t+="in "+e.type+" "+e.name+";\n"})),n=t+n}if(s.length>0){let e={},_=[];t.addUseContexts(s);let i="\n";s.forEach((t=>{null!=t.loc||null!=t.loc?(T=_WebGL_ShaderSource_js__WEBPACK_IMPORTED_MODULE_1__.Z.Context_RenderDataRefFBs[t.src],i+="layout (location="+t.loc+") out "+t.type+" "+t.src+";\n"):t.def?(e[t.def]||_.push(t.def),e[t.def]=t.def):t.utype?(i+=t.utype+" "+t.src,t.modifier&&(i+=t.modifier),i+=";\n"):t.type&&(i+=t.type+" "+t.src+";\n")})),t.addUseBlocks(_);for(let t in e)i+=_WebGL_ShaderSource_js__WEBPACK_IMPORTED_MODULE_1__.Z.BLOCKS[t].blockDef;n=i+n}n="#version 300 es\nprecision mediump float;\n"+n,t.addShaderSource(_WebGL_ShaderSource_js__WEBPACK_IMPORTED_MODULE_1__.Z.FRAGMENT_SHADER,n),t.setFBId(T)}static parseFsShaderFun(t,e){}static parseFsShaderMain(t,e){let _=e.getData(),i=null,n="void main(){\n",s=[],a=[],r=t.getVarTable(),o=t.getFromMaterialDef().getParams(),h=null,m=!1,l=[],u={},f={},c={},g=null;for(let t=e.getStart()+1;t<e.getEnd();t++){if(i=_Util_Tools_js__WEBPACK_IMPORTED_MODULE_2__.Z.trim(_[t]),i.startsWith("//"))continue;r.forEach((t=>{_Util_Tools_js__WEBPACK_IMPORTED_MODULE_2__.Z.find(i,t.pattern)&&(c[t.name]||(c[t.name]=!0,a.push(t)))}));for(let t in o)h=o[t],_Util_Tools_js__WEBPACK_IMPORTED_MODULE_2__.Z.find(i,h.getPattern())&&(u[h.getName()]||(l.push(h),u[h.getName()]=!0),i=_Util_Tools_js__WEBPACK_IMPORTED_MODULE_2__.Z.repSrc(i,h.getPattern(),h.getTagPattern(),h.getName()),m=!0);let e=null;for(let t in _WebGL_ShaderSource_js__WEBPACK_IMPORTED_MODULE_1__.Z.Context_Data)e=_WebGL_ShaderSource_js__WEBPACK_IMPORTED_MODULE_1__.Z.Context_Data[t],_Util_Tools_js__WEBPACK_IMPORTED_MODULE_2__.Z.find(i,e.pattern)&&(f[e.src]||(f[e.src]=!0,s.push(e)),i=_Util_Tools_js__WEBPACK_IMPORTED_MODULE_2__.Z.repSrc(i,e.pattern,e.tagPattern,e.tag));n+=_Util_Tools_js__WEBPACK_IMPORTED_MODULE_2__.Z.trim(i)+"\n"}if(n+="}\n",m){t.addUseParams(l);let e="\n";for(let t in l)h=l[t],e+="uniform "+h.getType()+" "+h.getName()+";\n";n=e+n}if(a.length>0){let t="\n";a.forEach((e=>{t+="in "+e.type+" "+e.name+";\n"})),n=t+n}if(s.length>0){t.addUseContexts(s);let e="\n";s.forEach((t=>{null!=t.loc||null!=t.loc?(g=_WebGL_ShaderSource_js__WEBPACK_IMPORTED_MODULE_1__.Z.Context_RenderDataRefFBs[t.src],e+="layout (location="+t.loc+") out "+t.type+" "+t.src+";\n"):t.utype?e+=t.utype+" "+t.src+";\n":t.type&&(e+=t.type+" "+t.src+";\n")})),n=e+n}return n="#version 300 es\nprecision mediump float;\n"+n,t.setFBId(g),n}static parseSubPass(t,e){let _=e.getName();null!=_&&""!=_||(_=_Render_Render_js__WEBPACK_IMPORTED_MODULE_4__.Z.FORWARD);let i=e.getData(),n=null;for(let s=e.getStart()+1;s<e.getEnd();s++)n=i[s],n=_Util_Tools_js__WEBPACK_IMPORTED_MODULE_2__.Z.trim(n),n.startsWith("//")||(n=n.substring(0,n.length-1),t.addSubPass(_,t.getFromMaterialDef().getSubShaderDef(n)))}static parsePass(t,e){let _=e.getData(),i=null,n={};for(let t=e.getStart()+1;t<e.getEnd();t++)if(i=_[t],i=_Util_Tools_js__WEBPACK_IMPORTED_MODULE_2__.Z.trim(i),!i.startsWith("//")&&0!=i.length)if(i=i.substring(0,i.length-1),i=i.split(" "),i.length>2){let t=[];for(let e=1;e<i.length;e++)t.push(i[e]);n[""+i[0]]=t}else n[""+i[0]]=""+i[1];t.addPass(t.getFromMaterialDef().getSubShaderDef(e.getName()),n)}static parseBlockDef(t,e){if(e){switch(e.getType()){case"Def":t.setName(e.getName());break;case"Globals":MaterialDef.parseGlobals(t,e);break;case"Params":MaterialDef.parseParams(t,e);break;case"SubTechnology":let _=new _SubShaderDef_js__WEBPACK_IMPORTED_MODULE_3__.Z(e.getName());t.addSubShaderDef(_.getName(),_),t=_;break;case"Vs_Shader":return void MaterialDef.parseVsShader(t,e);case"Fs_Shader":return void MaterialDef.parseFsShader(t,e);case"Vars":MaterialDef.parseShaderVars(t,e);break;case"Advanced":MaterialDef.parseAdvanced(t,e);break;case"Vs_Shader_Main":case"Fs_Shader_Main":break;case"Technology":let i=new _TechnologyDef_js__WEBPACK_IMPORTED_MODULE_7__.Z(e.getName());t.addTechnologyDef(e.getName(),i),t=i;break;case"Sub_Pass":let n=e.getName();null!=n&&""!=n||(n=_Render_Render_js__WEBPACK_IMPORTED_MODULE_4__.Z.FORWARD);let s=new SubPassDef(n);t.addSubPass(n,s),t=s;break;case"Pass":MaterialDef.parsePass(t,e)}e.getSubBlock().forEach((e=>{MaterialDef.parseBlockDef(t,e)}))}}static getBlockDef(t,e,_){let i=1,n=null;for(let s=_+1;s<e.length;s++)if(n=MaterialDef.trim(e[s]),!n.startsWith("//")){if(n.endsWith("{")){i++;let _=n.substring(0,n.indexOf("{")).split(" "),a=_[0];"void"==a&&(a=t.getType()+"_Main");let r="";_.length>1&&(r=_[_.length-1]);let o=new Block(a,r,e,s);2==i&&t.addSubBlock(o),this.getBlockDef(o,e,s)}else n.endsWith("}")&&i--;if(0==i){t.setEnd(s);break}}}static parse(t){if(t){t=MaterialDef.trim(t).startsWith("#type module")?(new _MaterialDefBuild_js__WEBPACK_IMPORTED_MODULE_6__.Z).build(t):t.split("\n");for(let e=0;e<t.length;e++){let _=MaterialDef.trim(t[e]);if(!_.startsWith("//")&&_.endsWith("{")){let i=_.substring(0,_.indexOf("{")).split(" "),n=i[0];if("void"!=n){let _="";i.length>1&&(_=i[i.length-1]);let s=new Block(n,_,t,e);MaterialDef.getBlockDef(s,t,e);let a=new MaterialDef(s.getName());return MaterialDef.parseBlockDef(a,s),a}}}}return null}}},6815:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{Z:()=>MaterialDefBuild});var _Util_Tools_js__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(9881),_WebGL_ShaderSource_js__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(9085);class MaterialDefBuild{constructor(t){this._m_funs={},this._m_vars={}}static trim(t){return t.replace(/(^\s*)|(\s*$)/g,"")}_getFun(t,e,_,i){let n=[],s={},a=null,r=i,o=i=>{let h=_[i];if(h&&!s[i]){s[i]=!0;let _=h.calls;if(_&&_.length)for(let t in _)o(_[t]);this._m_funs[i]||(this._m_funs[i]=((_,i,n)=>{let s=e[n],a=[],r=null;for(let e=_;e<=i;e++)r=t[e],s&&(r=_Util_Tools_js__WEBPACK_IMPORTED_MODULE_0__.Z.repSrc(r,s.pattern,s.tagPattern,"")),a.push(r+"\n");return a})(h.s,h.e,h.vars),h.vars&&a&&h.vars!=a&&console.error("函数链"+r+"使用了多个vars!")),h.vars&&(a=h.vars);for(let t=0;t<this._m_funs[i].length;t++)n.push(this._m_funs[i][t])}};if(o(i),a){if(!this._m_vars[a]){let _=[];_.push("Vars{\n");let i=e[a];for(let e=i.s+1;e<=i.e;e++)_.push(t[e]+"\n");this._m_vars[a]=_}let _=[];for(let t=0;t<this._m_vars[a].length;t++)_.push(this._m_vars[a][t]);a=_}return{src:n,svars:a}}build(data){let vars={},allVars={},functions={},funDefId=null,allFuns={},v=0,f=0,startBlocks={},includes={},endBlocks={},find=!1,def=null;if(data){data=data.split("\n");let result=[];for(let t=1;t<data.length;t++){let e=MaterialDefBuild.trim(data[t]);if(e.startsWith("#include")){let t=e.split(" ")[1];if(_WebGL_ShaderSource_js__WEBPACK_IMPORTED_MODULE_1__.Z.Context_Data[t]&&!includes[t]){includes[t]=!0,t=_WebGL_ShaderSource_js__WEBPACK_IMPORTED_MODULE_1__.Z.Context_Data[t],t=t.split("\n");for(let e=0;e<t.length;e++)result.push(t[e])}}else result.push(data[t])}data=result;for(let i=0;i<data.length;i++){let _line=MaterialDefBuild.trim(data[i]);if(find=!1,def=null,!_line.startsWith("//")){let nextDef=null;if(_line.startsWith("Vars")?(nextDef=vars,v++):_line.startsWith("Functions")&&(nextDef=functions,f++),nextDef){find=!0;let block=_line.substring(0,_line.indexOf("{"));def={s:i,e:null};let bsa=block.split(" "),blockId="";bsa.length>1&&(blockId=bsa[bsa.length-1]),nextDef[blockId]=def,nextDef==vars?(def.pattern=eval("/"+blockId+"./"),def.pattern2=eval("/"+blockId+".[\\s+-;.,\\*\\\\]{1,}/"),def.tagPattern=eval("/"+blockId+"./g")):(funDefId=blockId,def.pattern=eval("/"+blockId+"./"),def.pattern2=eval("/"+blockId+".[\\s+-;.,\\*\\\\]{1,}/"))}if(find){let start=1,nextFun=null,cf=!1,cfstart=0;for(;;){if(i++,_line=MaterialDefBuild.trim(data[i]),_line.endsWith("{"))if(_line.startsWith("{")||_line.startsWith("for")||_line.startsWith("if")||_line.startsWith("else")||_line.startsWith("while"))cfstart++;else{start++;let block=_line.substring(0,_line.indexOf("(")),bsa=block.split(" ");nextFun=bsa[bsa.length-1],allFuns[nextFun]||(allFuns[nextFun]={pattern:eval("/"+nextFun+"/"),pattern2:eval("/"+nextFun+"[\\s+-;.,\\*\\\\]{1,}/")},allFuns[nextFun].s=i,allFuns[nextFun].funDefId=funDefId)}else if(_line.startsWith("}"))cfstart>0?cfstart--:(start--,nextFun&&(allFuns[nextFun].e=i),nextFun=null);else if(nextFun){for(let t in vars){let e=_Util_Tools_js__WEBPACK_IMPORTED_MODULE_0__.Z.find2(_line,vars[t].pattern);if(-1!=e){let e=_Util_Tools_js__WEBPACK_IMPORTED_MODULE_0__.Z.find2(_line,vars[t].pattern2);null!=e&&allFuns[nextFun]&&(allFuns[nextFun].vars&&allFuns[nextFun].vars!=t&&console.error("函数"+nextFun+"使用了不同的vars!"),allFuns[nextFun].vars=t)}}for(let t in allFuns){let e=_Util_Tools_js__WEBPACK_IMPORTED_MODULE_0__.Z.find2(_line,allFuns[t].pattern);if(-1!=e){let e=_Util_Tools_js__WEBPACK_IMPORTED_MODULE_0__.Z.find2(_line,allFuns[t].pattern2);null!=e&&(allFuns[nextFun]||console.error("当前上下文不存在调用函数:"+nextFun),allFuns[nextFun]&&(allFuns[nextFun].calls||(allFuns[nextFun].calls=[]),allFuns[nextFun].calls.push(t)))}}}if(0==start)break}def.e=i}}}if(v||f){let t=[],e=null;for(let _ in vars){e=vars[_];for(let _=e.s;_<=e.e;_++)t[_]=!0}for(let _ in functions){e=functions[_];for(let _=e.s;_<=e.e;_++)t[_]=!0}let _=[];for(let e=0;e<data.length;e++)t[e]||_.push(data[e]+"\n");let i=null,n={},s=0;for(let t=0;t<_.length;t++){let e=MaterialDefBuild.trim(_[t]);if(!e.startsWith("//"))if(e.startsWith("SubTechnology")){let t=e.substring(0,e.indexOf("{")),_=t.split(" "),n="";_.length>1&&(n=_[_.length-1]),i=n}else if(e.startsWith("Vs_Shader")){let _=e.split(":");if(_.length>1){let e=_[1].split(".")[1].split(";")[0],a=this._getFun(data,vars,allFuns,e);n[t]={curSub:i,type:"Vs_Shader",src:a.src,vars:a.svars,fun:e},s++}}else if(e.startsWith("Fs_Shader")){let _=e.split(":");if(_.length>1){let e=_[1].split(".")[1].split(";")[0],a=this._getFun(data,vars,allFuns,e);n[t]={curSub:i,type:"Fs_Shader",src:a.src,vars:a.svars,fun:e},s++}}}if(data=[],s){let t={},e=null;for(let i=0;i<_.length;i++)if(e=n[i],e){if(e.vars&&!t[e.curSub])for(let t=0;t<e.vars.length;t++)data.push(e.vars[t]);"Vs_Shader"==e.type?data.push("Vs_Shader{\n"):"Fs_Shader"==e.type&&data.push("Fs_Shader{\n");for(let t=0;t<e.src.length;t++)data.push(e.src[t]);data.push("void main(){\n"),data.push(e.fun+"();\n"),data.push("}\n"),data.push("}\n")}else data.push(_[i])}}}return data}}},4190:(t,e,_)=>{_.d(e,{Z:()=>i});class i{constructor(t){this._m_RenderPath=t,this._m_SubShaders=[],this._m_SubShaderMaps={},this._m_FBId=null,this._m_PassId=0}setFBId(t){this._m_FBId=t}getFBId(){return this._m_FBId}getRenderPath(){return this._m_RenderPath}addSubShader(t){this._m_SubShaders.push(t),this._m_SubShaderMaps[t.subShader.getName()]=t,this._m_SubShaderMaps[this._m_PassId++]=t}getSubShaders(){return this._m_SubShaders}getSubShaderMaps(){return this._m_SubShaderMaps}}},5356:(t,e,_)=>{_.d(e,{Z:()=>r});var i=_(9085),n=_(8005),s=_(9881),a=_(8803);class r{constructor(t,e,_){this._m_Def=_,this._m_ObjId=s.Z.nextId(),this._m_DefId=_.getDefId(),this._m_Name=_.getName(),this._m_MatParams={},this._m_CanDefineParams={},this._m_AleadyDefinedParams={},this._m_Params={},this._m_ParamValues={},this._m_Defines=null,this._m_KeyDefs=null,this._m_NeedLoadShaderCaches=!1,this._m_ContextVars={},this._m_RenderDatas={},this._m_FBId=_.getFBId(),this._m_RefRenderDataFBs=null,this._m_RenderProgramType=_.getRenderProgramType(),this._loadParams(),this._newShaderProgram(t,e)}getSId(){return this._m_DefId}_loadParams(){let t=this._m_Def.getUseParams();t&&t.length>0&&t.forEach((t=>{this._m_CanDefineParams[t.getName()]="#define "+t.getDefType()+" "+t.getDefType(),this._m_Params[t.getName()]=!0}))}uploadParam(t,e,_){if(this._m_MatParams[e]){if(this._m_ParamValues[e]&&this._m_ParamValues[e].compare(_))return;_._upload(t,this._m_MatParams[e].loc,null),this._m_ParamValues[e]=_}}needCompile(){return this._m_NeedLoadShaderCaches||null!=this._m_Defines||this._m_ShaderProgram.needCompile()}_compile(t,e){this._m_Defines&&this._newShaderProgram(t,e),this._m_ShaderProgram.needCompile()&&(this._m_ShaderProgram._compile(t),this._m_RenderDatas={},a.Z.log("编译!")),this._loadShaderCaches(t,e)}_loadShaderCaches(t,e){this._m_MatParams=[],this._m_NeedLoadShaderCaches=!1,this.use(t);let _=this._m_Def.getUseParams(),n=this._m_Def.getUseGlobals(),s=this._m_Def.getUseContexts(),a=0;if(_&&_.length>0&&_.forEach((e=>{let _=t.getUniformLocation(this._m_ShaderProgram.getProgram(),e.getName());if(_){let i=null;switch(e.getType()){case"vec4":i="uniform4f";break;case"sampler2D":case"samplerCube":t.uniform1i(_,a),i=null,_=a++}this._m_MatParams[e.getName()]={type:e.getType(),loc:_,fun:i}}})),n&&n.length>0){let e=null,_=null;n.forEach((i=>{null==i.loc||null==i.loc?this._m_RenderDatas[i.name]||(e=t.getUniformLocation(this._m_ShaderProgram.getProgram(),i.name),t.uniform1i(e,a),_=null,e=a++,this._m_RenderDatas[i.name]={type:i.type,loc:e,fun:_,refId:i.refName,dataId:i.name}):this._m_FBId=i.refName}))}s&&s.length>0&&s.forEach((_=>{if(null==_.loc||null==_.loc){let n=t.getUniformLocation(this._m_ShaderProgram.getProgram(),_.src);if(n){let e=null;switch(_.type){case"mat4":e="uniformMatrix4fv";break;case"samplerCube":case"sampler2D":t.uniform1i(n,a),e=null,n=a++,"renderData"==_.flag&&(this._m_RenderDatas[_.src]={type:_.type,loc:n,fun:e,refId:i.Z.Context_RenderDataRefFBs[_.src],dataId:_.src})}this._m_ContextVars[_.src]={type:_.type,loc:n,fun:e},this._m_MatParams[_.src]={type:_.type,loc:n,fun:e}}e.addContext(_.src)}}));let r=this._m_Def.getUseBlocks();r&&r.length>0&&r.forEach((e=>{t.uniformBlockBinding(this._m_ShaderProgram.getProgram(),t.getUniformBlockIndex(this._m_ShaderProgram.getProgram(),e),i.Z.BLOCKS[e].blockIndex)})),e.m_LastSubShader&&e.m_LastSubShader.use(t)}getRenderProgramType(){return this._m_RenderProgramType}getName(){return this._m_Name}getDefId(){return this._m_DefId}setFBId(t){this._m_FBId=t}getFBId(){return this._m_FBId}use(t){this._m_ShaderProgram.use(t)}getContextVars(){return this._m_ContextVars}getRenderDatas(){return this._m_RenderDatas}getRefRenderDataFBs(){return this._m_RefRenderDataFBs}clearDefine(t,e,_){let n=!1;if(this._m_AleadyDefinedParams[t]&&(this._m_CanDefineParams[t]||e)&&(n=!0,delete this._m_AleadyDefinedParams[t]),n){this._m_Defines=null,this._m_KeyDefs=null;for(let _ in this._m_AleadyDefinedParams){this._m_Defines||(this._m_Defines={});let n=this._m_Def.getShaderParams(),s=this._m_Def.getShaderContextDefines();n[i.Z.VERTEX_SHADER]&&n[i.Z.VERTEX_SHADER][_]||s[i.Z.VERTEX_SHADER]&&s[i.Z.VERTEX_SHADER][_]?(this._m_Defines[i.Z.VERTEX_SHADER]||(this._m_Defines[i.Z.VERTEX_SHADER]=""),e&&_==t||null!=i.Z.Context_Data[_]?this._m_Defines[i.Z.VERTEX_SHADER]+=i.Z.Context_Data[_]+"\n":this._m_Defines[i.Z.VERTEX_SHADER]+=this._m_CanDefineParams[_]+"\n",this._m_KeyDefs||(this._m_KeyDefs=""),this._m_KeyDefs+=_+","):(n[i.Z.FRAGMENT_SHADER]&&n[i.Z.FRAGMENT_SHADER][_]||s[i.Z.FRAGMENT_SHADER]&&s[i.Z.FRAGMENT_SHADER][_])&&(this._m_Defines[i.Z.FRAGMENT_SHADER]||(this._m_Defines[i.Z.FRAGMENT_SHADER]=""),e&&_==t||null!=i.Z.Context_Data[_]?this._m_Defines[i.Z.FRAGMENT_SHADER]+=i.Z.Context_Data[_]+"\n":this._m_Defines[i.Z.FRAGMENT_SHADER]+=this._m_CanDefineParams[_]+"\n",this._m_KeyDefs||(this._m_KeyDefs=""),this._m_KeyDefs+=_+",")}if(this._m_Defines||(this._m_Defines={},this._m_KeyDefs=","),null!=this._m_Defines&&_){let t=this._m_ShaderProgram._m_Holds;for(let e in t)t[e]!=this&&t[e]&&(t[e]._m_KeyDefs=this._m_KeyDefs,t[e]._m_Defines=this._m_Defines)}}}addDefine(t,e,_){let n=!1;if(this._m_AleadyDefinedParams[t]||(this._m_CanDefineParams[t]||e)&&(n=!0,this._m_AleadyDefinedParams[t]=!0),n){this._m_Defines=null,this._m_KeyDefs=null;for(let _ in this._m_AleadyDefinedParams){this._m_Defines||(this._m_Defines={});let n=this._m_Def.getShaderParams(),s=this._m_Def.getShaderContextDefines();n[i.Z.VERTEX_SHADER]&&n[i.Z.VERTEX_SHADER][_]||s[i.Z.VERTEX_SHADER]&&s[i.Z.VERTEX_SHADER][_]?(this._m_Defines[i.Z.VERTEX_SHADER]||(this._m_Defines[i.Z.VERTEX_SHADER]=""),e&&_==t||null!=i.Z.Context_Data[_]?this._m_Defines[i.Z.VERTEX_SHADER]+=i.Z.Context_Data[_]+"\n":this._m_Defines[i.Z.VERTEX_SHADER]+=this._m_CanDefineParams[_]+"\n",this._m_KeyDefs||(this._m_KeyDefs=""),this._m_KeyDefs+=_+","):(n[i.Z.FRAGMENT_SHADER]&&n[i.Z.FRAGMENT_SHADER][_]||s[i.Z.FRAGMENT_SHADER]&&s[i.Z.FRAGMENT_SHADER][_])&&(this._m_Defines[i.Z.FRAGMENT_SHADER]||(this._m_Defines[i.Z.FRAGMENT_SHADER]=""),e&&_==t||null!=i.Z.Context_Data[_]?this._m_Defines[i.Z.FRAGMENT_SHADER]+=i.Z.Context_Data[_]+"\n":this._m_Defines[i.Z.FRAGMENT_SHADER]+=this._m_CanDefineParams[_]+"\n",this._m_KeyDefs||(this._m_KeyDefs=""),this._m_KeyDefs+=_+",")}if(null!=this._m_Defines&&_){let t=this._m_ShaderProgram._m_Holds;for(let e in t)t[e]!=this&&t[e]&&(t[e]._m_KeyDefs=this._m_KeyDefs,t[e]._m_Defines=this._m_Defines)}}}_newShaderProgram(t,e){if(this._m_Defines){let t=this._m_KeyDefs;t&&t.length>0&&(t=t.substr(0,t.length-1),this._m_DefId=this._m_Def.computeSignatureDefId(t))}e.m_Shaders[this._m_DefId]?(this._m_ShaderProgram&&(this._m_ShaderProgram.deleteHold(this),this._m_ShaderProgram.canDestroy()&&this._m_ShaderProgram.destroy(t,e)),this._m_ShaderProgram=e.m_Shaders[this._m_DefId],this._m_ShaderProgram.addHold(this),this._m_Defines=null):(this._m_ShaderProgram&&(this._m_ShaderProgram.deleteHold(this),this._m_ShaderProgram.canDestroy()&&this._m_ShaderProgram.destroy(t,e)),this._m_ShaderProgram=new n.Z(t,this._m_DefId,this._m_Def.getShaderSource(),this._m_Defines,!0),e.m_Shaders[this._m_DefId]=this._m_ShaderProgram,this._m_ShaderProgram.addHold(this),this._m_Defines=null),this._m_NeedLoadShaderCaches=!0}getRef(t,e){return t.getUniformLocation(this._m_ShaderProgram.getProgram(),e)}}},1144:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{Z:()=>SubShaderDef});var _WebGL_ShaderSource_js__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(9085),_Util_Tools_js__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(9881);class SubShaderDef{constructor(t){this._m_Name=t,this._m_DefId=null,this._m_Signature=null,this._m_ShaderSource=new _WebGL_ShaderSource_js__WEBPACK_IMPORTED_MODULE_0__.Z,this._m_FromMaterialDef=null,this._m_Var_Table=[],this._m_UseContexts=[],this._m_UseParams=[],this._m_UseGlobals=[],this._m_ShaderParams={},this._m_ShaderContextDefines={},this._m_UseBlocks=[],this._m_FBId=null,this._m_RefFBs=null,this._m_RenderProgramType=null}setRenderProgramType(t){this._m_RenderProgramType=t}getRenderProgramType(){return this._m_RenderProgramType}setFBId(t){this._m_FBId=t}getFBId(){return this._m_FBId}computeSignatureDefId(t){if(t){let e=t.split(",").sort((function(t,e){return t.localeCompare(e)}));return t="",e.forEach((e=>{t+=e+","})),t=t.substr(0,t.length-1),_Util_Tools_js__WEBPACK_IMPORTED_MODULE_1__.Z.uniqueId(this._m_Signature+t)}return this._m_DefId=_Util_Tools_js__WEBPACK_IMPORTED_MODULE_1__.Z.uniqueId(this._m_Signature),this._m_DefId}getDefId(){return this._m_DefId}addUseContexts(t){t.forEach((t=>{this._m_UseContexts.push(t)}))}getUseContexts(){return this._m_UseContexts}addUseGlobals(t){t.forEach((t=>{this._m_UseGlobals.push(t)}))}getUseGlobals(){return this._m_UseGlobals}addUseParams(t,e){e.forEach((e=>{this._m_UseParams.push(e),t==_WebGL_ShaderSource_js__WEBPACK_IMPORTED_MODULE_0__.Z.VERTEX_SHADER?(this._m_ShaderParams[_WebGL_ShaderSource_js__WEBPACK_IMPORTED_MODULE_0__.Z.VERTEX_SHADER]||(this._m_ShaderParams[_WebGL_ShaderSource_js__WEBPACK_IMPORTED_MODULE_0__.Z.VERTEX_SHADER]={}),this._m_ShaderParams[_WebGL_ShaderSource_js__WEBPACK_IMPORTED_MODULE_0__.Z.VERTEX_SHADER][e.getName()]=!0):t==_WebGL_ShaderSource_js__WEBPACK_IMPORTED_MODULE_0__.Z.FRAGMENT_SHADER&&(this._m_ShaderParams[_WebGL_ShaderSource_js__WEBPACK_IMPORTED_MODULE_0__.Z.FRAGMENT_SHADER]||(this._m_ShaderParams[_WebGL_ShaderSource_js__WEBPACK_IMPORTED_MODULE_0__.Z.FRAGMENT_SHADER]={}),this._m_ShaderParams[_WebGL_ShaderSource_js__WEBPACK_IMPORTED_MODULE_0__.Z.FRAGMENT_SHADER][e.getName()]=!0)}))}addContextDefine(t,e){this._m_ShaderContextDefines[t]||(this._m_ShaderContextDefines[t]={}),this._m_ShaderContextDefines[t][e]=!0}getShaderParams(){return this._m_ShaderParams}getShaderContextDefines(){return this._m_ShaderContextDefines}getUseParams(){return this._m_UseParams}addUseBlocks(t){t.forEach((t=>{this._m_UseBlocks.push(t)}))}getUseBlocks(){return this._m_UseBlocks}setFromMaterialDef(t){this._m_FromMaterialDef=t,this._m_Signature=t.getName()+this.getName(),this.computeSignatureDefId()}getFromMaterialDef(){return this._m_FromMaterialDef}getName(){return this._m_Name}addVar(type,name){this._m_Var_Table.push({type,name,pattern:eval("/"+name+"/"),pattern2:eval("/"+name+"[\\s+-;.,\\*\\\\]{1,}/")})}getVarTable(){return this._m_Var_Table}addShaderSource(t,e){this._m_ShaderSource.set(t,e)}getShaderSource(){return this._m_ShaderSource}}},4955:(t,e,_)=>{_.d(e,{Z:()=>s});var i=_(3286),n=_(4190);class s{constructor(t){this._m_Name=t,this._m_SubPasss={}}setName(t){this._m_Name=t}addSubPass(t,e,_){this._m_SubPasss[t]||(this._m_SubPasss[t]=new n.Z(t));let s=null;if(_)for(let t in _)s||(s=new i.Z),s.setFlag(t,_[t]);this._m_SubPasss[t].addSubShader({subShader:e,renderState:s})}getSubPasss(t){return this._m_SubPasss[t]}getSubPassList(){return this._m_SubPasss}}},89:(t,e,_)=>{_.d(e,{Z:()=>i});class i{constructor(t){this.m_Name=t,this.m_SubPass={},this._m_FromMaterialDef=null}getName(){return this.m_Name}setFromMaterialDef(t){this._m_FromMaterialDef=t}getFromMaterialDef(){return this._m_FromMaterialDef}addSubPass(t,e){this.m_SubPass[t]||(this.m_SubPass[t]=[]),this.m_SubPass[t].push(e),e.setFromMaterialDef(this._m_FromMaterialDef)}getSubPass(){return this.m_SubPass}}},6153:(t,e,_)=>{_.d(e,{Z:()=>r});var i=_(8333),n=_(73),s=_(3792),a=_(1441);class r extends i.Z{static S_TEMP_VEC3=new s.Z;static S_TEMP_VEC32=new s.Z;static S_TEMP_VEC33=new s.Z;static S_TEMP_VEC34=new s.Z;static S_TEMP_MAT4=new a.Z;static S_TEMP_AABB=new r;constructor(t){super(t),this._m_XHalf=0,this._m_YHalf=0,this._m_ZHalf=0}setHalfInXYZ(t,e,_){this._m_XHalf=t,this._m_YHalf=e,this._m_ZHalf=_}setHalf(t){this._m_XHalf=t._m_X,this._m_YHalf=t._m_Y,this._m_ZHalf=t._m_Z}setXHalf(t){this._m_XHalf=t}getXHalf(){return this._m_XHalf}setYHalf(t){this._m_YHalf=t}getYHalf(){return this._m_YHalf}setZHalf(t){this._m_ZHalf=t}getZHalf(){return this._m_ZHalf}getType(){return i.Z.S_TYPE_AABB}fromPositions(t){let e=Number.MAX_VALUE,_=Number.MAX_VALUE,i=Number.MAX_VALUE,n=-Number.MAX_VALUE,s=-Number.MAX_VALUE,a=-Number.MAX_VALUE;for(let r=0;r<t.length;r+=3)e=Math.min(t[r],e),_=Math.min(t[r+1],_),i=Math.min(t[r+2],i),n=Math.max(t[r],n),s=Math.max(t[r+1],s),a=Math.max(t[r+2],a);this._m_Center.setToInXYZ(e+n,_+s,i+a),this._m_Center.multLength(.5),this._m_XHalf=Math.abs(n-this._m_Center._m_X),this._m_YHalf=Math.abs(s-this._m_Center._m_Y),this._m_ZHalf=Math.abs(a-this._m_Center._m_Z)}fromMinMax(t,e){this._m_Center.setTo(e),this._m_Center.add(t),this._m_Center.multLength(.5),this._m_XHalf=Math.abs(e._m_X-this._m_Center._m_X),this._m_YHalf=Math.abs(e._m_Y-this._m_Center._m_Y),this._m_ZHalf=Math.abs(e._m_Z-this._m_Center._m_Z)}whichSide(t){let e=t.distance(this._m_Center),_=t.getNormal(),i=Math.abs(this._m_XHalf*_._m_X)+Math.abs(this._m_YHalf*_._m_Y)+Math.abs(this._m_ZHalf*_._m_Z);return e>i?n.Z.S_SIDE_POSITIVE:e<-i?n.Z.S_SIDE_NEGATIVE:n.Z.S_SIDE_NONE}_mergeFromCenterAndHalf(t,e,_,i){if(this._m_XHalf==Number.POSITIVE_INFINITY||e==Number.POSITIVE_INFINITY)this._m_Center._m_X=0,this._m_XHalf=Number.POSITIVE_INFINITY;else{let _=this._m_Center._m_X-this._m_XHalf;_>t._m_X-e&&(_=t._m_X-e);let i=this._m_Center._m_X+this._m_XHalf;i<t._m_X+e&&(i=t._m_X+e),this._m_Center._m_X=(_+i)/2,this._m_XHalf=i-this._m_Center._m_X}if(this._m_YHalf==Number.POSITIVE_INFINITY||e==Number.POSITIVE_INFINITY)this._m_Center._m_Y=0,this._m_YHalf=Number.POSITIVE_INFINITY;else{let e=this._m_Center._m_Y-this._m_YHalf;e>t._m_Y-_&&(e=t._m_Y-_);let i=this._m_Center._m_Y+this._m_YHalf;i<t._m_Y+_&&(i=t._m_Y+_),this._m_Center._m_Y=(e+i)/2,this._m_YHalf=i-this._m_Center._m_Y}if(this._m_ZHalf==Number.POSITIVE_INFINITY||e==Number.POSITIVE_INFINITY)this._m_Center._m_Z=0,this._m_ZHalf=Number.POSITIVE_INFINITY;else{let e=this._m_Center._m_Z-this._m_ZHalf;e>t._m_Z-i&&(e=t._m_Z-i);let _=this._m_Center._m_Z+this._m_ZHalf;_<t._m_Z+i&&(_=t._m_Z+i),this._m_Center._m_Z=(e+_)/2,this._m_ZHalf=_-this._m_Center._m_Z}return this}merge(t){if(!t)return this;switch(t.getType()){case i.Z.S_TYPE_AABB:return this._mergeFromCenterAndHalf(t._m_Center,t._m_XHalf,t._m_YHalf,t._m_ZHalf);case i.Z.S_TYPE_SPHERE:}}setTo(t){t.getType()==i.Z.S_TYPE_AABB&&(this._m_Center.setTo(t._m_Center),this._m_XHalf=t._m_XHalf,this._m_YHalf=t._m_YHalf,this._m_ZHalf=t._m_ZHalf)}transform(t,e,_,i){i=i||r.S_TEMP_AABB,this._m_Center.mult(t,i._m_Center),e.multVec3(i._m_Center),i._m_Center.add(_),r.S_TEMP_VEC3.setToInXYZ(this._m_XHalf*Math.abs(t._m_X),this._m_YHalf*Math.abs(t._m_Y),this._m_ZHalf*Math.abs(t._m_Z)),a.Z.fromQuaternion(e,r.S_TEMP_MAT4),r.S_TEMP_MAT4.absLocal(),a.Z.multiplyMV3In3x3(r.S_TEMP_VEC32,r.S_TEMP_VEC3,r.S_TEMP_MAT4),i._m_XHalf=Math.abs(r.S_TEMP_VEC32._m_X),i._m_YHalf=Math.abs(r.S_TEMP_VEC32._m_Y),i._m_ZHalf=Math.abs(r.S_TEMP_VEC32._m_Z)}transformFromMat44(t,e){e=e||r.S_TEMP_AABB;let _=a.Z.multiplyMV3(e._m_Center,this._m_Center,t);e._m_Center.multLength(1/_);let i=r.S_TEMP_MAT4;i.set(t),i.keepRotation(),i.absLocal(),r.S_TEMP_VEC3.setToInXYZ(this._m_XHalf,this._m_YHalf,this._m_ZHalf),a.Z.multiplyMV3In3x3(r.S_TEMP_VEC32,r.S_TEMP_VEC3,i),e.setHalfInXYZ(Math.abs(r.S_TEMP_VEC32._m_X),Math.abs(r.S_TEMP_VEC32._m_Y),Math.abs(r.S_TEMP_VEC32._m_Z))}getMin(t){return(t=t||new s.Z).setTo(this._m_Center),t.subInXYZ(this._m_XHalf,this._m_YHalf,this._m_ZHalf),t}getMax(t){return(t=t||new s.Z).setTo(this._m_Center),t.addInXYZ(this._m_XHalf,this._m_YHalf,this._m_ZHalf),t}contains(t){switch(t.getType()){case i.Z.S_TYPE_AABB:let e=this.getMin(r.S_TEMP_VEC3),_=this.getMax(r.S_TEMP_VEC32),n=t.getMin(r.S_TEMP_VEC33),s=t.getMax(r.S_TEMP_VEC34);return!(n._m_X>_._m_X||n._m_Y>_._m_Y||n._m_Z>_._m_Z||s._m_X<e._m_X||s._m_Y<e._m_Y||s._m_Z<e._m_Z);case i.Z.S_TYPE_SPHERE:return!1}return!1}inside(t){switch(t.getType()){case i.Z.S_TYPE_AABB:let e=this.getMin(r.S_TEMP_VEC3),_=this.getMax(r.S_TEMP_VEC32),n=t.getMin(r.S_TEMP_VEC33),s=t.getMax(r.S_TEMP_VEC34);return s._m_X<=_._m_X&&n._m_X>=e._m_X&&s._m_Y<=_._m_Y&&n._m_Y>=e._m_Y&&s._m_Z<=_._m_Z&&n._m_Z>=e._m_Z;case i.Z.S_TYPE_SPHERE:return!1}return!1}}},8333:(t,e,_)=>{_.d(e,{Z:()=>n});var i=_(3792);class n{static S_TYPE_AABB=0;static S_TYPE_SPHERE=1;constructor(t){this._m_PriorityPlane=0,this._m_Center=new i.Z}setCenter(t){this._m_Center.setTo(t)}getCenter(t){return(t=t||new i.Z).setTo(this._m_Center),t}getType(){return-1}whichSide(t){}setTo(t){}transform(t,e,_,i){}transformFromMat44(t,e){}merge(t){return null}setPriorityPlane(t){this._m_PriorityPlane=t}getPriorityPlane(){return this._m_PriorityPlane}contains(t){return!1}inside(t){return!1}distance(t){return this._m_Center.distance(t)}}},1441:(t,e,_)=>{_.d(e,{Z:()=>n});var i=_(3792);class n{static _S_TEMP_MAT4=new n;static _S_TEMP_VEC3=new i.Z;constructor(){this.m=[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1],this.bufferData=new Float32Array(16)}identity(){this.m=[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1]}scale(t,e,_){return this.m[0]*=t,this.m[4]*=e,this.m[8]*=_,this.m[1]*=t,this.m[5]*=e,this.m[9]*=_,this.m[2]*=t,this.m[6]*=e,this.m[10]*=_,this.m[3]*=t,this.m[7]*=e,this.m[11]*=_,this}translate(t,e,_){const i=this.m[3];this.m[0]+=i*t,this.m[1]+=i*e,this.m[2]+=i*_;const n=this.m[7];this.m[4]+=n*t,this.m[5]+=n*e,this.m[6]+=n*_;const s=this.m[11];this.m[8]+=s*t,this.m[9]+=s*e,this.m[10]+=s*_;const a=this.m[15];return this.m[12]+=a*t,this.m[13]+=a*e,this.m[14]+=a*_,this}static lookAt(t,e,_,i){let n=t.subRetNew(e).normal(),s=_.crossRetNew(n).normal(),a=n.crossRetNew(s).normal();return(i=i||new Array(16).fill(0))[0]=s._m_X,i[4]=s._m_Y,i[8]=s._m_Z,i[3]=0,i[1]=a._m_X,i[5]=a._m_Y,i[9]=a._m_Z,i[7]=0,i[2]=n._m_X,i[6]=n._m_Y,i[10]=n._m_Z,i[11]=0,i[12]=-(t._m_X*s._m_X+t._m_Y*s._m_Y+t._m_Z*s._m_Z),i[13]=-(t._m_X*a._m_X+t._m_Y*a._m_Y+t._m_Z*a._m_Z),i[14]=-(t._m_X*n._m_X+t._m_Y*n._m_Y+t._m_Z*n._m_Z),i[15]=1,i}lookAt(t,e,_){return this.m=n.lookAt(t,e,_,this.m),this}inert(){n.invert(this.m,n._S_TEMP_MAT4.m)&&this.set(n._S_TEMP_MAT4)}inertRetNew(t){return n.invert(this.m,n._S_TEMP_MAT4.m)?((t=t||new n).set(n._S_TEMP_MAT4),t):null}static invert(t,e){let _=t[0],i=t[1],n=t[2],s=t[3],a=t[4],r=t[5],o=t[6],h=t[7],m=t[8],l=t[9],u=t[10],f=t[11],c=t[12],g=t[13],d=t[14],S=t[15],p=_*r-i*a,C=_*o-n*a,T=_*h-s*a,E=i*o-n*r,D=i*h-s*r,P=n*h-s*o,M=m*g-l*c,x=m*d-u*c,A=m*S-f*c,L=l*d-u*g,R=l*S-f*g,I=u*S-f*d,v=p*I-C*R+T*L+E*A-D*x+P*M;return v?(v=1/v,e[0]=(r*I-o*R+h*L)*v,e[1]=(n*R-i*I-s*L)*v,e[2]=(g*P-d*D+S*E)*v,e[3]=(u*D-l*P-f*E)*v,e[4]=(o*A-a*I-h*x)*v,e[5]=(_*I-n*A+s*x)*v,e[6]=(d*T-c*P-S*C)*v,e[7]=(m*P-u*T+f*C)*v,e[8]=(a*R-r*A+h*M)*v,e[9]=(i*A-_*R-s*M)*v,e[10]=(c*D-g*T+S*p)*v,e[11]=(l*T-m*D-f*p)*v,e[12]=(r*x-a*L-o*M)*v,e[13]=(_*L-i*x+n*M)*v,e[14]=(g*C-c*E-d*p)*v,e[15]=(m*E-l*C+u*p)*v,e):null}set(t){for(let e=0;e<16;e++)this.m[e]=t.m[e]}setRC(t,e,_){this.m[4*t+e]=_}setArray(t){for(let e=0;e<16;e++)this.m[e]=t[e]}setArrayTranspose(t){for(let e=0,_=0;e<4;e++)for(let i=0;i<4;i++)this.m[_++]=t[4*i+e]}keepRotation(){this.m[12]=this.m[13]=this.m[14]=0,this.m[15]=1}transpose(){let t=[];for(let e=0;e<this.m.length;e++)t[e]=this.m[e];for(let e=0,_=0;e<4;e++)for(let i=0;i<4;i++)this.m[_++]=t[4*i+e]}absLocal(){for(let t=0;t<16;t++)this.m[t]=Math.abs(this.m[t])}static parallelM(t,e,_,i,n,s,a,r){t[e+0]=2/(1*i-_),t[e+5]=2/(1*n-s),t[e+10]=-2/(1*r-a),t[e+15]=1,t[e+12]=-(i+_)/(1*i-_),t[e+13]=-(n+s)/(1*n-s),t[e+14]=-(r+a)/(1*r-a)}static perspectiveM(t,e,_,i,n,s){let a=1/Math.tan(_*(Math.PI/360)),r=1/(n-s);t[e+0]=a/i,t[e+1]=0,t[e+2]=0,t[e+3]=0,t[e+4]=0,t[e+5]=a,t[e+6]=0,t[e+7]=0,t[e+8]=0,t[e+9]=0,t[e+10]=(s+n)*r,t[e+11]=-1,t[e+12]=0,t[e+13]=0,t[e+14]=2*s*n*r,t[e+15]=0}static multiplyMM(t,e,_,i,n,s){t.m[e+0]=n.m[0]*_.m[0]+n.m[1]*_.m[4]+n.m[2]*_.m[8]+n.m[3]*_.m[12],t.m[e+1]=n.m[0]*_.m[1]+n.m[1]*_.m[5]+n.m[2]*_.m[9]+n.m[3]*_.m[13],t.m[e+2]=n.m[0]*_.m[2]+n.m[1]*_.m[6]+n.m[2]*_.m[10]+n.m[3]*_.m[14],t.m[e+3]=n.m[0]*_.m[3]+n.m[1]*_.m[7]+n.m[2]*_.m[11]+n.m[3]*_.m[15],t.m[e+4]=n.m[4]*_.m[0]+n.m[5]*_.m[4]+n.m[6]*_.m[8]+n.m[7]*_.m[12],t.m[e+5]=n.m[4]*_.m[1]+n.m[5]*_.m[5]+n.m[6]*_.m[9]+n.m[7]*_.m[13],t.m[e+6]=n.m[4]*_.m[2]+n.m[5]*_.m[6]+n.m[6]*_.m[10]+n.m[7]*_.m[14],t.m[e+7]=n.m[4]*_.m[3]+n.m[5]*_.m[7]+n.m[6]*_.m[11]+n.m[7]*_.m[15],t.m[e+8]=n.m[8]*_.m[0]+n.m[9]*_.m[4]+n.m[10]*_.m[8]+n.m[11]*_.m[12],t.m[e+9]=n.m[8]*_.m[1]+n.m[9]*_.m[5]+n.m[10]*_.m[9]+n.m[11]*_.m[13],t.m[e+10]=n.m[8]*_.m[2]+n.m[9]*_.m[6]+n.m[10]*_.m[10]+n.m[11]*_.m[14],t.m[e+11]=n.m[8]*_.m[3]+n.m[9]*_.m[7]+n.m[10]*_.m[11]+n.m[11]*_.m[15],t.m[e+12]=n.m[12]*_.m[0]+n.m[13]*_.m[4]+n.m[14]*_.m[8]+n.m[15]*_.m[12],t.m[e+13]=n.m[12]*_.m[1]+n.m[13]*_.m[5]+n.m[14]*_.m[9]+n.m[15]*_.m[13],t.m[e+14]=n.m[12]*_.m[2]+n.m[13]*_.m[6]+n.m[14]*_.m[10]+n.m[15]*_.m[14],t.m[e+15]=n.m[12]*_.m[3]+n.m[13]*_.m[7]+n.m[14]*_.m[11]+n.m[15]*_.m[15]}static multiplyMV(t,e,_){t._m_X=e._m_X*_.m[0]+e._m_Y*_.m[4]+e._m_Z*_.m[8]+e._m_W*_.m[12],t._m_Y=e._m_X*_.m[1]+e._m_Y*_.m[5]+e._m_Z*_.m[9]+e._m_W*_.m[13],t._m_Z=e._m_X*_.m[2]+e._m_Y*_.m[6]+e._m_Z*_.m[10]+e._m_W*_.m[14],t._m_W=e._m_X*_.m[3]+e._m_Y*_.m[7]+e._m_Z*_.m[11]+e._m_W*_.m[15]}static multiplyMV3(t,e,_){return t._m_X=e._m_X*_.m[0]+e._m_Y*_.m[4]+e._m_Z*_.m[8]+_.m[12],t._m_Y=e._m_X*_.m[1]+e._m_Y*_.m[5]+e._m_Z*_.m[9]+_.m[13],t._m_Z=e._m_X*_.m[2]+e._m_Y*_.m[6]+e._m_Z*_.m[10]+_.m[14],e._m_X*_.m[3]+e._m_Y*_.m[7]+e._m_Z*_.m[11]+_.m[15]}static multiplyMV3In3x3(t,e,_){t._m_X=e._m_X*_.m[0]+e._m_Y*_.m[4]+e._m_Z*_.m[8],t._m_Y=e._m_X*_.m[1]+e._m_Y*_.m[5]+e._m_Z*_.m[9],t._m_Z=e._m_X*_.m[2]+e._m_Y*_.m[6]+e._m_Z*_.m[10]}static composeMat4(t,e,_,i){return n.fromQuaternion(e,i),i.scale(_._m_X,_._m_Y,_._m_Z),i.translate(t._m_X,t._m_Y,t._m_Z),i}static decomposeMat4(t,e,_,i){n._S_TEMP_VEC3.setToInXYZ(t.m[0],t.m[1],t.m[2]);let s=n._S_TEMP_VEC3.length();n._S_TEMP_VEC3.setToInXYZ(t.m[4],t.m[5],t.m[6]);let a=n._S_TEMP_VEC3.length();n._S_TEMP_VEC3.setToInXYZ(t.m[8],t.m[9],t.m[10]);let r=n._S_TEMP_VEC3.length();n.determinantMat4(t)<0&&(s=-s),e.setToInXYZ(t.m[12],t.m[13],t.m[14]),n._S_TEMP_MAT4.set(t);const o=1/s,h=1/a,m=1/r;n._S_TEMP_MAT4.m[0]*=o,n._S_TEMP_MAT4.m[1]*=o,n._S_TEMP_MAT4.m[2]*=o,n._S_TEMP_MAT4.m[4]*=h,n._S_TEMP_MAT4.m[5]*=h,n._S_TEMP_MAT4.m[6]*=h,n._S_TEMP_MAT4.m[8]*=m,n._S_TEMP_MAT4.m[9]*=m,n._S_TEMP_MAT4.m[10]*=m,_.fromMat44(n._S_TEMP_MAT4),i.setToInXYZ(s,a,r)}static determinantMat4(t){const e=t.m[0],_=t.m[1],i=t.m[2],n=t.m[3],s=t.m[4],a=t.m[5],r=t.m[6],o=t.m[7],h=t.m[8],m=t.m[9],l=t.m[10],u=t.m[11],f=t.m[12],c=t.m[13],g=t.m[14],d=t.m[15];return f*m*r*n-h*c*r*n-f*a*l*n+s*c*l*n+h*a*g*n-s*m*g*n-f*m*i*o+h*c*i*o+f*_*l*o-e*c*l*o-h*_*g*o+e*m*g*o+f*a*i*u-s*c*i*u-f*_*r*u+e*c*r*u+s*_*g*u-e*a*g*u-h*a*i*d+s*m*i*d+h*_*r*d-e*m*r*d-s*_*l*d+e*a*l*d}static fromQuaternion(t,e){const _=t._m_X,i=t._m_Y,n=t._m_Z,s=t._m_W,a=_+_,r=i+i,o=n+n,h=_*a,m=_*r,l=_*o,u=i*r,f=i*o,c=n*o,g=s*a,d=s*r,S=s*o;return e.m[0]=1-(u+c),e.m[4]=m-S,e.m[8]=l+d,e.m[1]=m+S,e.m[5]=1-(h+c),e.m[9]=f-g,e.m[2]=l-d,e.m[6]=f+g,e.m[10]=1-(h+u),e.m[3]=0,e.m[7]=0,e.m[11]=0,e.m[12]=0,e.m[13]=0,e.m[14]=0,e.m[15]=1,e}perspectiveM(t,e,_,i){return n.perspectiveM(this.m,0,t,e,_,i),this}parallelM(t,e,_,i,s,a){return this.identity(),n.parallelM(this.m,0,t,e,_,i,s,a),this}fromAxis(t,e,_){this.setArray([t._m_X,t._m_Y,t._m_Z,0,e._m_X,e._m_Y,e._m_Z,0,_._m_X,_._m_Y,_._m_Z,0,0,0,0,1])}getData(){return this.m}getBufferData(){return this.bufferData.set(this.m),this.bufferData}toString(){return"["+this.m[0]+","+this.m[1]+","+this.m[2]+","+this.m[3]+",\n"+this.m[4]+","+this.m[5]+","+this.m[6]+","+this.m[7]+",\n"+this.m[8]+","+this.m[9]+","+this.m[10]+","+this.m[11]+",\n"+this.m[12]+","+this.m[13]+","+this.m[14]+","+this.m[15]+"]"}}},7014:(t,e,_)=>{_.d(e,{Z:()=>n}),Math.PI,Math.PI;const i=1/Math.PI;class n{static S_HALF_PI=.5*Math.PI;static S_DEG_TO_RAD=.0174532925;static S_RAD_TO_DEG=57.295779513;static S_TWO_PI=2*Math.PI;constructor(){}static toRadians(t){return.005555555555555556*t*Math.PI}static toAngle(t){return 180*t*i}static interpolateLinear(t,e,_){return e==_||t<=0?e:t>=1?_:(1-t)*e+t*_}static interpolateLinearVec3(t,e,_){return e==_||t<=0?e:t>=1?_:(e.multLength(1-t),e.add(_.mulReturn(t)),e)}static random(t,e){return t>e&&(t=e),Math.random()*(e-t)+t}}},73:(t,e,_)=>{_.d(e,{Z:()=>n});var i=_(3792);class n{static S_SIDE_POSITIVE=1;static S_SIDE_NEGATIVE=n.S_SIDE_POSITIVE<<1;static S_SIDE_NONE=n.S_SIDE_POSITIVE<<2;constructor(){this._m_Normal=new i.Z,this._m_D=0}setD(t){this._m_D=t}getD(){return this._m_D}setNormal(t){this._m_Normal.setTo(t),this._m_Normal.normal()}setNormaXYZ(t,e,_){this._m_Normal.setToInXYZ(t,e,_),this._m_Normal.normal()}getNormal(){return this._m_Normal}distance(t){return this._m_Normal.dot(t)-this._m_D}}},6834:(t,e,_)=>{_.d(e,{Z:()=>s});var i=_(7014),n=_(1441);class s{static _S_TEMP_QUATERNION=new s;static _S_TEMP_QUATERNION_2=new s;static _S_TEMP_MAT44=new n.Z;constructor(t,e,_,i){this._m_X=t||0,this._m_Y=e||0,this._m_Z=_||0,this._m_W=i||0}setTo(t){this._m_X=t._m_X,this._m_Y=t._m_Y,this._m_Z=t._m_Z,this._m_W=t._m_W}setToInXYZW(t,e,_,i){this._m_X=t||0,this._m_Y=e||0,this._m_Z=_||0,this._m_W=i||0}toAngles(t){t=t||new Array(3);let e=this._m_W*this._m_W,_=this._m_X*this._m_X,n=this._m_Y*this._m_Y,s=this._m_Z*this._m_Z,a=_+n+s+e,r=this._m_X*this._m_Y+this._m_Z*this._m_W;return r>.499*a?(t[1]=2*Math.atan2(this._m_X,this._m_W),t[2]=i.Z.S_HALF_PI,t[0]=0):r<-.499*a?(t[1]=-2*Math.atan2(this._m_X,this._m_W),t[2]=-i.Z.S_HALF_PI,t[0]=0):(t[1]=Math.atan2(2*this._m_Y*this._m_W-2*this._m_X*this._m_Z,_-n-s+e),t[2]=Math.asin(2*r/a),t[0]=Math.atan2(2*this._m_X*this._m_W-2*this._m_Y*this._m_Z,-_+n-s+e)),t}fromAxis(t,e,_){s._S_TEMP_MAT44.setArray([t._m_X,t._m_Y,t._m_Z,0,e._m_X,e._m_Y,e._m_Z,0,_._m_X,_._m_Y,_._m_Z,0,0,0,0,1]),this.fromMat44(s._S_TEMP_MAT44)}fromEuler(t,e,_){let i=-1;i=.5*t;let n=Math.cos(i),s=Math.sin(i);i=.5*e;let a=Math.cos(i),r=Math.sin(i);i=.5*_;let o=Math.cos(i),h=Math.sin(i),m=a*o,l=r*h,u=a*h,f=r*o;this._m_X=m*s+l*n,this._m_Y=f*n+u*s,this._m_Z=u*n-f*s,this._m_W=m*n-l*s}fromMat44(t){const e=t.m[0],_=t.m[4],i=t.m[8],n=t.m[1],s=t.m[5],a=t.m[9],r=t.m[2],o=t.m[6],h=t.m[10];let m;const l=e+s+h;l>0?(m=.5/Math.sqrt(l+1),this._m_W=.25/m,this._m_X=(o-a)*m,this._m_Y=(i-r)*m,this._m_Z=(n-_)*m):e>s&&e>h?(m=2*Math.sqrt(1+e-s-h),this._m_W=(o-a)/m,this._m_X=.25*m,this._m_Y=(_+n)/m,this._m_Z=(i+r)/m):s>h?(m=2*Math.sqrt(1+s-e-h),this._m_W=(i-r)/m,this._m_X=(_+n)/m,this._m_Y=.25*m,this._m_Z=(a+o)/m):(m=2*Math.sqrt(1+h-e-s),this._m_W=(n-_)/m,this._m_X=(i+r)/m,this._m_Y=(a+o)/m,this._m_Z=.25*m)}norm(){let t=this._m_X,e=this._m_Y,_=this._m_Z,i=this._m_W;return i*i+t*t+e*e+_*_}inverse(){let t=this.norm();if(t>0){let e=1/t,_=this._m_X,i=this._m_Y,n=this._m_Z,a=this._m_W;return new s(-_*e,-i*e,-n*e,a*e)}return null}mult(t,e){e||(e=new s);let _=t._m_W,i=t._m_X,n=t._m_Y,a=t._m_Z,r=this._m_X,o=this._m_Y,h=this._m_Z,m=this._m_W;return e._m_X=r*_+o*a-h*n+m*i,e._m_Y=-r*a+o*_+h*i+m*n,e._m_Z=r*n-o*i+h*_+m*a,e._m_W=-r*i-o*n-h*a+m*_,e}multVec3(t,e){e=e||t;let _=t._m_X,i=t._m_Y,n=t._m_Z,s=this._m_X,a=this._m_Y,r=this._m_Z,o=this._m_W;return e._m_X=o*o*_+2*a*o*n-2*r*o*i+s*s*_+2*a*s*i+2*r*s*n-r*r*_-a*a*_,e._m_Y=2*s*a*_+a*a*i+2*r*a*n+2*o*r*_-r*r*i+o*o*i-2*s*o*n-s*s*i,e._m_Z=2*s*r*_+2*a*r*i+r*r*n-2*o*a*_-a*a*n+2*o*s*i-s*s*n+o*o*n,e}slerp(t,e,_){return s.slerp(this,t,e,_)}static slerp(t,e,_,i){let n,a,r=t._m_W*e._m_W+t._m_X*e._m_X+t._m_Y*e._m_Y+t._m_Z*e._m_Z,o=null;if(r<0?(o=s._S_TEMP_QUATERNION,o._m_W=-t._m_W,o._m_X=-t._m_X,o._m_Y=-t._m_Y,o._m_Z=-t._m_Z,r=-r):o=t,r>.9995)n=1-_,a=_;else{let t=Math.acos(r),e=Math.sin(t);n=Math.sin((1-_)*t)/e,a=Math.sin(_*t)/e}return(i=i||s._S_TEMP_QUATERNION_2)._m_W=o._m_W*n+e._m_W*a,i._m_X=o._m_X*n+e._m_X*a,i._m_Y=o._m_Y*n+e._m_Y*a,i._m_Z=o._m_Z*n+e._m_Z*a,i}static slerp2(t,e,_,i){if(i=i||s._S_TEMP_QUATERNION_2,0===_)return i.setTo(t),i;if(1===_)return i.setTo(e),i;const n=t._m_X,a=t._m_Y,r=t._m_Z,o=t._m_W;let h=o*e._m_W+n*e._m_X+a*e._m_Y+r*e._m_Z,m=null;if(h<0?(m=s._S_TEMP_QUATERNION,m._m_W=-e._m_W,m._m_X=-e._m_X,m._m_Y=-e._m_Y,m._m_Z=-e._m_Z,h=-h):m=e,h>=1)return i._m_W=o,i._m_X=n,i._m_Y=a,i._m_Z=r,i;const l=1-h*h;if(l<=Number.EPSILON){const t=1-_;return i._m_W=t*o+_*m._m_W,i._m_X=t*n+_*m._m_X,i._m_Y=t*a+_*m._m_Y,i._m_Z=t*r+_*m._m_Z,i.normal(),i}const u=Math.sqrt(l),f=Math.atan2(u,h),c=Math.sin((1-_)*f)/u,g=Math.sin(_*f)/u;return i._m_W=o*c+m._m_W*g,i._m_X=n*c+m._m_X*g,i._m_Y=a*c+m._m_Y*g,i._m_Z=r*c+m._m_Z*g,i}normal(){let t=this.length();return t?(t=1/t,this._m_X*=t,this._m_Y*=t,this._m_Z*=t,this._m_W*=t):console.error("Vector3.normal异常,长度为0。"),this}length(){let t=this._m_X*this._m_X+this._m_Y*this._m_Y+this._m_Z*this._m_Z+this._m_W*this._m_W;return t=Math.sqrt(t),t}inter(t,e,_){return s.inter(this,t,e,_)}static inter(t,e,_,i){let n=1-_;return(i=i||s._S_TEMP_QUATERNION)._m_X=t._m_X*n+e._m_X*_,i._m_Y=t._m_Y*n+e._m_Y*_,i._m_Z=t._m_Z*n+e._m_Z*_,i._m_W=t._m_W*n+e._m_W*_,i}toString(){return"["+this._m_X+","+this._m_Y+","+this._m_Z+","+this._m_W+"]"}}},1082:(t,e,_)=>{_.d(e,{Z:()=>i});class i{constructor(t,e){this._m_X=t||0,this._m_Y=e||0,this.bufferData=new Float32Array(2)}getBufferData(){return this.bufferData.set([this._m_X,this._m_Y]),this.bufferData}setTo(t){this._m_X=t._m_X,this._m_Y=t._m_Y}setToInXY(t,e){this._m_X=t||0,this._m_Y=e||0}dot(t){return this._m_X*t._m_X+this._m_Y*t._m_Y}cross(t,e){if(e)return e._m_X=this._m_Y*t._m_Z-this._m_Z*t._m_Y,e._m_Y=this._m_Z*t._m_X-this._m_X*t._m_Z,e;{let e=this._m_Y*t._m_Z-this._m_Z*t._m_Y,_=this._m_Z*t._m_X-this._m_X*t._m_Z;return this._m_X=e,this._m_Y=_,this}}crossRetNew(t){let e=new i(0,0);return this.cross(t,e)}divide(t,e){return e?(e._m_X=this._m_X/t._m_X,e._m_Y=this._m_Y/t._m_Y,e):(this._m_X/=t._m_X,this._m_Y/=t._m_Y,this)}divideRetNew(t){let e=new i(0,0);return this.divide(t,e)}mult(t,e){return e?(e._m_X=this._m_X*t._m_X,e._m_Y=this._m_Y*t._m_Y,e):(this._m_X*=t._m_X,this._m_Y*=t._m_Y,this)}multRetNew(t){let e=new i(0,0);return this.mult(t,e)}sub(t,e){return e?(e._m_X=this._m_X-t._m_X,e._m_Y=this._m_Y-t._m_Y,e):(this._m_X-=t._m_X,this._m_Y-=t._m_Y,this)}subRetNew(t){let e=new i(0,0);return this.sub(t,e)}add(t,e){return e?(e._m_X=this._m_X+t._m_X,e._m_Y=this._m_Y+t._m_Y,e):(this._m_X+=t._m_X,this._m_Y+=t._m_Y,this)}addRetNew(t){let e=new i(0,0);return this.add(t,e)}multLength(t,e){return e?(e._m_X=this._m_X*t,e._m_Y=this._m_Y*t,e):(this._m_X*=t,this._m_Y*=t,this)}normal(){let t=this.length();return t?(t=1/t,this._m_X*=t,this._m_Y*=t):console.error("Vector3.normal异常,长度为0。"),this}length(){let t=this._m_X*this._m_X+this._m_Y*this._m_Y;return t=Math.sqrt(t),t}toString(){return"["+this._m_X+","+this._m_Y+"]"}}},3792:(t,e,_)=>{_.d(e,{Z:()=>i});class i{static _S_TEMP_VEC3=new i;static S_UNIT_AXIS_X=new i(1,0,0);static S_UNIT_AXIS_Y=new i(0,1,0);static S_UNIT_AXIS_Z=new i(0,0,1);static S_UNIT_AXIS_NEGATIVE_X=new i(-1,0,0);static S_UNIT_AXIS_NEGATIVE_Y=new i(0,-1,0);static S_UNIT_AXIS_NEGATIVE_Z=new i(0,0,-1);static S_POSITIVE_INFINITY=new i(Number.POSITIVE_INFINITY,Number.POSITIVE_INFINITY,Number.POSITIVE_INFINITY);static S_NEGATIVE_INFINITY=new i(Number.NEGATIVE_INFINITY,Number.NEGATIVE_INFINITY,Number.NEGATIVE_INFINITY);static S_MAX=new i(-Number.MAX_VALUE,-Number.MAX_VALUE,-Number.MAX_VALUE);static S_MIN=new i(Number.MAX_VALUE,Number.MAX_VALUE,Number.MAX_VALUE);constructor(t,e,_){this._m_X=t||0,this._m_Y=e||0,this._m_Z=_||0,this.bufferData=new Float32Array(3)}getBufferData(){return this.bufferData.set([this._m_X,this._m_Y,this._m_Z]),this.bufferData}toArray(){return[this._m_X,this._m_Y,this._m_Z]}setTo(t){return this._m_X=t._m_X,this._m_Y=t._m_Y,this._m_Z=t._m_Z,this}setToInXYZ(t,e,_){return this._m_X=t||0,this._m_Y=e||0,this._m_Z=_||0,this}dot(t){return this._m_X*t._m_X+this._m_Y*t._m_Y+this._m_Z*t._m_Z}min(t,e){return e?(e._m_X=t._m_X<this._m_X?t._m_X:this._m_X,e._m_Y=t._m_Y<this._m_Y?t._m_Y:this._m_Y,e._m_Z=t._m_Z<this._m_Z?t._m_Z:this._m_Z,e):(this._m_X=t._m_X<this._m_X?t._m_X:this._m_X,this._m_Y=t._m_Y<this._m_Y?t._m_Y:this._m_Y,this._m_Z=t._m_Z<this._m_Z?t._m_Z:this._m_Z,this)}max(t,e){return e?(e._m_X=t._m_X>this._m_X?t._m_X:this._m_X,e._m_Y=t._m_Y>this._m_Y?t._m_Y:this._m_Y,e._m_Z=t._m_Z>this._m_Z?t._m_Z:this._m_Z,e):(this._m_X=t._m_X>this._m_X?t._m_X:this._m_X,this._m_Y=t._m_Y>this._m_Y?t._m_Y:this._m_Y,this._m_Z=t._m_Z>this._m_Z?t._m_Z:this._m_Z,this)}cross(t,e){if(e)return e._m_X=this._m_Y*t._m_Z-this._m_Z*t._m_Y,e._m_Y=this._m_Z*t._m_X-this._m_X*t._m_Z,e._m_Z=this._m_X*t._m_Y-this._m_Y*t._m_X,e;{let e=this._m_Y*t._m_Z-this._m_Z*t._m_Y,_=this._m_Z*t._m_X-this._m_X*t._m_Z,i=this._m_X*t._m_Y-this._m_Y*t._m_X;return this._m_X=e,this._m_Y=_,this._m_Z=i,this}}crossRetNew(t){let e=new i(0,0,0);return this.cross(t,e)}distance(t){return Math.sqrt(this.distanceSq(t))}distanceSq(t){let e=this._m_X-t._m_X,_=this._m_Y-t._m_Y,i=this._m_Z-t._m_Z;return e*e+_*_+i*i}divide(t,e){return e?(e._m_X=this._m_X/t._m_X,e._m_Y=this._m_Y/t._m_Y,e._m_Z=this._m_Z/t._m_Z,e):(this._m_X/=t._m_X,this._m_Y/=t._m_Y,this._m_Z/=t._m_Z,this)}divideInXYZ(t,e,_,i){return i?(i._m_X=this._m_X/t,i._m_Y=this._m_Y/e,i._m_Z=this._m_Z/_,i):(this._m_X/=t,this._m_Y/=e,this._m_Z/=_,this)}divideRetNew(t){let e=new i(0,0,0);return this.divide(t,e)}divideRetNewInXYZ(t,e,_){let n=new i(0,0,0);return this.divideInXYZ(t,e,_,n)}mult(t,e){return e?(e._m_X=this._m_X*t._m_X,e._m_Y=this._m_Y*t._m_Y,e._m_Z=this._m_Z*t._m_Z,e):(this._m_X*=t._m_X,this._m_Y*=t._m_Y,this._m_Z*=t._m_Z,this)}multInXYZ(t,e,_,i){return i?(i._m_X=this._m_X*t,i._m_Y=this._m_Y*e,i._m_Z=this._m_Z*_,i):(this._m_X*=t,this._m_Y*=e,this._m_Z*=_,this)}multRetNew(t){let e=new i(0,0,0);return this.mult(t,e)}multRetNewInXYZ(t,e,_){let n=new i(0,0,0);return this.multInXYZ(t,e,_,n)}sub(t,e){return e?(e._m_X=this._m_X-t._m_X,e._m_Y=this._m_Y-t._m_Y,e._m_Z=this._m_Z-t._m_Z,e):(this._m_X-=t._m_X,this._m_Y-=t._m_Y,this._m_Z-=t._m_Z,this)}subInXYZ(t,e,_,i){return i?(i._m_X=this._m_X-t,i._m_Y=this._m_Y-e,i._m_Z=this._m_Z-_,i):(this._m_X-=t,this._m_Y-=e,this._m_Z-=_,this)}subRetNew(t){let e=new i(0,0,0);return this.sub(t,e)}subRetNewInXYZ(t,e,_){let n=new i(0,0,0);return this.subInXYZ(t,e,_,n)}add(t,e){return e?(e._m_X=this._m_X+t._m_X,e._m_Y=this._m_Y+t._m_Y,e._m_Z=this._m_Z+t._m_Z,e):(this._m_X+=t._m_X,this._m_Y+=t._m_Y,this._m_Z+=t._m_Z,this)}addInXYZ(t,e,_,i){return i?(reslut._m_X=this._m_X+t,reslut._m_Y=this._m_Y+e,reslut._m_Z=this._m_Z+_,reslut):(this._m_X+=t,this._m_Y+=e,this._m_Z+=_,this)}addRetNew(t){let e=new i(0,0,0);return this.add(t,e)}addRetNewInXYZ(t,e,_){let n=new i(0,0,0);return this.addInXYZ(t,e,_,n)}multLength(t,e){return e?(e._m_X=this._m_X*t,e._m_Y=this._m_Y*t,e._m_Z=this._m_Z*t,e):(this._m_X*=t,this._m_Y*=t,this._m_Z*=t,this)}normal(){let t=this.length();return t?(t=1/t,this._m_X*=t,this._m_Y*=t,this._m_Z*=t):this._m_X=this._m_Y=this._m_Z=0,this}negate(){return new i(-this._m_X,-this._m_Y,-this._m_Z)}negateLocal(){return this._m_X=-this._m_X,this._m_Y=-this._m_Y,this._m_Z=-this._m_Z,this}length(){let t=this._m_X*this._m_X+this._m_Y*this._m_Y+this._m_Z*this._m_Z;return t=Math.sqrt(t),t}toString(){return"["+this._m_X+","+this._m_Y+","+this._m_Z+"]"}inter(t,e,_){return i.inter(this,t,e,_)}equals(t){return t==this||null!=t&&this._m_X==t._m_X&&this._m_Y==t._m_Y&&this._m_Z==t._m_Z}static inter(t,e,_,n){let s=1-_;return(n=n||i._S_TEMP_VEC3)._m_X=t._m_X*s+e._m_X*_,n._m_Y=t._m_Y*s+e._m_Y*_,n._m_Z=t._m_Z*s+e._m_Z*_,n}}},9692:(t,e,_)=>{_.d(e,{Z:()=>i});class i{static _S_TEMP_VEC4=new i;constructor(t,e,_,i){this._m_X=t||0,this._m_Y=e||0,this._m_Z=_||0,this._m_W=null!=i&&null!=i?i:1,this.bufferData=new Float32Array(4)}getBufferData(){return this.bufferData.set([this._m_X,this._m_Y,this._m_Z,this._m_W]),this.bufferData}setTo(t){return this._m_X=t._m_X,this._m_Y=t._m_Y,this._m_Z=t._m_Z,this._m_W=t._m_W,this}setToInXYZW(t,e,_,i){return this._m_X=t||0,this._m_Y=e||0,this._m_Z=_||0,this._m_W=null!=i&&null!=i?i:1,this}dot(t){return this._m_X*t._m_X+this._m_Y*t._m_Y+this._m_Z*t._m_Z+this._m_W*t._m_W}cross(t,e){if(e)return e._m_X=this._m_Y*t._m_Z-this._m_Z*t._m_Y,e._m_Y=this._m_Z*t._m_X-this._m_X*t._m_Z,e._m_Z=this._m_X*t._m_Y-this._m_Y*t._m_X,e;{let e=this._m_Y*t._m_Z-this._m_Z*t._m_Y,_=this._m_Z*t._m_X-this._m_X*t._m_Z,i=this._m_X*t._m_Y-this._m_Y*t._m_X;return this._m_X=e,this._m_Y=_,this._m_Z=i,this}}crossRetNew(t){let e=new i(0,0,0,1);return this.cross(t,e)}divide(t,e){return e?(e._m_X=this._m_X/t._m_X,e._m_Y=this._m_Y/t._m_Y,e._m_Z=this._m_Z/t._m_Z,e._m_W=this._m_W/t._m_W,e):(this._m_X/=t._m_X,this._m_Y/=t._m_Y,this._m_Z/=t._m_Z,this._m_W/=t._m_W,this)}divideRetNew(t){let e=new i(0,0,0,1);return this.divide(t,e)}mult(t,e){return e?(e._m_X=this._m_X*t._m_X,e._m_Y=this._m_Y*t._m_Y,e._m_Z=this._m_Z*t._m_Z,e._m_W=this._m_W*t._m_W,e):(this._m_X*=t._m_X,this._m_Y*=t._m_Y,this._m_Z*=t._m_Z,this._m_W*=t._m_W,this)}multRetNew(t){let e=new i(0,0,0,1);return this.mult(t,e)}sub(t,e){return e?(e._m_X=this._m_X-t._m_X,e._m_Y=this._m_Y-t._m_Y,e._m_Z=this._m_Z-t._m_Z,e):(this._m_X-=t._m_X,this._m_Y-=t._m_Y,this._m_Z-=t._m_Z,this)}subRetNew(t){let e=new i(0,0,0,1);return this.sub(t,e)}add(t,e){return e?(e._m_X=this._m_X+t._m_X,e._m_Y=this._m_Y+t._m_Y,e._m_Z=this._m_Z+t._m_Z,e):(this._m_X+=t._m_X,this._m_Y+=t._m_Y,this._m_Z+=t._m_Z,this)}addRetNew(t){let e=new i(0,0,0,1);return this.add(t,e)}multLength(t,e){return e?(e._m_X=this._m_X*t,e._m_Y=this._m_Y*t,e._m_Z=this._m_Z*t,e):(this._m_X*=t,this._m_Y*=t,this._m_Z*=t,this)}normal(){let t=this.length();return t?(t=1/t,this._m_X*=t,this._m_Y*=t,this._m_Z*=t):console.error("Vector3.normal异常,长度为0。"),this}distanceSq(t){let e=this._m_X-t._m_X,_=this._m_Y-t._m_Y,i=this._m_Z-t._m_Z;return e*e+_*_+i*i}distance(t){return Math.sqrt(this.distanceSq(t))}length(){let t=this._m_X*this._m_X+this._m_Y*this._m_Y+this._m_Z*this._m_Z;return t=Math.sqrt(t),t}toString(){return"["+this._m_X+","+this._m_Y+","+this._m_Z+","+this._m_W+"]"}inter(t,e,_){return i.inter(this,t,e,_)}static inter(t,e,_,n){let s=1-_;return(n=n||i._S_TEMP_VEC4)._m_X=t._m_X*s+e._m_X*_,n._m_Y=t._m_Y*s+e._m_Y*_,n._m_Z=t._m_Z*s+e._m_Z*_,n._m_W=1,n}}},3448:(t,e,_)=>{_.d(e,{Z:()=>n});var i=_(4963);class n extends i.Z{getType(){return"FramePicture"}constructor(t,e){super(t,e)}isFramePicture(){return!0}}},3121:(t,e,_)=>{_.d(e,{Z:()=>h});var i=_(2245),n=_(9085),s=_(1331),a=_(1441),r=_(5657),o=_(6153);_(8803);class h extends i.Z{getType(){return"Geometry"}constructor(t,e){super(t,e),this._m_Mesh=null,this._m_ModelAABBBoundingBox=null,this._m_Material=null,this._m_IsDrawable=!0,this._m_Opaque=!0}lod(t){this._m_CurrentLod!=t&&(this._m_CurrentLod=t,null!=this._m_Mesh&&this._m_Mesh.lod(this._m_CurrentLod))}setMaterial(t){this._m_Material=t,this._m_Mesh&&this._refreshBufLocal()}getMaterial(){return this._m_Material}setMesh(t){this._m_Mesh=t,this._m_Material&&this._refreshBufLocal()}getMesh(){return this._m_Mesh}updateBound(){this._m_Mesh&&(this._m_Mesh._updateBound(this._m_Scene.getCanvas().getGLContext()),this._m_ModelAABBBoundingBox||(this._m_ModelAABBBoundingBox=new o.Z,this._m_ModelAABBBoundingBox.fromPositions(this._m_Mesh.getData(s.Z.S_POSITIONS)),this._m_BoudingVolume||(this._m_BoudingVolume=new o.Z),this._m_BoudingVolume.setTo(this._m_ModelAABBBoundingBox)),this._m_Mesh.lod(this._m_CurrentLod))}getBoundingVolume(){return this._m_UpdateBoundingVolume&&(a.Z.decomposeMat4(this.getWorldMatrix(),i.Z.S_TEMP_VEC3,i.Z.S_TEMP_Q,i.Z.S_TEMP_VEC3_2),this._m_ModelAABBBoundingBox.transform(i.Z.S_TEMP_VEC3_2,i.Z.S_TEMP_Q,i.Z.S_TEMP_VEC3,this._m_BoudingVolume),this._m_UpdateBoundingVolume=!1),this._m_BoudingVolume}_refreshBufLocal(){}isDrawable(){return this._m_IsDrawable}setIsDrawable(t){this._m_IsDrawable=t}isFramePicture(){return!1}setOpaque(){this._m_Opaque=!0}isOpaque(){return this._m_Opaque}setTranslucent(){this._m_Opaque=!1}isTranslucent(){return!this._m_Opaque}isSky(){}isGUI(){}draw(t){let e=this._m_Scene.getCanvas().getGLContext(),_=t.m_LastSubShader.getContextVars(),i=null,s=null;for(let o in _)switch(o){case n.Z.S_MODEL_MATRIX_SRC:e[_[o].fun](_[o].loc,!1,this.getWorldMatrix().getBufferData());break;case n.Z.S_MV_SRC:i=t.getCalcContext(n.Z.S_VIEW_MATRIX_SRC),a.Z.multiplyMM(r.Z.S_TEMP_MAT4,0,i,0,this.getWorldMatrix(),0),_[o].fun(_[o].loc,!1,r.Z.S_TEMP_MAT4.getBufferData());break;case n.Z.S_MVP_SRC:i=t.getCalcContext(n.Z.S_VIEW_MATRIX_SRC),s=t.getCalcContext(n.Z.S_PROJECT_MATRIX_SRC),a.Z.multiplyMM(r.Z.S_TEMP_MAT4,0,i,0,this.getWorldMatrix(),0),a.Z.multiplyMM(r.Z.S_TEMP_MAT4_1,0,s,0,i,0),e[_[o].fun](_[o].loc,!1,r.Z.S_TEMP_MAT4_1.getBufferData())}this._m_Mesh.draw(e)}}},2245:(t,e,_)=>{_.d(e,{Z:()=>l});var i=_(3815),n=_(1441),s=_(3792),a=_(6834),r=_(6153),o=_(4607),h=_(9881),m=_(8803);class l extends i.Z{static S_DEFAULT_FRUSTUM_CULLING=2;static S_DYNAMIC=4;static S_ALWAYS=8;static S_NEVER=16;static S_SHADOW_RECEIVE=2;static S_SHADOW_CAST=4;static S_SHADOW_CAST_AND_RECEIVE=8;static S_SHADOW_NONE=0;static S_TEMP_VEC3=new s.Z;static S_TEMP_Q=new a.Z;static S_TEMP_VEC3_2=new s.Z;getType(){return"Node"}constructor(t,e){super(t,{id:h.Z.nextId()+e.id}),this._m_Name=e.id,this._m_CurrentLod=0,this._m_LocalMatrix=new n.Z,this._m_WorldMatrix=new n.Z,this._m_Parent=null,this._m_Children=[],this._m_ChildrenIDs={},this._m_LocalScale=new s.Z(1,1,1),this._m_LocalRotation=new a.Z(0,0,0,1),this._m_LocalTranslation=new s.Z,this._m_UpdateLocalMatrix=!1,this._m_UpdateWorldMatrix=!1,this._m_BoudingVolume=null,this._m_UpdateBoundingVolume=!0,this._m_FrustumContain=o.Z.S_FRUSTUM_INTERSECT_INTERSECTS,this._m_CullMode=null,this._m_CullingFlags=1,this._m_CullingFlags|=l.S_DEFAULT_FRUSTUM_CULLING,this._m_FilterFlag=l.S_DYNAMIC,this._m_ShadowMode=1,this._m_ShadowMode|=l.S_SHADOW_CAST_AND_RECEIVE}castShadow(t){!t||0!=(this._m_ShadowMode&l.S_SHADOW_CAST)&&0!=(this._m_ShadowMode&l.S_SHADOW_CAST_AND_RECEIVE)?(0!=(this._m_ShadowMode&l.S_SHADOW_CAST)&&(this._m_ShadowMode^=l.S_SHADOW_CAST),0!=(this._m_ShadowMode&l.S_SHADOW_CAST_AND_RECEIVE)&&(this._m_ShadowMode^=l.S_SHADOW_CAST_AND_RECEIVE,console.log("_m_ShadowMode:"+this._m_ShadowMode),this._m_ShadowMode&0==l.S_SHADOW_RECEIVE&&(this._m_ShadowMode|=l.S_SHADOW_RECEIVE))):this._m_ShadowMode|=l.S_SHADOW_CAST,this._m_Children.forEach((e=>{e.castShadow(t)}))}isCastShadow(){return 0!=(this._m_ShadowMode&l.S_SHADOW_CAST)||0!=(this._m_ShadowMode&l.S_SHADOW_CAST_AND_RECEIVE)}receiveShadow(t){!t||0!=(this._m_ShadowMode&l.S_SHADOW_RECEIVE)&&0!=(this._m_FilterFlag&l.S_SHADOW_CAST_AND_RECEIVE)?(0!=(this._m_ShadowMode&l.S_SHADOW_RECEIVE)&&(this._m_ShadowMode^=l.S_SHADOW_RECEIVE),0!=(this._m_ShadowMode&l.S_SHADOW_CAST_AND_RECEIVE)&&(this._m_ShadowMode^=l.S_SHADOW_CAST_AND_RECEIVE,this._m_ShadowMode&0==l.S_SHADOW_CAST&&(this._m_ShadowMode|=l.S_SHADOW_CAST))):this._m_ShadowMode|=l.S_SHADOW_RECEIVE,this._m_Children.forEach((e=>{e.receiveShadow(t)}))}isReceiveShadow(){return 0!=(this._m_ShadowMode&l.S_SHADOW_RECEIVE)||0!=(this._m_ShadowMode&l.S_SHADOW_CAST_AND_RECEIVE)}isDrawable(){return!1}lod(t){this._m_CurrentLod!=t&&this._m_Children.getChildren().length>0&&this._m_Children.forEach((e=>{e.lod(t)}))}setFilterFlag(t){this._m_FilterFlag=t}getFilterFlag(){return this._m_FilterFlag}getCullingFlags(){return this._m_CullingFlags}clearCullingFlags(t){this._m_CullingFlags^=t}addCullingFlags(t){this._m_CullingFlags|=t}inFrustum(t){return this._m_FrustumContain=null==this._m_Parent?o.Z.S_FRUSTUM_INTERSECT_INTERSECTS:this._m_Parent._m_FrustumContain,this._m_FrustumContain==o.Z.S_FRUSTUM_INTERSECT_INTERSECTS&&(this._m_FrustumContain=t.frustumContains(this.getBoundingVolume())),this._m_FrustumContain!=o.Z.S_FRUSTUM_INTERSECT_OUTSIDE}getBoundingVolume(){if(this._m_UpdateBoundingVolume){if(this._m_Children.length>0){let t=null;this._m_Children.forEach((e=>{t=e.getBoundingVolume(),t&&(this._m_BoudingVolume||(this._m_BoudingVolume=new r.Z),this._m_BoudingVolume.merge(t))}))}this._m_UpdateBoundingVolume=!1}return this._m_BoudingVolume}getChildren(){return this._m_Children}getChildrenAtName(t){let e=this._m_ChildrenIDs[t];if(e)return e;{let _=this._m_Children.length;for(let i=0;i<_;i++)if(e=this._m_Children[i].getChildrenAtName(t),e)return e}return null}getChildrenAtIndex(t){return t>=this._m_Children.length?null:this._m_Children[t]}getParent(){return this._m_Parent}setLocalScale(t){this._m_LocalScale.setTo(t),this._updateLocalMatrix()}setLocalScaleXYZ(t,e,_){this._m_LocalScale.setToInXYZ(t,e,_),this._updateLocalMatrix()}getLocalScale(){return this._m_LocalScale}setLocalRotation(t){this._m_LocalRotation.setTo(t),this._updateLocalMatrix()}setLocalRotationFromAxis(t,e,_){this._m_LocalRotation.fromAxis(t,e,_),this._updateLocalMatrix()}setLocalRotationFromEuler(t,e,_){this._m_LocalRotation.fromEuler(t,e,_),this._updateLocalMatrix()}setLocalRotationFromXYZW(t,e,_,i){this._m_LocalRotation.setToInXYZW(t,e,_,i),this._updateLocalMatrix()}getLocalRotation(){return this._m_LocalRotation}setLocalTranslation(t){this._m_LocalTranslation.setTo(t),this._updateLocalMatrix()}setLocalTranslationXYZ(t,e,_){this._m_LocalTranslation.setToInXYZ(t,e,_),this._updateLocalMatrix()}getLocalTranslation(){return this._m_LocalTranslation}_updateBounding(){this._m_UpdateBoundingVolume=!0}_updateLocalMatrix(){this._m_UpdateLocalMatrix=!0,this._updateWorldMatrix(),this._updateBounding(),null!=this._m_Parent&&this._m_Parent._updateBounding(),this._m_Children.forEach((t=>{t._updateBounding()}))}_updateWorldMatrix(){this._m_UpdateWorldMatrix=!0,this._m_Children.forEach((t=>{t._updateWorldMatrix()}))}getLocalMatrix(){return this._m_UpdateLocalMatrix&&(n.Z.composeMat4(this._m_LocalTranslation,this._m_LocalRotation,this._m_LocalScale,this._m_LocalMatrix),this._m_UpdateLocalMatrix=!1),this._m_LocalMatrix}setLocalMatrix(t){this._m_LocalMatrix.set(t),this._updateLocalMatrix(),this._m_UpdateLocalMatrix=!1,n.Z.decomposeMat4(t,this._m_LocalTranslation,this._m_LocalRotation,this._m_LocalScale)}setLocalMatrixFromArray(t){this._m_LocalMatrix.setArray(t),this._updateLocalMatrix(),this._m_UpdateLocalMatrix=!1,n.Z.decomposeMat4(this._m_LocalMatrix,this._m_LocalTranslation,this._m_LocalRotation,this._m_LocalScale)}getWorldMatrix(){return this._m_UpdateWorldMatrix&&this._buildWorldMatrix(),this._m_WorldMatrix}_buildWorldMatrix(){this._m_UpdateWorldMatrix&&(this.getLocalMatrix(),this._m_Parent?n.Z.multiplyMM(this._m_WorldMatrix,0,this._m_Parent.getWorldMatrix(),0,this._m_LocalMatrix,0):this._m_WorldMatrix.set(this._m_LocalMatrix),this._m_UpdateWorldMatrix=!1)}getName(){return this._m_Name}addChildren(t){if(t instanceof l)if(null!=t._m_Parent||this._m_ChildrenIDs[t.getName()]){let e=t.getName()+h.Z.nextId();m.Z.warn("已存在:"+t.getName()+",重命名为:"+e),t._m_Name=e,null==t._m_Parent?(this._m_ChildrenIDs[t.getName()]=t,this._m_Children.push(t),t._m_Parent=this,t._updateWorldMatrix(),this._updateBounding()):m.Z.warn(e+"已存在与父节点:"+t._m_Parent.getName())}else this._m_ChildrenIDs[t.getName()]=t,this._m_Children.push(t),t._m_Parent=this,t._updateWorldMatrix(),this._updateBounding();else m.Z.error("children不是一个合法的Node!")}removeChildren(t){if(t instanceof l&&this._m_ChildrenIDs[t.getName()]){this._m_ChildrenIDs[t.getName()]=null;let e=this._m_Children.indexOf(t);e>-1&&this._m_Children.splice(e,1),t._m_Parent=null}}traverse(t){t&&t(this),this._m_Children.forEach((e=>{t&&t(e),e.traverse(t)}))}}},4963:(t,e,_)=>{_.d(e,{Z:()=>m});var i=_(3121),n=_(2245),s=_(1331),a=_(9363),r=_(8655),o=_(4771),h=_(9881);class m extends i.Z{getType(){return"Picture"}constructor(t,e){super(t,e),this._m_Width=e.width||1,this._m_Height=e.height||1,this._m_Zindex=1,this._m_Left=0,this._m_Top=0;let _=new s.Z;_.setData(s.Z.S_POSITIONS,[-1,1,1,-1,-1,1,1,1,1,1,-1,1]),_.setData(s.Z.S_UV0,[0,1,0,0,1,1,1,0]),_.setData(s.Z.S_INDICES,[0,1,2,2,1,3]),this.setMesh(_),this.updateBound(),this._m_FilterFlag=n.Z.S_NEVER,this._m_ShadowMode=n.Z.S_SHADOW_NONE}useDefaultMat(){this.setMaterial(new o.Z(this._m_Scene,{id:"picture_gui_"+h.Z.nextId(),materialDef:r.Z.parse(a.Z.S_PICTURE_DEF_DATA)}))}setSize(t,e){this._m_Width==t&&this._m_Height==e||this.setLocalScaleXYZ(t,e,1)}setLeftTop(t,e){this._m_Left==t&&this._m_Top==e||(this._m_Left=t,this._m_Top=e,this.setLocalTranslationXYZ(this._m_Left,this._m_Top,2*this._m_Zindex-1))}setZIndex(t){this._m_Zindex!=t&&(this._m_Zindex=Math.min(Math.max(0,t),1),this._m_Scene.getCanvas().getWidth(),this._m_Scene.getCanvas().getHeight(),this.setLocalTranslationXYZ(this._m_Left,this._m_Top,2*this._m_Zindex-1))}getWidthSize(){return this._m_Width*this._m_Scene.getCanvas().getWidth()}getWidth(){return this._m_Width}getHeightSize(){return this._m_Height*this._m_Scene.getCanvas().getHeight()}getHeight(){return this._m_Height}isDrawable(){return!0}isGUI(){return!0}}},9363:(t,e,_)=>{_.d(e,{Z:()=>i});class i{static S_DOF_FILTER_DEF_DATA="// 景深\nDef DofFilterDef{\n    Params{\n        // 视锥near\n        float vNear;\n        // 视锥far\n        float vFar;\n        // 焦距距离\n        float focusDistance;\n        // 焦距半径\n        float focusRange;\n        // 水平模糊缩放\n        float hScale;\n        // 垂直模糊缩放\n        float vScale;\n    }\n    // 快速景深\n    SubTechnology FastDof{\n        Vars{\n            vec2 wUv0;\n        }\n        Vs_Shader{\n            void main(){\n                Context.OutPosition = vec4(Context.InPosition, 1.0f);\n                wUv0 = Context.InUv0;\n            }\n        }\n        Fs_Shader{\n            // 计算线性深度(后续重构整个材质定义系统后,这些都将封装为内置API)\n            float linearDepth(float depth){\n                #ifdef Params.vFar\n                    float _far = Params.vFar;\n                #else\n                    float _far = 1000.0f;\n                #endif\n                #ifdef Params.vNear\n                    float _near = Params.vNear;\n                #else\n                    float _near = 0.1f;\n                #endif\n                float fn = (_far - _near) * 1.0f;\n                float a = _far / fn;\n                float b = _far * _near / -fn;\n                return b / (depth - a);\n            }\n            void main(){\n                Context.OutColor = texture(Context.InScreen, wUv0);\n                float linearDepth = linearDepth(texture(Context.InDepth, wUv0).r);\n\n                #ifdef Params.focusDistance\n                    float _focusDistance = Params.focusDistance;\n                #else\n                    float _focusDistance = 100.0f;\n                #endif\n                #ifdef Params.focusRange\n                    float _focusRange = Params.focusRange;\n                #else\n                    float _focusRange = 10.0f;\n                #endif\n\n                // 在focusDistance附件,并在focusRange范围内焦距,其他地方进行模糊\n                // 快速景深的优化是:\n                // 在焦距范围内完全焦距(清晰)\n                // 其他部分进行5x5半卷积得到一个快速模糊\n                float status = min(1.0f, abs(linearDepth - _focusDistance) / _focusRange);\n\n                if(status < 0.2f){\n                    return;\n                }\n                else{\n                    // 5x5半卷积\n                    // 1  0  1  0  1\n                    // 0  1  0  1  0\n                    // 1  0  x  0  1\n                    // 0  1  0  1  0\n                    // 1  0  1  0  1\n\n                    vec4 sum = vec4(0.0f);\n\n                    float x = wUv0.x;\n                    float y = wUv0.y;\n\n                    #ifdef Params.hScale\n                        float xScale = hScale * Context.ResolutionInverse.x;\n                    #else\n                        float xScale = 1.0f * Context.ResolutionInverse.x;\n                    #endif\n                    #ifdef Params.vScale\n                        float yScale = vScale * Context.ResolutionInverse.y;\n                    #else\n                        float yScale = 1.0f * Context.ResolutionInverse.y;\n                    #endif\n\n                    // 直接展开而不是循环\n                    sum += texture( Context.InScreen, vec2(x - 2.0f * xScale, y - 2.0f * yScale) );\n                    sum += texture( Context.InScreen, vec2(x - 0.0f * xScale, y - 2.0f * yScale) );\n                    sum += texture( Context.InScreen, vec2(x + 2.0f * xScale, y - 2.0f * yScale) );\n                    sum += texture( Context.InScreen, vec2(x - 1.0f * xScale, y - 1.0f * yScale) );\n                    sum += texture( Context.InScreen, vec2(x + 1.0f * xScale, y - 1.0f * yScale) );\n                    sum += texture( Context.InScreen, vec2(x - 2.0f * xScale, y - 0.0f * yScale) );\n                    sum += texture( Context.InScreen, vec2(x + 2.0f * xScale, y - 0.0f * yScale) );\n                    sum += texture( Context.InScreen, vec2(x - 1.0f * xScale, y + 1.0f * yScale) );\n                    sum += texture( Context.InScreen, vec2(x + 1.0f * xScale, y + 1.0f * yScale) );\n                    sum += texture( Context.InScreen, vec2(x - 2.0f * xScale, y + 2.0f * yScale) );\n                    sum += texture( Context.InScreen, vec2(x - 0.0f * xScale, y + 2.0f * yScale) );\n                    sum += texture( Context.InScreen, vec2(x + 2.0f * xScale, y + 2.0f * yScale) );\n\n                    sum = sum / 12.0f;\n\n                    // 将卷积结果混合到当前颜色中\n                    Context.OutColor = mix(Context.OutColor, sum, status);\n                }\n            }\n        }\n    }\n    Technology{\n        Sub_Pass PostFilter{\n            Pass FastDof{\n            }\n        }\n    }\n}\n";static S_GRAY_FILTER_DEF_DATA="// 灰度过滤\nDef GrayFilterDef{\n    Params{\n        bool useGMat;\n    }\n    SubTechnology GrayFilter{\n        Vars{\n            vec2 uv0;\n        }\n        Vs_Shader{\n            void main(){\n                Context.OutPosition = vec4(Context.InPosition, 1.0f);\n                uv0 = Context.InUv0;\n            }\n        }\n        Fs_Shader{\n            const vec3 W = vec3(0.3f, 0.59f, 0.11f);\n            void main(){\n                #ifdef Params.useGMat\n                    Context.OutColor = vec4(texture(Context.InScreen, uv0).ggg, 1.0f);\n                #else\n                    float gray = dot( texture(Context.InScreen, uv0).rgb, W );\n                    Context.OutColor = vec4(gray, gray, gray, 1.0f);\n                #endif\n            }\n        }\n    }\n    Technology{\n        Sub_Pass PostFilter{\n            Pass GrayFilter{\n            }\n        }\n    }\n}\n";static S_FXAA_FILTER_DEF_DATA="// Fast Approximate Anti-Aliasing (FXAA)\n// 来自https://www.geeks3d.com/20110405/fxaa-fast-approximate-anti-aliasing-demo-glsl-opengl-test-radeon-geforce/3/\nDef FxaaFilterDef{\n    Params{\n        float spanMax;\n        float reduceMul;\n        float subPixelShift;\n    }\n    SubTechnology Fxaa{\n        Vars{\n            vec4 pos;\n            vec2 resolutionInverse;\n        }\n        Vs_Shader{\n            void main(){\n                Context.OutPosition = vec4(Context.InPosition, 1.0f);\n                pos.xy = Context.InUv0;\n                #ifdef Params.subPixelShift\n                    float _subPixelShift = Params.subPixelShift;\n                #else\n                    float _subPixelShift = 1.0f / 4.0f;\n                #endif\n                resolutionInverse = Context.ResolutionInverse;\n                pos.zw = Context.InUv0 - (resolutionInverse * vec2(0.5f + _subPixelShift));\n            }\n        }\n        Fs_Shader{\n            #define FxaaTex(t, p) texture(t, p)\n            #define OffsetVec(a, b) ivec2(a, b)\n            #define FxaaTexOff(t, p, o, r) textureOffset(t, p, o)\n            vec3 FXAA(vec4 posPos,sampler2D tex,vec2 rcpFrame){\n\n                #define FXAA_REDUCE_MIN   (1.0f/128.0f)\n                //#define FXAA_REDUCE_MUL   (1.0/8.0)\n                //#define FXAA_SPAN_MAX     8.0\n\n                vec3 rgbNW = FxaaTex(tex, posPos.zw).xyz;\n                vec3 rgbNE = FxaaTexOff(tex, posPos.zw, OffsetVec(1,0), rcpFrame.xy).xyz;\n                vec3 rgbSW = FxaaTexOff(tex, posPos.zw, OffsetVec(0,1), rcpFrame.xy).xyz;\n                vec3 rgbSE = FxaaTexOff(tex, posPos.zw, OffsetVec(1,1), rcpFrame.xy).xyz;\n\n                vec3 rgbM  = FxaaTex(tex, posPos.xy).xyz;\n\n                vec3 luma = vec3(0.299f, 0.587f, 0.114f);\n                float lumaNW = dot(rgbNW, luma);\n                float lumaNE = dot(rgbNE, luma);\n                float lumaSW = dot(rgbSW, luma);\n                float lumaSE = dot(rgbSE, luma);\n                float lumaM  = dot(rgbM,  luma);\n\n                float lumaMin = min(lumaM, min(min(lumaNW, lumaNE), min(lumaSW, lumaSE)));\n                float lumaMax = max(lumaM, max(max(lumaNW, lumaNE), max(lumaSW, lumaSE)));\n\n                vec2 dir;\n                dir.x = -((lumaNW + lumaNE) - (lumaSW + lumaSE));\n                dir.y =  ((lumaNW + lumaSW) - (lumaNE + lumaSE));\n\n                #ifdef Params.reduceMul\n                    float _reduceMul = Params.reduceMul;\n                #else\n                    float _reduceMul = 1.0f / 8.0f;\n                #endif\n                float dirReduce = max(\n                    (lumaNW + lumaNE + lumaSW + lumaSE) * (0.25f * _reduceMul),FXAA_REDUCE_MIN);\n                float rcpDirMin = 1.0f/(min(abs(dir.x), abs(dir.y)) + dirReduce);\n                #ifdef Params.spanMax\n                    float _spanMax = Params.spanMax;\n                #else\n                    float _spanMax = 8.0f;\n                #endif\n                dir = min(vec2( _spanMax,  spanMax),max(vec2(-spanMax, -spanMax),dir * rcpDirMin)) * rcpFrame.xy;\n\n                vec3 rgbA = (1.0f/2.0f) * (FxaaTex(tex, posPos.xy + dir * vec2(1.0f/3.0f - 0.5f)).xyz +FxaaTex(tex, posPos.xy + dir * vec2(2.0f/3.0f - 0.5f)).xyz);\n                vec3 rgbB = rgbA * (1.0f/2.0f) + (1.0f/4.0f) * (FxaaTex(tex, posPos.xy + dir * vec2(0.0f/3.0f - 0.5f)).xyz +FxaaTex(tex, posPos.xy + dir * vec2(3.0f/3.0f - 0.5f)).xyz);\n\n                float lumaB = dot(rgbB, luma);\n\n                if ((lumaB < lumaMin) || (lumaB > lumaMax))\n                {\n                    return rgbA;\n                }\n                else\n                {\n                    return rgbB;\n                }\n            }\n            void main(){\n                Context.OutColor = vec4(FXAA(pos, Context.InScreen, resolutionInverse), 1.0f);\n            }\n        }\n    }\n    Technology{\n        Sub_Pass PostFilter{\n            Pass Fxaa{\n            }\n        }\n    }\n}\n";static S_BLOOM_FILTER_DEF_DATA="// Bloom\nDef BloomFilterDef{\n    Globals BloomExtract{\n        color0 vec4 extractTexture;\n        depth24_stencil8 inner depthAndStencil;\n    }\n    Globals VBlur{\n        color0 vec4 color;\n        depth24_stencil8 inner depthAndStencil;\n    }\n    Globals HBlur{\n        color0 vec4 color;\n        depth24_stencil8 inner depthAndStencil;\n    }\n    Params{\n        // 辉光阈值\n        float extractThreshold;\n        // 曝光程度(默认2)\n        float exposurePower;\n        // 辉光强度\n        float bloomIntensity;\n        // 模糊缩放(默认1.5)\n        float blurScale;\n\n\n        // 使用辉光纹理(应该继承具体的Def下只需,后续完善)\n        bool useGlowMap;\n    }\n    SubTechnology ExtractPass{\n        Vars{\n            vec2 uv0;\n        }\n        Vs_Shader{\n            void main(){\n                Context.OutPosition = vec4(Context.InPosition, 1.0f);\n                uv0 = Context.InUv0;\n            }\n        }\n        Fs_Shader{\n            const vec3 DEFAULT_GRAY = vec3(0.2126f, 0.7152f, 0.0722f);\n            #define DEFAULT_EXTRACT_THRESHOLD 0.5f\n            #define GAMMA 2.2f\n            #define GAMMA_T 1.0f / GAMMA\n            void main(){\n                ivec2 iTexC = ivec2(uv0 * vec2(textureSize(Context.InScreen, 0)));\n                vec4 screenColor = texelFetch(Context.InScreen, iTexC, 0);\n\n                float threshold = 0.0f;\n                float power = 2.0f;\n                #ifdef Params.extractThreshold\n                    threshold = Params.extractThreshold;\n                #else\n                    threshold = DEFAULT_EXTRACT_THRESHOLD;\n                #endif\n                #ifdef Params.exposurePower\n                    power = Params.exposurePower;\n                #endif\n\n                if( (screenColor.r + screenColor.g + screenColor.b) / 3.0f < threshold ){\n                    GlobalsBloomExtract.OutextractTexture = vec4(0.0f, 0.0f, 0.0f, 1.0f);\n                }\n                else{\n                    GlobalsBloomExtract.OutextractTexture = pow( screenColor, vec4(power) );\n                }\n\n                //vec4 screenColor = texture(Context.InScreen, uv0);\n                //screenColor.rgb = pow(screenColor.rgb, vec3(GAMMA));\n                // 记住我们在线性空间计算,所以这里需要映射回来\n                //float threshold = dot(screenColor.rgb, DEFAULT_GRAY);\n                //#ifdef Params.extractThreshold\n                //    if(threshold > Params.extractThreshold){\n                //        GlobalsBloomExtract.OutextractTexture = screenColor;\n                //    }\n                //    else{\n                //        GlobalsBloomExtract.OutextractTexture = vec4(0.0f, 0.0f, 0.0f, 1.0f);\n                //    }\n                //#else\n                //    if(threshold > DEFAULT_EXTRACT_THRESHOLD){\n                //        GlobalsBloomExtract.OutextractTexture = screenColor;\n                //    }\n                //    else{\n                //        GlobalsBloomExtract.OutextractTexture = vec4(0.0f, 0.0f, 0.0f, 1.0f);\n                //    }\n                //#endif\n            }\n        }\n    }\n    SubTechnology FirstHBlurPass{\n            Vars{\n                vec2 uv0;\n            }\n            Vs_Shader{\n                void main(){\n                    Context.OutPosition = vec4(Context.InPosition, 1.0f);\n                    uv0 = Context.InUv0;\n                }\n            }\n            Fs_Shader{\n                #define DEFAULT_BLUR_SCALE 1.5f\n                void main(){\n                    #ifdef Params.blurScale\n                        float blurSize = Params.blurScale / float(textureSize(GlobalsBloomExtract.InextractTexture, 0).x);\n                    #else\n                        float blurSize = DEFAULT_BLUR_SCALE / float(textureSize(GlobalsBloomExtract.InextractTexture, 0).x);\n                    #endif\n                    vec4 sum = vec4(0.0f);\n\n                    // 水平方向模糊\n                    // 采样9个部分\n                    sum += texture(GlobalsBloomExtract.InextractTexture, vec2(uv0.x - 4.0f*blurSize, uv0.y )) * 0.06f;\n                    sum += texture(GlobalsBloomExtract.InextractTexture, vec2(uv0.x - 3.0f*blurSize, uv0.y )) * 0.09f;\n                    sum += texture(GlobalsBloomExtract.InextractTexture, vec2(uv0.x - 2.0f*blurSize, uv0.y)) * 0.12f;\n                    sum += texture(GlobalsBloomExtract.InextractTexture, vec2(uv0.x - blurSize, uv0.y )) * 0.15f;\n                    sum += texture(GlobalsBloomExtract.InextractTexture, vec2(uv0.x, uv0.y)) * 0.16f;\n                    sum += texture(GlobalsBloomExtract.InextractTexture, vec2(uv0.x + blurSize, uv0.y )) * 0.15f;\n                    sum += texture(GlobalsBloomExtract.InextractTexture, vec2(uv0.x + 2.0f*blurSize, uv0.y )) * 0.12f;\n                    sum += texture(GlobalsBloomExtract.InextractTexture, vec2(uv0.x + 3.0f*blurSize, uv0.y )) * 0.09f;\n                    sum += texture(GlobalsBloomExtract.InextractTexture, vec2(uv0.x + 4.0f*blurSize, uv0.y )) * 0.06f;\n\n                    GlobalsHBlur.Outcolor = sum;\n                }\n            }\n        }\n    SubTechnology HBlurPass{\n        Vars{\n            vec2 uv0;\n        }\n        Vs_Shader{\n            void main(){\n                Context.OutPosition = vec4(Context.InPosition, 1.0f);\n                uv0 = Context.InUv0;\n            }\n        }\n        Fs_Shader{\n            #define DEFAULT_BLUR_SCALE 1.5f\n            void main(){\n                #ifdef Params.blurScale\n                    float blurSize = Params.blurScale / float(textureSize(GlobalsVBlur.Incolor, 0).x);\n                #else\n                    float blurSize = DEFAULT_BLUR_SCALE / float(textureSize(GlobalsVBlur.Incolor, 0).x);\n                #endif\n\n                vec4 sum = vec4(0.0f);\n\n                // 水平方向模糊\n                // 采样9个部分\n                sum += texture(GlobalsVBlur.Incolor, vec2(uv0.x - 4.0f*blurSize, uv0.y )) * 0.06f;\n                sum += texture(GlobalsVBlur.Incolor, vec2(uv0.x - 3.0f*blurSize, uv0.y )) * 0.09f;\n                sum += texture(GlobalsVBlur.Incolor, vec2(uv0.x - 2.0f*blurSize, uv0.y)) * 0.12f;\n                sum += texture(GlobalsVBlur.Incolor, vec2(uv0.x - blurSize, uv0.y )) * 0.15f;\n                sum += texture(GlobalsVBlur.Incolor, vec2(uv0.x, uv0.y)) * 0.16f;\n                sum += texture(GlobalsVBlur.Incolor, vec2(uv0.x + blurSize, uv0.y )) * 0.15f;\n                sum += texture(GlobalsVBlur.Incolor, vec2(uv0.x + 2.0f*blurSize, uv0.y )) * 0.12f;\n                sum += texture(GlobalsVBlur.Incolor, vec2(uv0.x + 3.0f*blurSize, uv0.y )) * 0.09f;\n                sum += texture(GlobalsVBlur.Incolor, vec2(uv0.x + 4.0f*blurSize, uv0.y )) * 0.06f;\n\n                GlobalsHBlur.Outcolor = sum;\n            }\n        }\n    }\n    SubTechnology VBlurPass{\n        Vars{\n            vec2 uv0;\n        }\n        Vs_Shader{\n            void main(){\n                Context.OutPosition = vec4(Context.InPosition, 1.0f);\n                uv0 = Context.InUv0;\n            }\n        }\n        Fs_Shader{\n            #define DEFAULT_BLUR_SCALE 1.5f\n            void main(){\n                #ifdef Params.blurScale\n                    float blurSize = Params.blurScale / float(textureSize(GlobalsHBlur.Incolor, 0).y);\n                #else\n                    float blurSize = DEFAULT_BLUR_SCALE / float(textureSize(GlobalsHBlur.Incolor, 0).y);\n                #endif\n                vec4 sum = vec4(0.0f);\n\n                // 垂直方向模糊\n                // 采样9个部分\n                sum += texture(GlobalsHBlur.Incolor, vec2(uv0.x, uv0.y - 4.0f*blurSize)) * 0.06f;\n                sum += texture(GlobalsHBlur.Incolor, vec2(uv0.x, uv0.y - 3.0f*blurSize)) * 0.09f;\n                sum += texture(GlobalsHBlur.Incolor, vec2(uv0.x, uv0.y - 2.0f*blurSize)) * 0.12f;\n                sum += texture(GlobalsHBlur.Incolor, vec2(uv0.x, uv0.y - blurSize)) * 0.15f;\n                sum += texture(GlobalsHBlur.Incolor, vec2(uv0.x, uv0.y)) * 0.16f;\n                sum += texture(GlobalsHBlur.Incolor, vec2(uv0.x, uv0.y + blurSize)) * 0.15f;\n                sum += texture(GlobalsHBlur.Incolor, vec2(uv0.x, uv0.y + 2.0f*blurSize)) * 0.12f;\n                sum += texture(GlobalsHBlur.Incolor, vec2(uv0.x, uv0.y + 3.0f*blurSize)) * 0.09f;\n                sum += texture(GlobalsHBlur.Incolor, vec2(uv0.x, uv0.y + 4.0f*blurSize)) * 0.06f;\n\n                GlobalsVBlur.Outcolor = sum;\n            }\n        }\n    }\n    SubTechnology BloomPass{\n        Vars{\n            vec2 uv0;\n        }\n        Vs_Shader{\n            void main(){\n                Context.OutPosition = vec4(Context.InPosition, 1.0f);\n                uv0 = Context.InUv0;\n            }\n        }\n        Fs_Shader{\n            #define GAMMA 2.2f\n            #define GAMMA_T 1.0f / GAMMA\n            void main(){\n                // 1.对ExtractTexture应用某种模糊(Blur)处理\n                // 2.结合ExtractTexture和ScreenColor实现bloom\n                vec4 screenColor = texture(Context.InScreen, uv0);\n                vec3 blurColor = texture(GlobalsVBlur.Incolor, uv0).rgb;\n                screenColor.rgb += blurColor;\n                const float exposure = 0.5f;\n                //vec3 result = vec3(1.0f) - exp(-screenColor.rgb * exposure);\n                //result = pow(result, vec3(GAMMA_T));\n                //Context.OutColor = vec4(result, screenColor.a);\n                Context.OutColor = screenColor;\n            }\n        }\n    }\n    SubTechnology FastBloomPass{\n        Vars{\n            vec2 uv0;\n        }\n        Vs_Shader{\n            void main(){\n                Context.OutPosition = vec4(Context.InPosition, 1.0f);\n                uv0 = Context.InUv0;\n            }\n        }\n        Fs_Shader{\n            void main(){\n                vec4 screenColor = texture(Context.InScreen, uv0);\n                //vec3 blurColor = pow(texture(GlobalsVBlur.Incolor, uv0).rgb, vec3(1.0f / 2.0f));\n                //blurColor = vec3(1.0f) - exp(-blurColor.rgb * 0.5f);\n                vec3 blurColor = texture(GlobalsVBlur.Incolor, uv0).rgb;\n\n                float _bInd = 2.0f;\n                #ifdef Params.bloomIntensity\n                    _bInd = Params.bloomIntensity;\n                #endif\n\n                screenColor.rgb += blurColor * _bInd;\n                Context.OutColor = screenColor;\n                //测试\n                //Context.OutColor = vec4(blurColor, 1.0f);\n            }\n        }\n    }\n    Technology{\n        Sub_Pass PostFilter{\n            Pass ExtractPass{\n            }\n            Pass FirstHBlurPass{\n            }\n            Pass VBlurPass{\n            }\n            Pass FastBloomPass{\n            }\n        }\n    }\n    Technology MultiBloom{\n        //Sub_Pass PreFrame{\n        //    Pass ExtractPass{\n        //    }\n        //}\n        Sub_Pass PostFilter{\n            Pass ExtractPass{\n            }\n            Pass FirstHBlurPass{\n            }\n            Pass VBlurPass{\n            }\n            Pass HBlurPass{\n            }\n            Pass VBlurPass{\n            }\n            Pass HBlurPass{\n            }\n            Pass VBlurPass{\n            }\n            Pass BloomPass{\n            }\n        }\n    }\n}\n";static S_WIREFRAME_DEF_DATA="// 由于webGL基于openGLES3.x,其不存在openGL线框模式,所以在这里通过shader实现线框\nDef WireframeDef{\n    Params{\n        vec4 color;\n        float wireframeWidth;\n    }\n    SubTechnology Wireframe{\n        Vars{\n            vec3 bary;\n        }\n        Vs_Shader{\n            void main(){\n                #ifdef Context.Skins\n                    mat4 skinMat =\n                            Context.InWeight0.x * Context.Joints[int(Context.InJoint0.x)] +\n                            Context.InWeight0.y * Context.Joints[int(Context.InJoint0.y)] +\n                            Context.InWeight0.z * Context.Joints[int(Context.InJoint0.z)] +\n                            Context.InWeight0.w * Context.Joints[int(Context.InJoint0.w)];\n                    // vec4 pos = Context.ModelMatrix * skinMat * vec4(Context.InPosition, 1.0f);\n                    vec4 pos = skinMat * vec4(Context.InPosition, 1.0f);\n                #else\n                    vec4 pos = Context.ModelMatrix * vec4(Context.InPosition, 1.0f);\n                #endif\n                bary = Context.InBarycentric;\n\n\n\n                Context.OutPosition = Context.ProjectViewMatrix * pos;\n            }\n        }\n        Fs_Shader{\n            void main(){\n                #ifdef Params.color\n                    vec4 _wireframeColor = Params.color;\n                #else\n                    vec4 _wireframeColor = vec4(0.2f, 0.2f, 0.2f, 1.0f);\n                #endif\n                #ifdef Params.wireframeWidth\n                    float _wireframeWidth = Params.wireframeWidth;\n                #else\n                    float _wireframeWidth = 0.01f;\n                #endif\n                if(any(lessThan(bary, vec3(_wireframeWidth)))){\n                    Context.OutColor = _wireframeColor;\n                }\n                else{\n                    discard;\n                }\n            }\n        }\n    }\n    Technology{\n        Sub_Pass{\n            Pass Wireframe{\n            }\n        }\n    }\n}\n";static S_COLOR_DEF_DATA="// 颜色材质,提供指定颜色或颜色纹理并渲染\nDef ColorDef{\n    Params{\n        vec4 color;\n        sampler2D colorMap;\n        float alphaDiscard;\n    }\n    SubTechnology ScalePass{\n        Vars{\n            vec4 wordPosition;\n        }\n        Vs_Shader{\n            void main(){\n                //Context.OutPosition = Context.ProjectViewModelMatrix * vec4(Context.InPosition, 1.0f);\n                mat4 scaleMat4 = mat4(\n                    0.2f, 0.0f, 0.0f, 0.0f,\n                    0.0f, 0.2f, 0.0f, 0.0f,\n                    0.0f, 0.0f, 0.2f, 0.0f,\n                    0.0f, 0.0f, 0.0f, 1.0f\n                );\n                Context.OutPosition = Context.ProjectMatrix * Context.ViewMatrix * Context.ModelMatrix * vec4(Context.InPosition, 1.0f);\n                wordPosition = Context.OutPosition;\n            }\n        }\n        Fs_Shader{\n            void main(){\n                // 使用自定义颜色输出\n                #ifdef Params.color\n                    Context.OutColor = Params.color;\n                #else\n                    // 使用纹理\n                    #ifdef Params.colorMap\n                        Context.OutColor = texture(Params.colorMap, Context.InUv0);\n                        #ifdef Params.alphaDiscard\n                            if(Context.OutColor.a < Params.alphaDiscard){\n                                discard;\n                            }\n                        #endif\n                    #else\n                        Context.OutColor = vec4(1.0f, 1.0f, 0.0f, 1.0f);\n                    #endif\n                #endif\n                vec4 wPosition = wordPosition;\n            }\n        }\n    }\n    SubTechnology ColorPass{\n        Vars{\n            vec4 wordPosition;\n            vec2 uv0;\n        }\n        Vs_Shader{\n            void main(){\n                //Context.OutPosition = Context.ProjectViewModelMatrix * vec4(Context.InPosition, 1.0f);\n                Context.OutPosition = Context.ProjectMatrix * Context.ViewMatrix * Context.ModelMatrix * vec4(Context.InPosition, 1.0f);\n                wordPosition = Context.OutPosition;\n                uv0 = Context.InUv0;\n            }\n        }\n        Fs_Shader{\n            void main(){\n                // 使用自定义颜色输出\n                #ifdef Params.color\n                    Context.OutColor = Params.color;\n                #else\n                    // 使用纹理\n                    #ifdef Params.colorMap\n                        Context.OutColor = texture(Params.colorMap, uv0);\n                        #ifdef Params.alphaDiscard\n                            if(Context.OutColor.a < Params.alphaDiscard){\n                                discard;\n                            }\n                        #endif\n                    #else\n                        Context.OutColor = vec4(1.0f, 1.0f, 1.0f, 1.0f);\n                    #endif\n                #endif\n            }\n        }\n    }\n    SubTechnology GreenPass{\n        Vars{\n            vec4 wordPosition;\n        }\n        Vs_Shader{\n            void main(){\n                Context.OutPosition = Context.ProjectMatrix * Context.ViewMatrix * Context.ModelMatrix * vec4(Context.InPosition, 1.0f);\n                wordPosition = Context.OutPosition;\n            }\n        }\n        Fs_Shader{\n            void main(){\n                // 先判断Params.color是否有值\n                #ifdef Params.color\n                    Context.OutColor = Params.color;\n                #else\n                    Context.OutColor = vec4(0.0f, 1.0f, 0.0f, 1.0f);\n                #endif\n            }\n        }\n    }\n    Technology{\n        Sub_Pass{\n            Pass ColorPass{\n            }\n        }\n    }\n    Technology Green{\n        Sub_Pass{\n            Pass GreenPass{\n            }\n        }\n    }\n    // ScaleColorPass\n    Technology ScaleColor{\n        Sub_Pass{\n            //第一个pass不应该写入深度,否则第二个pass被剔除\n            //可以指定每个pass的写入状态,比如关闭深度,开启深度之类的\n            Pass ScalePass{\n                // 这个pass剔除前面\n                FaceCull Front;\n            }\n            Pass ColorPass{\n                // 这个pass剔除背面\n                FaceCull Back;\n            }\n        }\n    }\n}\n";static S_POST_SHADOW_DEF_DATA="// PostShadowDef\nDef PostShadowDef{\n    Params{\n        // ShadowInfo\n        float shadowIntensity;\n        int filterMode;\n        bool hardwareShadow;\n        bool backfaceShadows;\n        float pcfEdge;\n        vec2 fadeInfo;\n    }\n    SubTechnology PostShadowPass{\n        Vars{\n            vec2 wUv0;\n            mat4 pvInverse;\n            vec4 pvRow2;\n        }\n        Vs_Shader{\n            void main(){\n                Context.OutPosition = vec4(Context.InPosition, 1.0f);\n                pvInverse = inverse(Context.ProjectViewMatrix);\n                // glsl是列矩阵,这里我获取第二行(只需要变换得到z即可测试PSSM)\n                pvRow2 = vec4(Context.ProjectViewMatrix[0][2], Context.ProjectViewMatrix[1][2], Context.ProjectViewMatrix[2][2], Context.ProjectViewMatrix[3][2]);\n                wUv0 = Context.InUv0;\n            }\n        }\n        Fs_Shader{\n            //#extension GL_ARB_gpu_shader5 : enable\n            float shadowBorderScale = 1.0f;\n            #ifdef HARDWARE_SHADOWS\n                #define SHADOWMAP sampler2DShadow\n                #define SHADOWCOMPAREOFFSET(tex,coord,offset) textureProjOffset(tex, coord, offset)\n                #define SHADOWCOMPARE(tex,coord) textureProj(tex, coord)\n                #define SHADOWGATHER(tex,coord) textureGather(tex, coord.xy, coord.z)\n            #else\n                #define SHADOWMAP sampler2D\n                #define SHADOWCOMPAREOFFSET(tex,coord,offset) step(coord.z, textureProjOffset(tex, coord, offset).r)\n                #define SHADOWCOMPARE(tex,coord) step(coord.z, textureProj(tex, coord).r)\n                #define SHADOWGATHER(tex,coord) step(coord.z, textureGather(tex, coord.xy))\n            #endif\n\n            #define FILTER_MODE 1\n\n            #if FILTER_MODE == 10\n                #define GETSHADOW Shadow_Nearest\n                #define KERNEL 1.0\n            #elif FILTER_MODE == 1\n                #ifdef HARDWARE_SHADOWS\n                    #define GETSHADOW Shadow_Nearest\n                #else\n                    #define GETSHADOW Shadow_DoBilinear_2x2\n                #endif\n                #define KERNEL 1.0\n            #endif\n\n            #if (FILTER_MODE == 2)\n                #define GETSHADOW Shadow_DoDither_2x2\n                #define KERNEL 1.0\n            #elif FILTER_MODE == 3\n                #define GETSHADOW Shadow_DoPCF\n                #define KERNEL 4.0\n            #elif FILTER_MODE == 4\n                #define GETSHADOW Shadow_DoPCFPoisson\n                #define KERNEL 4.0\n            #elif FILTER_MODE == 5\n                #define GETSHADOW Shadow_DoPCF\n                #define KERNEL 8.0\n            #endif\n\n            float Shadow_DoShadowCompare(in SHADOWMAP tex,in vec4 projCoord){\n                return SHADOWCOMPARE(tex, projCoord);\n            }\n\n            float Shadow_BorderCheck(in vec2 coord){\n                // 最快的“hack”方法（使用 4-5 条指令）\n                vec4 t = vec4(coord.xy, 0.0f, 1.0f);\n                t = step(t.wwxy, t.xyzz);\n                return dot(t,t);\n            }\n\n            float Shadow_Nearest(in SHADOWMAP tex,in vec4 projCoord){\n                float border = Shadow_BorderCheck(projCoord.xy);\n                if (border > 0.0f){\n                    return 1.0f;\n                }\n                return SHADOWCOMPARE(tex, projCoord);\n            }\n\n            //----------------------------------ShadowFilter--------------------------------------\n            float Shadow_DoShadowCompareOffset(in SHADOWMAP tex,in vec4 projCoord,in vec2 offset){\n                vec4 coord = vec4(projCoord.xy + offset.xy * Context.SMapSizeInverse * shadowBorderScale, projCoord.zw);\n                return SHADOWCOMPARE(tex, coord);\n            }\n\n\n            float Shadow_DoDither_2x2(in SHADOWMAP tex, in vec4 projCoord){\n                float border = Shadow_BorderCheck(projCoord.xy);\n                if (border > 0.0f)\n                    return 1.0f;\n\n                float shadow = 0.0f;\n                vec2 o = vec2(ivec2(mod(floor(gl_FragCoord.xy), 2.0f))); //Strict type checking in GLSL ES\n                shadow += Shadow_DoShadowCompareOffset(tex, projCoord, (vec2(-1.5f, 1.5f)+o));\n                shadow += Shadow_DoShadowCompareOffset(tex, projCoord, (vec2( 0.5f, 1.5f)+o));\n                shadow += Shadow_DoShadowCompareOffset(tex, projCoord, (vec2(-1.5f, -0.5f)+o));\n                shadow += Shadow_DoShadowCompareOffset(tex, projCoord, (vec2( 0.5f, -0.5f)+o));\n                shadow *= 0.25f;\n                return shadow;\n            }\n\n            float Shadow_DoBilinear_2x2(in SHADOWMAP tex, in vec4 projCoord){\n                float border = Shadow_BorderCheck(projCoord.xy);\n                if (border > 0.0f){\n                    return 1.0f;\n                }\n\n                vec4 gather = vec4(0.0f);\n                #if defined GL_ARB_gpu_shader5 || defined GL_OES_gpu_shader5\n                    vec4 coord = vec4(projCoord.xyz / projCoord.www, 0.0f);\n                    gather = SHADOWGATHER(tex, coord);\n                #else\n                    gather.x = SHADOWCOMPAREOFFSET(tex, projCoord, ivec2(0, 1));\n                    gather.y = SHADOWCOMPAREOFFSET(tex, projCoord, ivec2(1, 1));\n                    gather.z = SHADOWCOMPAREOFFSET(tex, projCoord, ivec2(1, 0));\n                    gather.w = SHADOWCOMPAREOFFSET(tex, projCoord, ivec2(0, 0));\n                #endif\n\n               vec2 f = fract( projCoord.xy * Context.ShadowMapSize );\n               vec2 mx = mix( gather.wx, gather.zy, f.x );\n               return mix( mx.x, mx.y, f.y );\n            }\n\n            float Shadow_DoPCF(in SHADOWMAP tex,in vec4 projCoord){\n\n                float shadow = 0.0f;\n                float border = Shadow_BorderCheck(projCoord.xy);\n                if (border > 0.0f)\n                    return 1.0f;\n\n                float bound = KERNEL * 0.5f - 0.5f;\n                bound *= Params.pcfEdge;\n                for (float y = -bound; y <= bound; y += Params.pcfEdge){\n                    for (float x = -bound; x <= bound; x += Params.pcfEdge){\n                        shadow += Shadow_DoShadowCompareOffset(tex, projCoord, vec2(x,y));\n                    }\n                }\n\n                shadow = shadow / (KERNEL * KERNEL);\n                return shadow;\n            }\n\n            //12 tap poisson disk\n            const vec2 poissonDisk0 =  vec2(-0.1711046f, -0.425016f);\n            const vec2 poissonDisk1 =  vec2(-0.7829809f, 0.2162201f);\n            const vec2 poissonDisk2 =  vec2(-0.2380269f, -0.8835521f);\n            const vec2 poissonDisk3 =  vec2(0.4198045f, 0.1687819f);\n            const vec2 poissonDisk4 =  vec2(-0.684418f, -0.3186957f);\n            const vec2 poissonDisk5 =  vec2(0.6026866f, -0.2587841f);\n            const vec2 poissonDisk6 =  vec2(-0.2412762f, 0.3913516f);\n            const vec2 poissonDisk7 =  vec2(0.4720655f, -0.7664126f);\n            const vec2 poissonDisk8 =  vec2(0.9571564f, 0.2680693f);\n            const vec2 poissonDisk9 =  vec2(-0.5238616f, 0.802707f);\n            const vec2 poissonDisk10 = vec2(0.5653144f, 0.60262f);\n            const vec2 poissonDisk11 = vec2(0.0123658f, 0.8627419f);\n\n\n            float Shadow_DoPCFPoisson(in SHADOWMAP tex, in vec4 projCoord){\n                float shadow = 0.0f;\n                float border = Shadow_BorderCheck(projCoord.xy);\n                if (border > 0.0f){\n                    return 1.0f;\n                }\n\n                vec2 texelSize = Context.SMapSizeInverse * 4.0f * Params.pcfEdge * shadowBorderScale;\n\n                shadow += SHADOWCOMPARE(tex, vec4(projCoord.xy + poissonDisk0 * texelSize, projCoord.zw));\n                shadow += SHADOWCOMPARE(tex, vec4(projCoord.xy + poissonDisk1 * texelSize, projCoord.zw));\n                shadow += SHADOWCOMPARE(tex, vec4(projCoord.xy + poissonDisk2 * texelSize, projCoord.zw));\n                shadow += SHADOWCOMPARE(tex, vec4(projCoord.xy + poissonDisk3 * texelSize, projCoord.zw));\n                shadow += SHADOWCOMPARE(tex, vec4(projCoord.xy + poissonDisk4 * texelSize, projCoord.zw));\n                shadow += SHADOWCOMPARE(tex, vec4(projCoord.xy + poissonDisk5 * texelSize, projCoord.zw));\n                shadow += SHADOWCOMPARE(tex, vec4(projCoord.xy + poissonDisk6 * texelSize, projCoord.zw));\n                shadow += SHADOWCOMPARE(tex, vec4(projCoord.xy + poissonDisk7 * texelSize, projCoord.zw));\n                shadow += SHADOWCOMPARE(tex, vec4(projCoord.xy + poissonDisk8 * texelSize, projCoord.zw));\n                shadow += SHADOWCOMPARE(tex, vec4(projCoord.xy + poissonDisk9 * texelSize, projCoord.zw));\n                shadow += SHADOWCOMPARE(tex, vec4(projCoord.xy + poissonDisk10 * texelSize, projCoord.zw));\n                shadow += SHADOWCOMPARE(tex, vec4(projCoord.xy + poissonDisk11 * texelSize, projCoord.zw));\n\n                // 除以 12\n                return shadow * 0.08333333333f;\n            }\n            //----------------------------------ShadowFilter--------------------------------------\n\n\n            vec3 getPosition(in float depth, in vec2 newTexCoord){\n\n                vec4 pos;\n                pos.xy = (newTexCoord * vec2(2.0f)) - vec2(1.0f);\n                pos.z  = depth * 2.0f - 1.0f;\n                pos.w  = 1.0f;\n                pos    = pvInverse * pos;\n                pos.xyz /= pos.w;\n                return pos.xyz;\n            }\n            #ifdef Context.Pssm\n                // 基于PSSM实现的DirectionalLightShadows\n                float getDirectionalLightShadows(in vec4 splits,in float shadowPosition, in SHADOWMAP shadowMap0, in SHADOWMAP shadowMap1, in SHADOWMAP shadowMap2,in SHADOWMAP shadowMap3, in vec4 projCoord0,in vec4 projCoord1,in vec4 projCoord2,in vec4 projCoord3){\n                    float shadow = 1.0f;\n                    if(shadowPosition < splits.x){\n                        shadow = GETSHADOW(shadowMap0, projCoord0 );\n                    }\n                    else if( shadowPosition <  splits.y){\n                        shadowBorderScale = 0.5f;\n                        shadow = GETSHADOW(shadowMap1, projCoord1);\n                    }\n                    else if( shadowPosition <  splits.z){\n                        shadowBorderScale = 0.25f;\n                        shadow = GETSHADOW(shadowMap2, projCoord2);\n                    }\n                    else if( shadowPosition <  splits.w){\n                        shadowBorderScale = 0.125f;\n                        shadow = GETSHADOW(shadowMap3, projCoord3);\n                    }\n                    return shadow;\n                }\n            #endif\n            #ifdef Context.PointLightShadows\n                float getPointLightShadows(in vec4 worldPos,in vec3 lightPos, in SHADOWMAP shadowMap0, in SHADOWMAP shadowMap1, in SHADOWMAP shadowMap2, in SHADOWMAP shadowMap3, in SHADOWMAP shadowMap4, in SHADOWMAP shadowMap5, in vec4 projCoord0,in vec4 projCoord1,in vec4 projCoord2,in vec4 projCoord3,in vec4 projCoord4,in vec4 projCoord5){\n                    float shadow = 1.0f;\n                    vec3 vect = worldPos.xyz - lightPos;\n                    vec3 absv = abs(vect);\n                    float maxComp = max(absv.x,max(absv.y,absv.z));\n                    if(maxComp == absv.y){\n                       if(vect.y < 0.0f){\n                           shadow = GETSHADOW(shadowMap0, projCoord0 / projCoord0.w);\n                       }\n                       else{\n                           shadow = GETSHADOW(shadowMap1, projCoord1 / projCoord1.w);\n                       }\n                    }\n                    else if(maxComp == absv.z){\n                       if(vect.z < 0.0f){\n                           shadow = GETSHADOW(shadowMap2, projCoord2 / projCoord2.w);\n                       }\n                       else{\n                           shadow = GETSHADOW(shadowMap3, projCoord3 / projCoord3.w);\n                       }\n                    }\n                    else if(maxComp == absv.x){\n                       if(vect.x < 0.0f){\n                           shadow = GETSHADOW(shadowMap4, projCoord4 / projCoord4.w);\n                       }\n                       else{\n                           shadow = GETSHADOW(shadowMap5, projCoord5 / projCoord5.w);\n                       }\n                    }\n                    return shadow;\n                }\n            #endif\n            #ifdef Context.SpotLightShadows\n                float getSpotLightShadows(in SHADOWMAP shadowMap, in  vec4 projCoord){\n                    float shadow = 1.0f;\n                    projCoord /= projCoord.w;\n                    shadow = GETSHADOW(shadowMap, projCoord);\n\n                    // 一个小的衰减，使阴影很好地融入暗部，将纹理坐标值转换为 -1,1 范围，因此纹理坐标向量的长度实际上是地面上变亮区域的半径\n                    projCoord = projCoord * 2.0f - 1.0f;\n                    float fallOff = ( length(projCoord.xy) - 0.9f ) / 0.1f;\n                    return mix(shadow, 1.0f, clamp(fallOff, 0.0f, 1.0f));\n                }\n            #endif\n            vec3 approximateNormal(in vec4 worldPos,in vec2 texCoord, in sampler2D depthMap, in vec2 resolutionInverse){\n                float step = resolutionInverse.x;\n                float stepy = resolutionInverse.y;\n                float depth2 = texture(depthMap, texCoord + vec2(step, -stepy)).r;\n                float depth3 = texture(depthMap, texCoord + vec2(-step, -stepy)).r;\n                vec4 worldPos2 = vec4(getPosition(depth2, texCoord + vec2(step, -stepy)),1.0f);\n                vec4 worldPos3 = vec4(getPosition(depth3, texCoord + vec2(-step, -stepy)),1.0f);\n\n                vec3 v1 = (worldPos - worldPos2).xyz;\n                vec3 v2 = (worldPos3 - worldPos2).xyz;\n                return normalize(cross(v1, v2));\n            }\n            const mat4 biasMat = mat4(0.5f, 0.0f, 0.0f, 0.0f,\n                                      0.0f, 0.5f, 0.0f, 0.0f,\n                                      0.0f, 0.0f, 0.5f, 0.0f,\n                                      0.5f, 0.5f, 0.5f, 1.0f);\n            void main(){\n                float depth = texture(Context.InDepth, wUv0).r;\n                Context.OutColor = texture(Context.InScreen, wUv0);\n\n                // 跳过不需要的部分,depth为1.0的基本上是背景或sky部分\n                if(depth >= 1.0f){\n                    return;\n                }\n\n                // 深度重建世界坐标\n                vec4 wPosition = vec4(getPosition(depth, wUv0), 1.0f);\n\n                vec3 lightDir;\n                #ifdef Context.Pssm\n                    lightDir = Context.LightDir;\n                #else\n                    lightDir = wPosition.xyz - Context.LightPos;\n                #endif\n\n                #ifdef Params.backfaceShadows\n                    // 丢弃背面时,由于在forward pipeline下无法获取该点法线,所以只能通过近似算法获取法线\n                    // 该近似算法依赖于深度信息,所以很容易造成Shadow Acne\n                    if(!Params.backfaceShadows){\n                        vec3 normal = approximateNormal(wPosition, wUv0, Context.InDepth, Context.ResolutionInverse);\n                        float ndotl = dot(normal, lightDir);\n                        if(ndotl > 0.0f){\n                            return;\n                        }\n                    }\n                #endif\n\n                #if !defined(Context.PointLightShadows)\n                    #if !defined(Context.Pssm)\n                        if( dot(Context.LightDir, lightDir) < 0.0f){\n                            return;\n                        }\n                    #endif\n                #endif\n\n                // 将坐标转换到光源空间\n                vec4 projCoord0 = biasMat * Context.LightViewProjectMatrix0 * wPosition;\n                vec4 projCoord1 = biasMat * Context.LightViewProjectMatrix1 * wPosition;\n                vec4 projCoord2 = biasMat * Context.LightViewProjectMatrix2 * wPosition;\n                vec4 projCoord3 = biasMat * Context.LightViewProjectMatrix3 * wPosition;\n                #ifdef Context.PointLightShadows\n                   vec4 projCoord4 = biasMat * Context.LightViewProjectMatrix4 * wPosition;\n                   vec4 projCoord5 = biasMat * Context.LightViewProjectMatrix5 * wPosition;\n                #endif\n\n                // 计算阴影\n                float shadow = 1.0f;\n\n                #if defined(Context.Pssm)\n                    float shadowPosition = pvRow2.x * wPosition.x +  pvRow2.y * wPosition.y +  pvRow2.z * wPosition.z +  pvRow2.w;\n                #else\n                    #if defined(Params.fadeInfo)\n                        float shadowPosition = pvRow2.x * wPosition.x +  pvRow2.y * wPosition.y +  pvRow2.z * wPosition.z +  pvRow2.w;\n                    #endif\n                #endif\n\n                #ifdef Context.PointLightShadows\n                    // pointLight shadow\n                    shadow = getPointLightShadows(wPosition, Context.LightPos, Context.InShadowMap0, Context.InShadowMap1, Context.InShadowMap2, Context.InShadowMap3, Context.InShadowMap4, Context.InShadowMap5, projCoord0, projCoord1, projCoord2, projCoord3, projCoord4, projCoord5);\n                #else\n                    #ifdef Context.Pssm\n                        // directionalLight shadow\n                        shadow = getDirectionalLightShadows(Context.Splits, shadowPosition, Context.InShadowMap0, Context.InShadowMap1, Context.InShadowMap2, Context.InShadowMap3, projCoord0, projCoord1, projCoord2, projCoord3);\n                    #else\n                        #ifdef Context.SpotLightShadows\n                            // spotLight shadow\n                            shadow = getSpotLightShadows(Context.InShadowMap0, projCoord0);\n                        #endif\n                    #endif\n                #endif\n\n                #ifdef Params.fadeInfo\n                    shadow = clamp(max(0.0f, mix(shadow, 1.0f,(shadowPosition - Params.fadeInfo.x) * Params.fadeInfo.y)), 0.0f, 1.0f);\n                #endif\n                #ifdef Params.shadowIntensity\n                    shadow = shadow * Params.shadowIntensity + (1.0f - Params.shadowIntensity);\n                #else\n                    shadow = shadow * 0.7f + 0.3f;\n                #endif\n                Context.OutColor = Context.OutColor * vec4(shadow, shadow, shadow, 1.0f);\n            }\n        }\n    }\n    Technology{\n        Sub_Pass PostFilter{\n            Pass PostShadowPass{\n            }\n        }\n    }\n}\n";static S_PRE_SHADOW_DEF_DATA="// PreShadowDef\n// 这个材质定义用于捕获ShadowMap,因此,它很简单,只是简单的将深度信息渲染到指定缓冲中\nDef PreShadowDef{\n    Params{\n        bool debug;\n    }\n    SubTechnology PreShadowPass{\n        Vars{\n            vec2 wUv0;\n        }\n        Vs_Shader{\n            void main(){\n                #ifdef Context.Skins\n                    mat4 skinMat =\n                            Context.InWeight0.x * Context.Joints[int(Context.InJoint0.x)] +\n                            Context.InWeight0.y * Context.Joints[int(Context.InJoint0.y)] +\n                            Context.InWeight0.z * Context.Joints[int(Context.InJoint0.z)] +\n                            Context.InWeight0.w * Context.Joints[int(Context.InJoint0.w)];\n                    // vec4 pos = Context.ModelMatrix * skinMat * vec4(Context.InPosition, 1.0f);\n                    vec4 pos = skinMat * vec4(Context.InPosition, 1.0f);\n                #else\n                    vec4 pos = Context.ModelMatrix * vec4(Context.InPosition, 1.0f);\n                #endif\n                wUv0 = Context.InUv0;\n                Context.OutPosition = Context.ProjectViewMatrix * pos;\n            }\n        }\n        Fs_Shader{\n            void main(){\n                #ifdef Params.debug\n                    if(Params.debug){\n                        Context.OutColor = vec4(vec3(gl_FragCoord.z), 1.0f);\n                    }\n                #endif\n            }\n        }\n    }\n    Technology{\n        Sub_Pass PreFrame{\n            Pass PreShadowPass{\n            }\n        }\n    }\n}\n";static S_FOG_FILTER_DEF_DATA="// 雾化\nDef FogFilterDef{\n    Params{\n        // 雾化距离(默认1000.0f)\n        float fogDistance;\n        // 通常为1.0\n        float fogDensity;\n        // 视锥near\n        float vNear;\n        // 视锥far\n        float vFar;\n        // 雾化near\n        float fogNear;\n        // 雾化far\n        float fogFar;\n        // 雾化颜色\n        vec4 fogColor;\n    }\n    SubTechnology Fog{\n        Vars{\n            vec2 wUv0;\n        }\n        Vs_Shader{\n            void main(){\n                Context.OutPosition = vec4(Context.InPosition, 1.0f);\n                wUv0 = Context.InUv0;\n            }\n        }\n        Fs_Shader{\n            const float LOG2 = 1.442695f;\n            void main(){\n                Context.OutColor = texture(Context.InScreen, wUv0);\n                float depth = texture(Context.InDepth, wUv0).r;\n\n                #ifdef Params.fogDistance\n                    float _fogDistance = Params.fogDistance;\n                #else\n                    float _fogDistance = 1000.0f;\n                #endif\n                #ifdef Params.fogDensity\n                    float _fogDensity = Params.fogDensity;\n                #else\n                    float _fogDensity = 1.0f;\n                #endif\n                #ifdef Params.fogColor\n                    vec4 _fogColor = Params.fogColor;\n                #else\n                    vec4 _fogColor = vec4(1.0f);\n                #endif\n\n                // 可以简单的将视锥范围作为雾化过渡范围，如下：\n                // 此时，越靠近相机，dis越接近0，fog越接近1.0f，最终混合下Context.OutColor越清晰，远离相机时，dis小于0，fog逐渐变小，最终混合下_fogColor逐渐清晰\n                // 但是这种雾化计算dis在一个很小的非线性范围内变化\n                // float dis = (0.5f * depth + 0.5f);\n                // 所以这里变化到线性深度范围(假设near恒定为1.0)\n                float dis = 2.0f / (_fogDistance + 1.0f - depth * (_fogDistance - 1.0f));\n\n                // 一个经典的浓度过渡方程\n                float fog = exp2(-_fogDensity * _fogDensity * dis * dis * LOG2);\n                // 雾化规范到(0.0f,1.0f)\n                fog = clamp(fog, 0.0f, 1.0f);\n\n                // 混合结果\n                Context.OutColor = mix(_fogColor, Context.OutColor, fog);\n            }\n        }\n    }\n    SubTechnology LinearFog{\n        Vars{\n            vec2 wUv0;\n        }\n        Vs_Shader{\n            void main(){\n                Context.OutPosition = vec4(Context.InPosition, 1.0f);\n                wUv0 = Context.InUv0;\n            }\n        }\n        Fs_Shader{\n            const float LOG2 = 1.442695f;\n            void main(){\n                Context.OutColor = texture(Context.InScreen, wUv0);\n                float depth = texture(Context.InDepth, wUv0).r;\n\n                #ifdef Params.vNear\n                    float _vNear = Params.vNear;\n                #else\n                    float _vNear = 0.1f;\n                #endif\n                #ifdef Params.vFar\n                    float _vFar = Params.vFar;\n                #else\n                    float _vFar = 1000.0f;\n                #endif\n                #ifdef Params.fogNear\n                    float _fogNear = Params.fogNear;\n                #else\n                    float _fogNear = 1.0f;\n                #endif\n                #ifdef Params.fogFar\n                    float _fogFar = Params.fogFar;\n                #else\n                    float _fogFar = 1000.0f;\n                #endif\n                #ifdef Params.fogColor\n                    vec4 _fogColor = Params.fogColor;\n                #else\n                    vec4 _fogColor = vec4(1.0f);\n                #endif\n\n\n                // 线性雾化相对来说比较简单,仅考虑指定near,far内的过渡\n                float dis = (2.0f * _vNear) / (_vFar + _vNear - depth * (_vFar - _vNear));\n\n                // 雾化规范到(0.0f,1.0f)\n                float fog = smoothstep(_fogNear, _fogFar, dis * (_vFar - _vNear));\n\n                // 混合结果\n                Context.OutColor = mix(Context.OutColor, _fogColor, fog);\n            }\n        }\n    }\n    Technology{\n        Sub_Pass PostFilter{\n            Pass Fog{\n            }\n        }\n    }\n    Technology LinearFog{\n\n        Sub_Pass PostFilter{\n            Pass LinearFog{\n            }\n        }\n    }\n}\n";static S_PICTURE_DEF_DATA="// 颜色材质,提供指定颜色或颜色纹理并渲染\nDef PictureDef{\n    Params{\n        vec4 color;\n        sampler2D colorMap;\n        float alphaDiscard;\n    }\n    SubTechnology DefaultPass{\n        Vars{\n            vec2 uv0;\n        }\n        Vs_Shader{\n            void main(){\n                Context.OutPosition = Context.ModelMatrix * vec4(Context.InPosition, 1.0f);\n                uv0 = Context.InUv0;\n            }\n        }\n        Fs_Shader{\n            void main(){\n                // 使用自定义颜色输出\n                #ifdef Params.color\n                    Context.OutColor = Params.color;\n                #else\n                    // 使用纹理\n                    #ifdef Params.colorMap\n                        Context.OutColor = texture(Params.colorMap, uv0);\n                        #ifdef Params.alphaDiscard\n                            if(Context.OutColor.a < Params.alphaDiscard){\n                                discard;\n                            }\n                        #endif\n                    #else\n                        Context.OutColor = vec4(1.0f, 1.0f, 1.0f, 1.0f);\n                    #endif\n                #endif\n            }\n        }\n    }\n    Technology{\n        Sub_Pass{\n            Pass DefaultPass{\n            }\n        }\n    }\n}\n";static S_GAMMA_CORRECTION_DEF_DATA="// gamma矫正\n// 由于webGL不支持硬件gamma矫正,只能通过后处理进行\nDef GammaCorrectionFilterDef{\n    Params{\n        float gammaFactor;\n        bool toneMapping;\n    }\n    SubTechnology GammaCorrectionFilter{\n        Vars{\n            vec2 uv0;\n        }\n        Vs_Shader{\n            void main(){\n                Context.OutPosition = vec4(Context.InPosition, 1.0f);\n                uv0 = Context.InUv0;\n            }\n        }\n        Fs_Shader{\n            void main(){\n                Context.OutColor = texture(Context.InScreen, uv0);\n                #ifdef Params.toneMapping\n                    if(Params.toneMapping){\n                        Context.OutColor.rgb = Context.OutColor.rgb / (Context.OutColor.rgb + vec3(1.0f));\n                    }\n                #endif\n                #ifdef Params.gammaFactor\n                    Context.OutColor.rgb = pow(Context.OutColor.rgb, vec3(Params.gammaFactor));\n                #endif\n            }\n        }\n    }\n    Technology{\n        Sub_Pass PostFilter{\n            Pass GammaCorrectionFilter{\n            }\n        }\n    }\n}\n";static S_DEFAULT_OUT_COLOR_DEF_DATA="// 输出颜色缓冲材质\nDef DefaultOutColorDef{\n    Params{\n        float gammaFactor;\n        bool toneMapping;\n    }\n    SubTechnology DefaultOutColor{\n        Vars{\n            vec2 uv0;\n        }\n        Vs_Shader{\n            void main(){\n                Context.OutPosition = vec4(Context.InPosition, 1.0f);\n                uv0 = Context.InUv0;\n            }\n        }\n        Fs_Shader{\n            void main(){\n                Context.OutColor = texture(Context.InForwardColorMap, uv0);\n                #ifdef Params.toneMapping\n                    if(Params.toneMapping){\n                        Context.OutColor.rgb = Context.OutColor.rgb / (Context.OutColor.rgb + vec3(1.0f));\n                    }\n                #endif\n                #ifdef Params.gammaFactor\n                    Context.OutColor.rgb = pow(Context.OutColor.rgb, vec3(Params.gammaFactor));\n                #endif\n            }\n        }\n    }\n    Technology{\n        Sub_Pass{\n            Pass DefaultOutColor{\n            }\n        }\n    }\n}\n";static S_DEFAULT_SKY_BOX_DEF="// 天空盒材质定义\nDef SkyBoxDef{\n    Params{\n        // 启用cubeMap通道\n        bool useCubeMap;\n        // 启用envMap通道\n        bool useEnvMap;\n        // 启用高动态映射\n        bool useHDR;\n        samplerCube cubeMap;\n        sampler2D envMap;\n    }\n    SubTechnology SkyBox{\n        Vars{\n            vec3 wPosition;\n        }\n        Vs_Shader{\n            void main(){\n                wPosition = Context.InPosition;\n                // 只需要旋转部分\n                vec4 pos = Context.ViewMatrix * vec4(Context.InPosition, 0.0f);\n                // 应用投影变换\n                pos.w = 1.0f;\n                pos = Context.ProjectMatrix * pos;\n                Context.OutPosition = pos.xyww;\n            }\n        }\n        Fs_Shader{\n            vec2 Optics_SphereCoord(in vec3 dir){\n                float dzplus1 = dir.z + 1.0f;\n\n                // 计算 1/2p\n                // NOTE: 仅当dir归一化时，此简化才有效。\n                float inv_two_p = 1.414f * sqrt(dzplus1);\n                //float inv_two_p = sqrt(dir.x * dir.x + dir.y * dir.y + dzplus1 * dzplus1);\n                inv_two_p *= 2.0f;\n                inv_two_p = 1.0f / inv_two_p;\n\n                // 计算texcoord\n                return (dir.xy * vec2(inv_two_p)) + vec2(0.5f);\n            }\n            const vec2 invAtan = vec2(0.159154943091895f, 0.318309886183790f);\n            #define PI 3.14159265358979323846264\n            // 转换环境纹理映射纹理坐标\n            vec2 fractTexcoord(const in vec3 v)\n            {\n                vec2 uv = vec2(atan(v.z, v.x) + PI, acos(v.y));\n                uv *= invAtan;\n                return uv;\n            }\n            void main(){\n                #ifdef Params.useCubeMap\n                    // 立方体纹理\n                    Context.OutColor = texture( Params.cubeMap, normalize( wPosition ) );\n                #else\n                    #ifdef Params.useEnvMap\n                        // 环境纹理\n                        vec2 uv = fractTexcoord( normalize( wPosition ) );\n                        #ifdef Params.useHDR\n                            // 解码hdr数据,也可以使用硬件RGB9_E5\n                            vec4 rgbe = texture( Params.envMap, uv );\n                            //rgbe.rgb *= pow(2.0f,rgbe.a*255.0f-128.0f);\n                            // 色调映射(后续在后处理统一进行)\n                            //rgbe.rgb = rgbe.rgb / (rgbe.rgb + vec3(1.0f));\n                            // 伽马(后续在后处理统一进行)\n                            //rgbe.rgb = pow(rgbe.rgb, vec3(1.0f / 2.2f));\n                            Context.OutColor.rgb = rgbe.rgb;\n                            Context.OutColor.a = 1.0f;\n                        #else\n                            Context.OutColor = texture( Params.envMap, uv );\n                        #endif\n                    #endif\n                #endif\n            }\n        }\n    }\n    Technology{\n        Sub_Pass{\n            Pass SkyBox{\n            }\n        }\n    }\n}\n";static S_PREFILTER_DEF="// 预过滤EnvMap\nDef PrefilterDef{\n    Params{\n        float roughness;\n        float resolution;\n        samplerCube envMap;\n    }\n    SubTechnology Prefilter{\n        Vars{\n            vec3 wPosition;\n        }\n        Vs_Shader{\n            void main(){\n                wPosition = Context.InPosition;\n                // 只需要旋转部分\n                vec4 pos = Context.ViewMatrix * vec4(Context.InPosition, 0.0f);\n                // 应用投影变换\n                pos.w = 1.0f;\n                pos = Context.ProjectMatrix * pos;\n                Context.OutPosition = pos.xyww;\n            }\n        }\n\n        Fs_Shader{\n            const float PI = 3.14159265359f;\n            // ----------------------------------------------------------------------------\n            float DistributionGGX(vec3 N, vec3 H, float roughness)\n            {\n                float a = roughness*roughness;\n                float a2 = a*a;\n                float NdotH = max(dot(N, H), 0.0f);\n                float NdotH2 = NdotH*NdotH;\n\n                float nom   = a2;\n                float denom = (NdotH2 * (a2 - 1.0f) + 1.0f);\n                denom = PI * denom * denom;\n\n                return nom / denom;\n            }\n            // ----------------------------------------------------------------------------\n            // http://holger.dammertz.org/stuff/notes_HammersleyOnHemisphere.html\n            // 高效的VanDerCorpus计算。\n            float RadicalInverse_VdC(uint bits)\n            {\n                 bits = (bits << 16u) | (bits >> 16u);\n                 bits = ((bits & 0x55555555u) << 1u) | ((bits & 0xAAAAAAAAu) >> 1u);\n                 bits = ((bits & 0x33333333u) << 2u) | ((bits & 0xCCCCCCCCu) >> 2u);\n                 bits = ((bits & 0x0F0F0F0Fu) << 4u) | ((bits & 0xF0F0F0F0u) >> 4u);\n                 bits = ((bits & 0x00FF00FFu) << 8u) | ((bits & 0xFF00FF00u) >> 8u);\n                 return float(bits) * 2.3283064365386963e-10; // / 0x100000000\n            }\n            // ----------------------------------------------------------------------------\n            vec2 Hammersley(uint i, uint N)\n            {\n                return vec2(float(i)/float(N), RadicalInverse_VdC(i));\n            }\n            // ----------------------------------------------------------------------------\n            vec3 ImportanceSampleGGX(vec2 Xi, vec3 N, float roughness)\n            {\n                float a = roughness*roughness;\n\n                float phi = 2.0f * PI * Xi.x;\n                float cosTheta = sqrt((1.0 - Xi.y) / (1.0f + (a*a - 1.0f) * Xi.y));\n                float sinTheta = sqrt(1.0 - cosTheta*cosTheta);\n\n                // 从球坐标到笛卡尔坐标-半角向量\n                vec3 H;\n                H.x = cos(phi) * sinTheta;\n                H.y = sin(phi) * sinTheta;\n                H.z = cosTheta;\n\n                // 从切线空间H向量到世界空间样本向量\n                vec3 up          = abs(N.z) < 0.999 ? vec3(0.0f, 0.0f, 1.0f) : vec3(1.0f, 0.0f, 0.0f);\n                vec3 tangent   = normalize(cross(up, N));\n                vec3 bitangent = cross(N, tangent);\n\n                vec3 sampleVec = tangent * H.x + bitangent * H.y + N * H.z;\n                return normalize(sampleVec);\n            }\n            void main(){\n                vec3 N = normalize(wPosition);\n\n                // 做出简化的假设，即V等于R等于法线\n                vec3 R = N;\n                vec3 V = R;\n\n                const uint SAMPLE_COUNT = 1024u;\n                vec3 prefilteredColor = vec3(0.0f);\n                float totalWeight = 0.0f;\n\n                for(uint i = 0u; i < SAMPLE_COUNT; ++i)\n                {\n                    // 生成偏向首选对齐方向的采样矢量（重要性采样）。\n                    vec2 Xi = Hammersley(i, SAMPLE_COUNT);\n                    vec3 H = ImportanceSampleGGX(Xi, N, Params.roughness);\n                    vec3 L  = normalize(2.0 * dot(V, H) * H - V);\n\n                    float NdotL = max(dot(N, L), 0.0f);\n                    if(NdotL > 0.0)\n                    {\n                        // 基于粗糙度/ pdf从环境的mip级别采样\n                        float D   = DistributionGGX(N, H, Params.roughness);\n                        float NdotH = max(dot(N, H), 0.0f);\n                        float HdotV = max(dot(H, V), 0.0f);\n                        float pdf = D * NdotH / (4.0f * HdotV) + 0.0001f;\n\n                        float saTexel  = 4.0f * PI / (6.0f * Params.resolution * Params.resolution);\n                        float saSample = 1.0f / (float(SAMPLE_COUNT) * pdf + 0.0001f);\n\n                        float mipLevel = Params.roughness == 0.0f ? 0.0f : 0.5f * log2(saSample / saTexel);\n\n                        prefilteredColor += textureLod(Params.envMap, L, mipLevel).rgb * NdotL;\n                        totalWeight      += NdotL;\n                    }\n                }\n\n                prefilteredColor = prefilteredColor / totalWeight;\n\n                Context.OutColor = vec4(prefilteredColor, 1.0f);\n            }\n        }\n    }\n    Technology{\n        Sub_Pass{\n            Pass Prefilter{\n            }\n        }\n    }\n}\n";static S_ENV_CAPTURE_OUT_DEF="// 将环境捕捉数据渲染并查看\n// 同时,也支持将IBL作为SkyEnv进行场景环境渲染\nDef EnvCaptureOutDef{\n    Params{\n        samplerCube envCaptureMap;\n        float lod;\n    }\n    SubTechnology EnvCaptureOut{\n        Vars{\n            vec3 wPosition;\n        }\n        Vs_Shader{\n            void main(){\n                wPosition = Context.InPosition;\n                Context.OutPosition = Context.ProjectMatrix * Context.ViewMatrix * Context.ModelMatrix * vec4(Context.InPosition, 1.0f);\n            }\n        }\n        Fs_Shader{\n            void main(){\n                #ifdef Params.envCaptureMap\n                    #ifdef Params.lod\n                        Context.OutColor = textureLod(Params.envCaptureMap, normalize(wPosition), Params.lod);\n                    #else\n                        Context.OutColor = texture(Params.envCaptureMap, normalize(wPosition));\n                    #endif\n                #else\n                    Context.OutColor = vec4(1.0f);\n                #endif\n            }\n        }\n    }\n    SubTechnology EnvSkyOut{\n        Vars{\n            vec3 wPosition;\n        }\n        Vs_Shader{\n            void main(){\n                wPosition = Context.InPosition;\n                // 只需要旋转部分\n                vec4 pos = Context.ViewMatrix * vec4(Context.InPosition, 0.0f);\n                // 应用投影变换\n                pos.w = 1.0f;\n                pos = Context.ProjectMatrix * pos;\n                Context.OutPosition = pos.xyww;\n            }\n        }\n        Fs_Shader{\n            void main(){\n                #ifdef Params.envCaptureMap\n                    #ifdef Params.lod\n                        Context.OutColor = textureLod(Params.envCaptureMap, normalize(wPosition), Params.lod);\n                    #else\n                        Context.OutColor = texture(Params.envCaptureMap, normalize(wPosition));\n                    #endif\n                #else\n                    Context.OutColor = vec4(1.0f);\n                #endif\n            }\n        }\n    }\n    Technology{\n        Sub_Pass{\n            Pass EnvCaptureOut{\n            }\n        }\n    }\n    Technology EnvSky{\n        Sub_Pass{\n            Pass EnvSkyOut{\n            }\n        }\n    }\n}\n";static S_EMISSIVE_LIGHTING_DEF_DATA="// 自发光材质定义\nDef EmissiveLightingDef{\n    Params{\n        vec4 color;\n        sampler2D colorMap;\n        float alphaDiscard;\n\n        // 自发光\n        sampler2D emissiveMap;\n        vec4 emissive;\n        float emissivePower;\n        float emissiveIntensity;\n    }\n    SubTechnology EmissivePass{\n        Vars{\n            vec2 wUv0;\n        }\n        Vs_Shader{\n            void main(){\n                #ifdef Context.Skins\n                    mat4 skinMat =\n                            Context.InWeight0.x * Context.Joints[int(Context.InJoint0.x)] +\n                            Context.InWeight0.y * Context.Joints[int(Context.InJoint0.y)] +\n                            Context.InWeight0.z * Context.Joints[int(Context.InJoint0.z)] +\n                            Context.InWeight0.w * Context.Joints[int(Context.InJoint0.w)];\n                    // vec4 pos = Context.ModelMatrix * skinMat * vec4(Context.InPosition, 1.0f);\n                    vec4 pos = skinMat * vec4(Context.InPosition, 1.0f);\n                #else\n                    vec4 pos = Context.ModelMatrix * vec4(Context.InPosition, 1.0f);\n                #endif\n                wUv0 = Context.InUv0;\n                Context.OutPosition = Context.ProjectViewMatrix * pos;\n            }\n        }\n        Fs_Shader{\n            void main(){\n                // 使用自定义颜色输出\n                #ifdef Params.color\n                    Context.OutColor = Params.color;\n                #else\n                    // 使用纹理\n                    #ifdef Params.colorMap\n                        Context.OutColor = texture(Params.colorMap, wUv0);\n                        #ifdef Params.alphaDiscard\n                            if(Context.OutColor.a < Params.alphaDiscard){\n                                discard;\n                            }\n                        #endif\n                    #else\n                        Context.OutColor = vec4(1.0f, 1.0f, 1.0f, 1.0f);\n                    #endif\n                #endif\n                // 唯一shading阶段,在这里处理自发光或只shading一次的逻辑\n                // 因为使用默认渲染程序,所以默认就是执行一次该逻辑\n                #ifdef Params.emissive\n                    float _emissivePower = 3.0f;\n                    #ifdef Params.emissivePower\n                        _emissivePower = Params.emissivePower;\n                    #endif\n                    float _emissiveIntensity = 2.0f;\n                    #ifdef Params.emissiveIntensity\n                        _emissiveIntensity = Params.emissiveIntensity;\n                    #endif\n                    #ifdef Params.emissiveMap\n                        vec4 eMap = texture(Params.emissiveMap, wUv0);\n                        Context.OutColor.rgb += Params.emissive.rgb * eMap.rgb * pow(Params.emissive.a * eMap.a, _emissivePower) * _emissiveIntensity;\n                    #else\n                        Context.OutColor.rgb += Params.emissive.rgb * pow(Params.emissive.a, _emissivePower) * _emissiveIntensity;\n                    #endif\n                #else\n                    #ifdef Params.emissiveMap\n                        float _emissivePower = 3.0f;\n                        #ifdef Params.emissivePower\n                            _emissivePower = Params.emissivePower;\n                        #endif\n                        float _emissiveIntensity = 2.0f;\n                        #ifdef Params.emissiveIntensity\n                            _emisiveIntensity = Params.emissiveIntensity;\n                        #endif\n                        vec4 eMap = texture(Params.emissiveMap, wUv0);\n                        Context.OutColor.rgb += eMap.rgb * pow(eMap.a, _emissivePower) * _emissiveIntensity;\n                    #endif\n                #endif\n            }\n        }\n    }\n    Technology{\n        Sub_Pass{\n            Pass EmissivePass{\n            }\n        }\n    }\n}\n";static S_BASIC_LIGHTING_DEF_DATA="// 基础光照材质定义\nDef BasicLightingDef{\n    Params{\n        sampler2D diffuseMap;\n        sampler2D normalMap;\n        sampler2D specularMap;\n        vec4 ambientColor;\n        vec4 diffuseColor;\n        vec4 specularColor;\n        float shininess;\n        // lightMap或AO或OCC\n        sampler2D lightMap;\n        bool lightMapTexCoord;\n        // 完全透明剔除因子(0-1),低于该值的透明片段被完全剔除而不进行混合\n        float alphaDiscard;\n\n        // 自发光\n        sampler2D emissiveMap;\n        vec4 emissive;\n        float emissivePower;\n        float emissiveIntensity;\n    }\n    SubTechnology MultiPassBlinnPhongLighting{\n        Vars{\n            vec3 wNormal;\n            vec4 wTangent;\n            vec3 wPosition;\n            vec2 wUv0;\n            vec2 wUv1;\n            // 三种成分用于调和光照,可来自材质颜色的定义,也可以来自vertex_light\n            vec3 ambientSumAdjust;\n            vec4 diffuseSumAdjust;\n            vec3 specularSumAdjust;\n        }\n        Advanced{\n            RenderProgram MultiPassLighting;\n        }\n        Vs_Shader{\n            void main(){\n                #ifdef Context.Skins\n                    mat4 skinMat =\n                            Context.InWeight0.x * Context.Joints[int(Context.InJoint0.x)] +\n                            Context.InWeight0.y * Context.Joints[int(Context.InJoint0.y)] +\n                            Context.InWeight0.z * Context.Joints[int(Context.InJoint0.z)] +\n                            Context.InWeight0.w * Context.Joints[int(Context.InJoint0.w)];\n                    // vec4 pos = Context.ModelMatrix * skinMat * vec4(Context.InPosition, 1.0f);\n                    vec4 pos = skinMat * vec4(Context.InPosition, 1.0f);\n                #else\n                    vec4 pos = Context.ModelMatrix * vec4(Context.InPosition, 1.0f);\n                #endif\n\n\n                wPosition = pos.xyz;\n                mat3 nMat = mat3(transpose(inverse(Context.ModelMatrix)));\n                vec3 norm = normalize(nMat * Context.InNormal);\n                wTangent = vec4(normalize(nMat * Context.InTangent.xyz), Context.InTangent.w);\n                //t = normalize(t - dot(t, norm) * norm);\n                //vec3 b = cross(norm, t);\n                //tbnMat = mat3(t, b, norm);\n                wNormal = norm;\n                wUv0 = Context.InUv0;\n\n                // lightMap/AO/OCC\n                #ifdef Params.lightMapTexCoord\n                    wUv1 = Context.InUv1;\n                #endif\n\n\n                // 如果是顶点光照,则在这里将光源变化到切线空间\n                ambientSumAdjust = Params.ambientColor.rgb * Context.AmbientLightColor;\n                diffuseSumAdjust = vec4(1.0f);\n                specularSumAdjust = vec3(1.0f);\n                Context.OutPosition = Context.ProjectViewMatrix * pos;\n            }\n        }\n        Fs_Shader{\n            // 计算光照方向\n            // 对于DirLight,PointLight以及SpotLight,lightType依次为0.0,1.0,2.0\n            // 输出光照方向\n            // lightDir.w存储衰减率(对于DirLight,衰减值一直为1,对于Point或Spot,衰减值随着半径而变小,衰减值越小,表示衰减度越大)\n            void ComputeLightDir(in vec3 worldPos, in float lightType, in vec4 position, out vec4 lightDir, out vec3 lightVec){\n                // 只有lightType = 0.0时,posLight为0.0,否则posLight为1.0\n                float posLight = step(0.5f, lightType);\n\n                // 计算光照位置\n                // 对于DirLight,lightVec = position.xyz * sign(-0.5f) = position.xyz * -1.0f;其中position代表DirLight的方向\n                // 对于PointLight和SpotLight,lightVec = position.xyz * sign(1.0f - 0.5f) - (worldPos * 1.0f) = positions.xyz * 1.0f - worldPos;其中position代表Light的位置\n                lightVec = position.xyz * sign(posLight - 0.5f) - (worldPos * posLight);\n                float dist = length(lightVec);\n\n                // 对于DirLight,lightDir.w = 1.0f\n                //lightDir.w = clamp(1.0f - position.w * dist * posLight, 0.0f, 1.0f);\n\n                lightDir.w = (1.0f - position.w * dist) / (1.0f + position.w * dist * dist);\n                lightDir.w = clamp(lightDir.w, 1.0f - posLight, 1.0f);\n\n                // 归一化\n                lightDir.xyz = lightVec / vec3(dist);\n            }\n            // 基于BlinnPhong光照模型计算光照因子\n            // brdf.x保存漫反射部分;brdf.y保存镜面反射部分\n            void ComputeLighting(in vec3 normal, in vec3 viewDir, in vec3 lightDir, in float attenuation, in float shininess, out vec2 brdf){\n                // diffuse部分\n                float diffuseBRDF = max(0.0f, dot(normal, lightDir));\n                // specular部分\n                // 半角向量代替viewDir参与光照计算\n                vec3 H = normalize(viewDir + lightDir);\n                float HdotN = max(0.0f, dot(H, normal));\n                float specularBRDF = pow( HdotN, shininess );\n\n                // 衰减,对于PointLight和SpotLight来说有效,对于DirLight而言,attenuation一直为1\n                brdf.x = diffuseBRDF * attenuation;\n                brdf.y = specularBRDF * attenuation;\n            }\n            // 返回Spot范围衰减\n            float ComputeSpotFalloff(in vec4 spotDirection, in vec3 lightDir){\n                float curAngleCos = dot(lightDir, -spotDirection.xyz);\n                float innerAngleCos = floor(spotDirection.w) * 0.001f;\n                float outerAngleCos = fract(spotDirection.w);\n                float innerMinusOuter = innerAngleCos - outerAngleCos;\n\n                #ifndef Context.Srgb\n                    // 使用二次衰减（请注意^ 4）\n                    return pow(clamp((curAngleCos - outerAngleCos) / innerMinusOuter, 0.0f, 1.0f), 4.0f);\n                #else\n                    // 线性空间衰减\n                    return clamp((curAngleCos - outerAngleCos) / innerMinusOuter, step(spotDirection.w, 0.001f), 1.0f);\n                #endif\n            }\n            void main(){\n                // 计算光照\n                vec4 lightColor;\n                vec4 lightData1;\n                vec4 lightDir = vec4(0.0f);\n                vec3 lightVec = vec3(0.0f);\n                vec2 lightBRDF = vec2(0.0f);\n                vec3 viewDir = normalize(Context.CameraPosition.xyz - wPosition.xyz);\n\n                vec4 _diffuseColor = vec4(1.0f);\n                vec4 _specularColor = vec4(1.0f);\n\n                #ifdef Params.diffuseColor\n                    _diffuseColor = Params.diffuseColor;\n                #endif\n                #ifdef Params.diffuseMap\n                    _diffuseColor = _diffuseColor * texture(Params.diffuseMap, wUv0);\n                    #ifdef Params.alphaDiscard\n                        // discard性能比较差,建议还是使用半透明渲染比较合适s\n                        if(_diffuseColor.a < Params.alphaDiscard){\n                            discard;\n                        }\n                    #endif\n                #endif\n\n                #ifdef Params.specularColor\n                    _specularColor = Params.specularColor;\n                #endif\n                #ifdef Params.specularMap\n                    _specularColor = _specularColor * texture(Params.specularMap, wUv0);\n                #endif\n\n                vec3 normal = normalize( wNormal );\n                #ifdef Params.normalMap\n                    vec3 normalHeight = texture(Params.normalMap, wUv0).xyz;\n                    vec3 tangent = normalize(wTangent.xyz);\n                    mat3 tbnMat = mat3(tangent, wTangent.w * cross(normal, tangent), normal);\n                    normal = normalize(tbnMat * ( normalHeight * 2.0f - 1.0f ));\n                #endif\n\n                float _shininess = 32.0;\n                #ifdef Params.shininess\n                    _shininess = Params.shininess;\n                #endif\n\n                // lightMap/AO/OCC\n                #ifdef Params.lightMap\n                    #ifdef Params.lightMapTexCoord\n                        vec3 lightMapColor = texture(Params.lightMap, wUv1).rgb;\n                    #else\n                        vec3 lightMapColor = texture(Params.lightMap, wUv0).rgb;\n                    #endif\n                    _specularColor.rgb *= lightMapColor;\n                    _diffuseColor.rgb  *= lightMapColor;\n                #endif\n\n\n                Context.OutColor.rgb = _diffuseColor.rgb * ambientSumAdjust;\n\n\n                // 不必担心这个分支，不会影响性能\n                if(Context.MultiId == 0){\n                    for( int i = 0;i < Context.CurLightCount;i+=3 ){\n                        // 后期改为Context.GetLightDir(Context.LightData[i]);\n                        lightColor = Context.WLightData[i];\n                        lightData1 = Context.WLightData[i + 1];\n                        ComputeLightDir(wPosition, lightColor.w, lightData1, lightDir, lightVec);\n                        //lightBRDF.x = max( 0.0f, dot( normal, lightDir.xyz ) );\n\n                        // BlinnPhongLighting\n                        //vec3 h = normalize( viewDir + lightDir.xzy );\n                        //lightBRDF.y = pow( max( 0.0f, dot( normal, h ) ), 32.0f );\n                        // 标准PhongLighting\n                        //vec3 refDir = reflect( lightData1.xyz, normal );\n                        //lightBRDF.y = pow( max( 0.0f, dot( viewDir, refDir ) ), 32.0f);\n\n                        // 计算SpotLight的衰减\n                        float spotFallOff = 1.0;\n                        if( lightColor.w > 1.0f )\n                        {\n                            // 计算SpotLight的范围衰减\n                            spotFallOff = ComputeSpotFalloff( Context.WLightData[i + 2], lightDir.xyz );\n                        }\n\n                        // 如果存在法线纹理,则进一步计算lightDir\n\n                        // 计算反射率\n                        ComputeLighting(normal, viewDir, lightDir.xyz, lightDir.w * spotFallOff, _shininess, lightBRDF);\n\n                        // 最终光照值\n                        //Context.OutColor.rgb += lightColor.rgb * (vec3(lightBRDF.x) * _diffuseColor.rgb * diffuseSumAdjust.rgb + vec3(lightBRDF.y) * _specularColor.rgb * specularSumAdjust.rgb);\n                        Context.OutColor.rgb += lightColor.rgb * ( _diffuseColor.rgb * diffuseSumAdjust.rgb * vec3( lightBRDF.x ) + _specularColor.rgb * specularSumAdjust.rgb * vec3( lightBRDF.y ));\n                        //Context.OutColor.rgb = vec3(spotFallOff);\n                    }\n                }\n                else{\n                    // point和spot\n                    vec4 lightColor = Context.WLight_Data_0;\n                    vec4 lightData1 = Context.WLight_Data_1;\n                    ComputeLightDir(wPosition, lightColor.w, lightData1, lightDir, lightVec);\n                    //lightBRDF.x = max( 0.0f, dot( normal, lightDir.xyz ) );\n\n                    // BlinnPhongLighting\n                    //vec3 h = normalize( viewDir + lightDir.xzy );\n                    //lightBRDF.y = pow( max( 0.0f, dot( normal, h ) ), 32.0f );\n                    // 标准PhongLighting\n                    //vec3 refDir = reflect( lightData1.xyz, normal );\n                    //lightBRDF.y = pow( max( 0.0f, dot( viewDir, refDir ) ), 32.0f);\n\n                    // 计算SpotLight的衰减\n                    float spotFallOff = 1.0;\n                    if( lightColor.w > 1.0f )\n                    {\n                        // 计算SpotLight的范围衰减\n                        spotFallOff = ComputeSpotFalloff( Context.WLight_Data_2, lightDir.xyz );\n                    }\n\n                    // 如果存在法线纹理,则进一步计算lightDir\n\n                    // 计算反射率\n                    ComputeLighting(normal, viewDir, lightDir.xyz, lightDir.w * spotFallOff, _shininess, lightBRDF);\n\n                    // 最终光照值\n                    //Context.OutColor.rgb += lightColor.rgb * (vec3(lightBRDF.x) * _diffuseColor.rgb * diffuseSumAdjust.rgb + vec3(lightBRDF.y) * _specularColor.rgb * specularSumAdjust.rgb);\n                    Context.OutColor.rgb += lightColor.rgb * ( _diffuseColor.rgb * diffuseSumAdjust.rgb * vec3( lightBRDF.x ) + _specularColor.rgb * specularSumAdjust.rgb * vec3( lightBRDF.y ));\n                }\n                Context.OutColor.a = diffuseSumAdjust.a * _diffuseColor.a;\n\n                // 唯一shading阶段,在这里处理自发光或只shading一次的逻辑\n                if(Context.UniqueShading){\n                    #ifdef Params.emissive\n                        float _emissivePower = 3.0f;\n                        #ifdef Params.emissivePower\n                            _emissivePower = Params.emissivePower;\n                        #endif\n                        float _emissiveIntensity = 2.0f;\n                        #ifdef Params.emissiveIntensity\n                            _emissiveIntensity = Params.emissiveIntensity;\n                        #endif\n                        #ifdef Params.emissiveMap\n                            vec4 eMap = texture(Params.emissiveMap, wUv0);\n                            Context.OutColor.rgb += Params.emissive.rgb * eMap.rgb * pow(Params.emissive.a * eMap.a, _emissivePower) * _emissiveIntensity;\n                        #else\n                            Context.OutColor.rgb += Params.emissive.rgb * pow(Params.emissive.a, _emissivePower) * _emissiveIntensity;\n                        #endif\n                    #else\n                        #ifdef Params.emissiveMap\n                            float _emissivePower = 3.0f;\n                            #ifdef Params.emissivePower\n                                _emissivePower = Params.emissivePower;\n                            #endif\n                            float _emissiveIntensity = 2.0f;\n                            #ifdef Params.emissiveIntensity\n                                _emisiveIntensity = Params.emissiveIntensity;\n                            #endif\n                            vec4 eMap = texture(Params.emissiveMap, wUv0);\n                            Context.OutColor.rgb += eMap.rgb * pow(eMap.a, _emissivePower) * _emissiveIntensity;\n                        #endif\n                    #endif\n                }\n            }\n        }\n    }\n\n    SubTechnology SingleBlinnPhongLighting{\n        Vars{\n            vec3 wNormal;\n            vec4 wTangent;\n            vec3 wPosition;\n            vec2 wUv0;\n            vec2 wUv1;\n            // 三种成分用于调和光照,可来自材质颜色的定义,也可以来自vertex_light\n            vec3 ambientSumAdjust;\n            vec4 diffuseSumAdjust;\n            vec3 specularSumAdjust;\n        }\n        Advanced{\n            RenderProgram SinglePassLighting;\n        }\n        Vs_Shader{\n            void main(){\n                #ifdef Context.Skins\n                    mat4 skinMat =\n                            Context.InWeight0.x * Context.Joints[int(Context.InJoint0.x)] +\n                            Context.InWeight0.y * Context.Joints[int(Context.InJoint0.y)] +\n                            Context.InWeight0.z * Context.Joints[int(Context.InJoint0.z)] +\n                            Context.InWeight0.w * Context.Joints[int(Context.InJoint0.w)];\n                    // vec4 pos = Context.ModelMatrix * skinMat * vec4(Context.InPosition, 1.0f);\n                    vec4 pos = skinMat * vec4(Context.InPosition, 1.0f);\n                #else\n                    vec4 pos = Context.ModelMatrix * vec4(Context.InPosition, 1.0f);\n                #endif\n\n\n                wPosition = pos.xyz;\n                mat3 nMat = mat3(transpose(inverse(Context.ModelMatrix)));\n                vec3 norm = normalize(nMat * Context.InNormal);\n                wTangent = vec4(normalize(nMat * Context.InTangent.xyz), Context.InTangent.w);\n                //t = normalize(t - dot(t, norm) * norm);\n                //vec3 b = cross(norm, t);\n                //tbnMat = mat3(t, b, norm);\n                wNormal = norm;\n                wUv0 = Context.InUv0;\n\n                // lightMap/AO/OCC\n                #ifdef Params.lightMapTexCoord\n                    wUv1 = Context.InUv1;\n                #endif\n\n\n                // 如果是顶点光照,则在这里将光源变化到切线空间\n                ambientSumAdjust = Params.ambientColor.rgb * Context.AmbientLightColor;\n                diffuseSumAdjust = vec4(1.0f);\n                specularSumAdjust = vec3(1.0f);\n                Context.OutPosition = Context.ProjectViewMatrix * pos;\n            }\n        }\n        Fs_Shader{\n            // 计算光照方向\n            // 对于DirLight,PointLight以及SpotLight,lightType依次为0.0,1.0,2.0\n            // 输出光照方向\n            // lightDir.w存储衰减率(对于DirLight,衰减值一直为1,对于Point或Spot,衰减值随着半径而变小,衰减值越小,表示衰减度越大)\n            void ComputeLightDir(in vec3 worldPos, in float lightType, in vec4 position, out vec4 lightDir, out vec3 lightVec){\n                // 只有lightType = 0.0时,posLight为0.0,否则posLight为1.0\n                float posLight = step(0.5f, lightType);\n\n                // 计算光照位置\n                // 对于DirLight,lightVec = position.xyz * sign(-0.5f) = position.xyz * -1.0f;其中position代表DirLight的方向\n                // 对于PointLight和SpotLight,lightVec = position.xyz * sign(1.0f - 0.5f) - (worldPos * 1.0f) = positions.xyz * 1.0f - worldPos;其中position代表Light的位置\n                lightVec = position.xyz * sign(posLight - 0.5f) - (worldPos * posLight);\n                float dist = length(lightVec);\n\n                // 对于DirLight,lightDir.w = 1.0f\n                //lightDir.w = clamp(1.0f - position.w * dist * posLight, 0.0f, 1.0f);\n\n                lightDir.w = (1.0f - position.w * dist) / (1.0f + position.w * dist * dist);\n                lightDir.w = clamp(lightDir.w, 1.0f - posLight, 1.0f);\n\n                // 归一化\n                lightDir.xyz = lightVec / vec3(dist);\n            }\n            // 基于BlinnPhong光照模型计算光照因子\n            // brdf.x保存漫反射部分;brdf.y保存镜面反射部分\n            void ComputeLighting(in vec3 normal, in vec3 viewDir, in vec3 lightDir, in float attenuation, in float shininess, out vec2 brdf){\n                // diffuse部分\n                float diffuseBRDF = max(0.0f, dot(normal, lightDir));\n                // specular部分\n                // 半角向量代替viewDir参与光照计算\n                vec3 H = normalize(viewDir + lightDir);\n                float HdotN = max(0.0f, dot(H, normal));\n                float specularBRDF = pow( HdotN, shininess );\n\n                // 衰减,对于PointLight和SpotLight来说有效,对于DirLight而言,attenuation一直为1\n                brdf.x = diffuseBRDF * attenuation;\n                brdf.y = specularBRDF * attenuation;\n            }\n            // 返回Spot范围衰减\n            float ComputeSpotFalloff(in vec4 spotDirection, in vec3 lightDir){\n                float curAngleCos = dot(lightDir, -spotDirection.xyz);\n                float innerAngleCos = floor(spotDirection.w) * 0.001f;\n                float outerAngleCos = fract(spotDirection.w);\n                float innerMinusOuter = innerAngleCos - outerAngleCos;\n                float falloff = clamp((curAngleCos - outerAngleCos) / innerMinusOuter, 0.0f, 1.0f);\n                //if(curAngleCos > innerMinusOuter)\n                //    falloff = 1.0f;\n                //else\n                //    falloff = 0.0f;\n\n                #ifdef SRGB\n                    // Use quadratic falloff (notice the ^4)\n                    return pow(clamp((curAngleCos - outerAngleCos) / innerMinusOuter, 0.0, 1.0), 4.0);\n                #else\n                    // Use linear falloff\n                    return falloff;\n                #endif\n            }\n            void main(){\n                // 计算光照\n                vec4 lightColor;\n                vec4 lightData1;\n                vec4 lightDir = vec4(0.0f);\n                vec3 lightVec = vec3(0.0f);\n                vec2 lightBRDF = vec2(0.0f);\n                vec3 viewDir = normalize(Context.CameraPosition.xyz - wPosition.xyz);\n\n                vec4 _diffuseColor = vec4(1.0f);\n                vec4 _specularColor = vec4(1.0f);\n\n                #ifdef Params.diffuseColor\n                    _diffuseColor = Params.diffuseColor;\n                #endif\n                #ifdef Params.diffuseMap\n                    _diffuseColor = _diffuseColor * texture(Params.diffuseMap, wUv0);\n                    #ifdef Params.alphaDiscard\n                        // discard性能比较差,建议还是使用半透明渲染比较合适s\n                        if(_diffuseColor.a < Params.alphaDiscard){\n                            discard;\n                        }\n                    #endif\n                #endif\n\n                #ifdef Params.specularColor\n                    _specularColor = Params.specularColor;\n                #endif\n                #ifdef Params.specularMap\n                    _specularColor = _specularColor * texture(Params.specularMap, wUv0);\n                #endif\n\n                vec3 normal = normalize( wNormal );\n                #ifdef Params.normalMap\n                    vec3 normalHeight = texture(Params.normalMap, wUv0).xyz;\n                    vec3 tangent = normalize(wTangent.xyz);\n                    mat3 tbnMat = mat3(tangent, wTangent.w * cross(normal, tangent), normal);\n                    normal = normalize(tbnMat * ( normalHeight * 2.0f - 1.0f ));\n                #endif\n\n                float _shininess = 32.0;\n                #ifdef Params.shininess\n                    _shininess = Params.shininess;\n                #endif\n\n                // lightMap/AO/OCC\n                #ifdef Params.lightMap\n                    #ifdef Params.lightMapTexCoord\n                        vec3 lightMapColor = texture(Params.lightMap, wUv1).rgb;\n                    #else\n                        vec3 lightMapColor = texture(Params.lightMap, wUv0).rgb;\n                    #endif\n                    _specularColor.rgb *= lightMapColor;\n                    _diffuseColor.rgb  *= lightMapColor;\n                #endif\n\n\n                Context.OutColor.rgb = _diffuseColor.rgb * ambientSumAdjust;\n                for( int i = 0;i < Context.CurLightCount;i+=3 ){\n                    // 后期改为Context.GetLightDir(Context.LightData[i]);\n                    lightColor = Context.WLightData[i];\n                    lightData1 = Context.WLightData[i + 1];\n                    ComputeLightDir(wPosition, lightColor.w, lightData1, lightDir, lightVec);\n                    //lightBRDF.x = max( 0.0f, dot( normal, lightDir.xyz ) );\n\n                    // BlinnPhongLighting\n                    //vec3 h = normalize( viewDir + lightDir.xzy );\n                    //lightBRDF.y = pow( max( 0.0f, dot( normal, h ) ), 32.0f );\n                    // 标准PhongLighting\n                    //vec3 refDir = reflect( lightData1.xyz, normal );\n                    //lightBRDF.y = pow( max( 0.0f, dot( viewDir, refDir ) ), 32.0f);\n\n                    // 计算SpotLight的衰减\n                    float spotFallOff = 1.0;\n                    if( lightColor.w > 1.0f )\n                    {\n                        // 计算SpotLight的范围衰减\n                        spotFallOff = ComputeSpotFalloff( Context.WLightData[i + 2], lightDir.xyz );\n                    }\n\n                    // 如果存在法线纹理,则进一步计算lightDir\n\n                    // 计算反射率\n                    ComputeLighting(normal, viewDir, lightDir.xyz, lightDir.w * spotFallOff, _shininess, lightBRDF);\n\n                    // 最终光照值\n                    //Context.OutColor.rgb += lightColor.rgb * (vec3(lightBRDF.x) * _diffuseColor.rgb * diffuseSumAdjust.rgb + vec3(lightBRDF.y) * _specularColor.rgb * specularSumAdjust.rgb);\n                    Context.OutColor.rgb += lightColor.rgb * ( _diffuseColor.rgb * diffuseSumAdjust.rgb * vec3( lightBRDF.x ) + _specularColor.rgb * specularSumAdjust.rgb * vec3( lightBRDF.y ));\n                    //Context.OutColor.rgb = vec3(spotFallOff);\n                }\n                Context.OutColor.a = diffuseSumAdjust.a * _diffuseColor.a;\n\n                // 唯一shading阶段,在这里处理自发光或只shading一次的逻辑\n                if(Context.UniqueShading){\n                    #ifdef Params.emissive\n                        float _emissivePower = 3.0f;\n                        #ifdef Params.emissivePower\n                            _emissivePower = Params.emissivePower;\n                        #endif\n                        float _emissiveIntensity = 2.0f;\n                        #ifdef Params.emissiveIntensity\n                            _emissiveIntensity = Params.emissiveIntensity;\n                        #endif\n                        #ifdef Params.emissiveMap\n                            vec4 eMap = texture(Params.emissiveMap, wUv0);\n                            Context.OutColor.rgb += Params.emissive.rgb * eMap.rgb * pow(Params.emissive.a * eMap.a, _emissivePower) * _emissiveIntensity;\n                        #else\n                            Context.OutColor.rgb += Params.emissive.rgb * pow(Params.emissive.a, _emissivePower) * _emissiveIntensity;\n                        #endif\n                    #else\n                        #ifdef Params.emissiveMap\n                            float _emissivePower = 3.0f;\n                            #ifdef Params.emissivePower\n                                _emissivePower = Params.emissivePower;\n                            #endif\n                            float _emissiveIntensity = 2.0f;\n                            #ifdef Params.emissiveIntensity\n                                _emisiveIntensity = Params.emissiveIntensity;\n                            #endif\n                            vec4 eMap = texture(Params.emissiveMap, wUv0);\n                            Context.OutColor.rgb += eMap.rgb * pow(eMap.a, _emissivePower) * _emissiveIntensity;\n                        #endif\n                    #endif\n                }\n            }\n        }\n    }\n\n    SubTechnology ColorSubTechnology{\n        Vs_Shader{\n            void main(){\n                Context.OutPosition = Context.ProjectViewMatrix * Context.ModelMatrix * vec4(Context.InPosition, 1.0f);\n            }\n        }\n        Fs_Shader{\n            void main(){\n                Context.OutColor = vec4(1.0f, 0.0f, 0.0f, 1.0f);\n            }\n        }\n    }\n    // 默认为SinglePass\n    Technology {\n        Sub_Pass Forward{\n            Pass SingleBlinnPhongLighting{\n            }\n        }\n    }\n    Technology MultiPass{\n        Sub_Pass Forward{\n            Pass MultiPassBlinnPhongLighting{\n            }\n        }\n    }\n    Technology Color{\n        Sub_Pass Forward{\n            Pass ColorSubTechnology{\n            }\n        }\n    }\n}\n";static S_DEFERRED_LIGHTING_DEF_DATA="// 默认的延迟光照材质定义\nDef DeferredLightingDef{\n    Params{\n        sampler2D diffuseMap;\n        sampler2D normalMap;\n        sampler2D specularMap;\n        sampler2D normalMap;\n        vec4 ambientColor;\n        vec4 diffuseColor;\n        vec4 specularColor;\n        float shininess;\n        // 完全透明剔除因子(0-1),低于该值的透明片段被完全剔除而不进行混合\n        float alphaDiscard;\n    }\n    SubTechnology GBufferPass{\n        Vars{\n            vec3 wNormal;\n            vec4 wTangent;\n            vec3 wPosition;\n            vec2 wUv0;\n            // 三种成分用于调和光照,可来自材质颜色的定义,也可以来自vertex_light\n            vec3 ambientSumAdjust;\n            vec4 diffuseSumAdjust;\n            vec3 specularSumAdjust;\n        }\n        Vs_Shader{\n            void main(){\n                #ifdef Context.Skins\n                    mat4 skinMat =\n                            Context.InWeight0.x * Context.Joints[int(Context.InJoint0.x)] +\n                            Context.InWeight0.y * Context.Joints[int(Context.InJoint0.y)] +\n                            Context.InWeight0.z * Context.Joints[int(Context.InJoint0.z)] +\n                            Context.InWeight0.w * Context.Joints[int(Context.InJoint0.w)];\n                    // vec4 pos = Context.ModelMatrix * skinMat * vec4(Context.InPosition, 1.0f);\n                    vec4 pos = skinMat * vec4(Context.InPosition, 1.0f);\n                #else\n                    vec4 pos = Context.ModelMatrix * vec4(Context.InPosition, 1.0f);\n                #endif\n\n\n                wPosition = pos.xyz;\n                mat3 nMat = mat3(transpose(inverse(Context.ModelMatrix)));\n                vec3 norm = normalize(nMat * Context.InNormal);\n                wTangent = vec4(normalize(nMat * Context.InTangent.xyz), Context.InTangent.w);\n                //t = normalize(t - dot(t, norm) * norm);\n                //vec3 b = cross(norm, t);\n                //tbnMat = mat3(t, b, norm);\n                wNormal = norm;\n                wUv0 = Context.InUv0;\n\n\n                // 如果是顶点光照,则在这里将光源变化到切线空间\n                ambientSumAdjust = Params.ambientColor.rgb;\n                diffuseSumAdjust = vec4(1.0f);\n                specularSumAdjust = vec3(1.0f);\n                Context.OutPosition = Context.ProjectViewMatrix * pos;\n            }\n        }\n        Fs_Shader{\n            void main(){\n\n                vec4 _diffuseColor = vec4(1.0f);\n                vec4 _specularColor = vec4(1.0f);\n\n                #ifdef Params.diffuseColor\n                    _diffuseColor = Params.diffuseColor;\n                #endif\n                #ifdef Params.diffuseMap\n                    _diffuseColor = _diffuseColor * texture(Params.diffuseMap, wUv0);\n                    #ifdef Params.alphaDiscard\n                        // discard性能比较差,建议还是使用半透明渲染比较合适s\n                        if(_diffuseColor.a < Params.alphaDiscard){\n                            discard;\n                        }\n                    #endif\n                #endif\n\n                #ifdef Params.specularColor\n                    _specularColor = Params.specularColor;\n                #endif\n                #ifdef Params.specularMap\n                    _specularColor = _specularColor * texture(Params.specularMap, wUv0);\n                #endif\n\n                vec3 normal = normalize( wNormal );\n                #ifdef Params.normalMap\n                    vec3 normalHeight = texture(Params.normalMap, wUv0).xyz;\n                    vec3 tangent = normalize(wTangent.xyz);\n                    mat3 tbnMat = mat3(tangent, wTangent.w * cross(normal, tangent), normal);\n                    normal = normalize(tbnMat * ( normalHeight * 2.0f - 1.0f ));\n                #endif\n\n                float _shininess = 32.0;\n                #ifdef Params.shininess\n                    _shininess = Params.shininess;\n                #endif\n\n\n\n\n                Context.OutGBuffer0.xyz = _diffuseColor.rgb * diffuseSumAdjust.rgb;\n                Context.OutGBuffer0.w   = diffuseSumAdjust.a * _diffuseColor.a * 0.1f + _shininess;\n                Context.OutGBuffer1.xyz = normal.xyz;\n                Context.OutGBuffer2.rgb = _specularColor.rgb * specularSumAdjust.rgb * 10.0f + ambientSumAdjust * 0.1f;\n                Context.OutGBuffer2.a = _shininess;\n            }\n        }\n    }\n    SubTechnology DeferredShadingPass{\n        Vars{\n            vec4 wordPosition;\n            vec2 uv0;\n            mat4 pvInverse;\n        }\n        Advanced{\n            RenderProgram SinglePassLighting;\n        }\n        Vs_Shader{\n            void main(){\n                Context.OutPosition = vec4(Context.InPosition, 1.0f);\n                wordPosition = Context.OutPosition;\n                uv0 = Context.InUv0;\n                pvInverse = inverse(Context.ProjectViewMatrix);\n            }\n        }\n        Fs_Shader{\n            vec3 getPosition(in float depth, in vec2 newTexCoord){\n\n                vec4 pos;\n                pos.xy = (newTexCoord * vec2(2.0)) - vec2(1.0);\n                pos.z  = depth * 2.0 - 1.0;\n                pos.w  = 1.0;\n                pos    = pvInverse * pos;\n                pos.xyz /= pos.w;\n                return pos.xyz;\n            }\n            // 计算光照方向\n            // 对于DirLight,PointLight以及SpotLight,lightType依次为0.0,1.0,2.0\n            // 输出光照方向\n            // lightDir.w存储衰减率(对于DirLight,衰减值一直为1,对于Point或Spot,衰减值随着半径而变小,衰减值越小,表示衰减度越大)\n            void ComputeLightDir(in vec3 worldPos, in float lightType, in vec4 position, out vec4 lightDir, out vec3 lightVec){\n                // 只有lightType = 0.0时,posLight为0.0,否则posLight为1.0\n                float posLight = step(0.5f, lightType);\n\n                // 计算光照位置\n                // 对于DirLight,lightVec = position.xyz * sign(-0.5f) = position.xyz * -1.0f;其中position代表DirLight的方向\n                // 对于PointLight和SpotLight,lightVec = position.xyz * sign(1.0f - 0.5f) - (worldPos * 1.0f) = positions.xyz * 1.0f - worldPos;其中position代表Light的位置\n                lightVec = position.xyz * sign(posLight - 0.5f) - (worldPos * posLight);\n                float dist = length(lightVec);\n\n                // 对于DirLight,lightDir.w = 1.0f\n                //lightDir.w = clamp(1.0f - position.w * dist * posLight, 0.0f, 1.0f);\n\n                lightDir.w = (1.0f - position.w * dist) / (1.0f + position.w * dist * dist);\n                lightDir.w = clamp(lightDir.w, 1.0f - posLight, 1.0f);\n\n                // 归一化\n                lightDir.xyz = lightVec / vec3(dist);\n            }\n            // 基于BlinnPhong光照模型计算光照因子\n            // brdf.x保存漫反射部分;brdf.y保存镜面反射部分\n            void ComputeLighting(in vec3 normal, in vec3 viewDir, in vec3 lightDir, in float attenuation, in float shininess, out vec2 brdf){\n                // diffuse部分\n                float diffuseBRDF = max(0.0f, dot(normal, lightDir));\n                // specular部分\n                // 半角向量代替viewDir参与光照计算\n                vec3 H = normalize(viewDir + lightDir);\n                float HdotN = max(0.0f, dot(H, normal));\n                float specularBRDF = pow( HdotN, shininess );\n\n                // 衰减,对于PointLight和SpotLight来说有效,对于DirLight而言,attenuation一直为1\n                brdf.x = diffuseBRDF * attenuation;\n                brdf.y = specularBRDF * attenuation;\n            }\n            // 返回Spot范围衰减\n            float ComputeSpotFalloff(in vec4 spotDirection, in vec3 lightDir){\n                float curAngleCos = dot(lightDir, -spotDirection.xyz);\n                float innerAngleCos = floor(spotDirection.w) * 0.001f;\n                float outerAngleCos = fract(spotDirection.w);\n                float innerMinusOuter = innerAngleCos - outerAngleCos;\n\n                #ifndef Context.Srgb\n                    // 使用二次衰减（请注意^ 4）\n                    return pow(clamp((curAngleCos - outerAngleCos) / innerMinusOuter, 0.0f, 1.0f), 4.0f);\n                #else\n                    // 线性空间衰减\n                    return clamp((curAngleCos - outerAngleCos) / innerMinusOuter, step(spotDirection.w, 0.001f), 1.0f);\n                #endif\n            }\n            void main(){\n                float depth = texture(Context.InGDepth, uv0).r;\n                if(depth >= 1.0){\n                    Context.OutColor = vec4(0.0f, 0.0f, 0.0f, 1.0f);\n                    return;\n                }\n                vec3 wPosition = getPosition(depth, uv0);\n                vec4 _diffuseColor = texture(Context.InGBuffer0, uv0);\n                vec4 _specularColorDecode = texture(Context.InGBuffer2, uv0);\n                vec3 _specularColor = floor(_specularColorDecode.rgb) * 0.1f;\n                vec3 _ambientColor = min(fract(_specularColorDecode.rgb) * 10.0f, vec3(1.0f));\n                float _shininess = floor(_diffuseColor.w);\n                float alpha     = min(fract(_diffuseColor.w) * 10.0f, 1.0f);\n                vec3 normal = texture(Context.InGBuffer1, uv0).xyz;\n                // 计算光照\n                vec4 lightColor;\n                vec4 lightData1;\n                vec4 lightDir = vec4(0.0f);\n                vec3 lightVec = vec3(0.0f);\n                vec2 lightBRDF = vec2(0.0f);\n                vec3 viewDir = normalize(Context.CameraPosition.xyz - wPosition.xyz);\n\n                Context.OutColor.rgb = _diffuseColor.rgb * Context.AmbientLightColor * _ambientColor;\n                for( int i = 0;i < Context.CurLightCount;i+=3 ){\n                    // 后期改为Context.GetLightDir(Context.LightData[i]);\n                    lightColor = Context.WLightData[i];\n                    lightData1 = Context.WLightData[i + 1];\n                    ComputeLightDir(wPosition, lightColor.w, lightData1, lightDir, lightVec);\n                    //lightBRDF.x = max( 0.0f, dot( normal, lightDir.xyz ) );\n\n                    // BlinnPhongLighting\n                    //vec3 h = normalize( viewDir + lightDir.xzy );\n                    //lightBRDF.y = pow( max( 0.0f, dot( normal, h ) ), 32.0f );\n                    // 标准PhongLighting\n                    //vec3 refDir = reflect( lightData1.xyz, normal );\n                    //lightBRDF.y = pow( max( 0.0f, dot( viewDir, refDir ) ), 32.0f);\n\n                    // 计算SpotLight的衰减\n                    float spotFallOff = 1.0;\n                    if( lightColor.w > 1.0f )\n                    {\n                        // 计算SpotLight的范围衰减\n                        spotFallOff = ComputeSpotFalloff( Context.WLightData[i + 2], lightDir.xyz );\n                    }\n\n                    // 如果存在法线纹理,则进一步计算lightDir\n\n                    // 计算反射率\n                    ComputeLighting(normal, viewDir, lightDir.xyz, lightDir.w * spotFallOff, _shininess, lightBRDF);\n\n                    // 最终光照值\n                    //Context.OutColor.rgb += lightColor.rgb * (vec3(lightBRDF.x) * _diffuseColor.rgb + vec3(lightBRDF.y) * _specularColor.rgb);\n                    Context.OutColor.rgb += lightColor.rgb * ( _diffuseColor.rgb * vec3( lightBRDF.x ) + _specularColor.rgb * vec3( lightBRDF.y ));\n                    //Context.OutColor.rgb = vec3(spotFallOff);\n                }\n                Context.OutColor.a = alpha;\n            }\n        }\n    }\n    SubTechnology DeferredShadingPass2{\n        Vars{\n            vec4 wordPosition;\n            vec2 uv0;\n            mat4 pvInverse;\n        }\n        Advanced{\n            RenderProgram MultiPassLighting;\n        }\n        Vs_Shader{\n            void main(){\n                Context.OutPosition = vec4(Context.InPosition, 1.0f);\n                wordPosition = Context.OutPosition;\n                uv0 = Context.InUv0;\n                pvInverse = inverse(Context.ProjectViewMatrix);\n            }\n        }\n        Fs_Shader{\n            vec3 getPosition(in float depth, in vec2 newTexCoord){\n\n                vec4 pos;\n                pos.xy = (newTexCoord * vec2(2.0)) - vec2(1.0);\n                pos.z  = depth * 2.0 - 1.0;\n                pos.w  = 1.0;\n                pos    = pvInverse * pos;\n                pos.xyz /= pos.w;\n                return pos.xyz;\n            }\n            // 计算光照方向\n            // 对于DirLight,PointLight以及SpotLight,lightType依次为0.0,1.0,2.0\n            // 输出光照方向\n            // lightDir.w存储衰减率(对于DirLight,衰减值一直为1,对于Point或Spot,衰减值随着半径而变小,衰减值越小,表示衰减度越大)\n            void ComputeLightDir(in vec3 worldPos, in float lightType, in vec4 position, out vec4 lightDir, out vec3 lightVec){\n                // 只有lightType = 0.0时,posLight为0.0,否则posLight为1.0\n                float posLight = step(0.5f, lightType);\n\n                // 计算光照位置\n                // 对于DirLight,lightVec = position.xyz * sign(-0.5f) = position.xyz * -1.0f;其中position代表DirLight的方向\n                // 对于PointLight和SpotLight,lightVec = position.xyz * sign(1.0f - 0.5f) - (worldPos * 1.0f) = positions.xyz * 1.0f - worldPos;其中position代表Light的位置\n                lightVec = position.xyz * sign(posLight - 0.5f) - (worldPos * posLight);\n                float dist = length(lightVec);\n\n                // 对于DirLight,lightDir.w = 1.0f\n                //lightDir.w = clamp(1.0f - position.w * dist * posLight, 0.0f, 1.0f);\n\n                lightDir.w = (1.0f - position.w * dist) / (1.0f + position.w * dist * dist);\n                lightDir.w = clamp(lightDir.w, 1.0f - posLight, 1.0f);\n\n                // 归一化\n                lightDir.xyz = lightVec / vec3(dist);\n            }\n            // 基于BlinnPhong光照模型计算光照因子\n            // brdf.x保存漫反射部分;brdf.y保存镜面反射部分\n            void ComputeLighting(in vec3 normal, in vec3 viewDir, in vec3 lightDir, in float attenuation, in float shininess, out vec2 brdf){\n                // diffuse部分\n                float diffuseBRDF = max(0.0f, dot(normal, lightDir));\n                // specular部分\n                // 半角向量代替viewDir参与光照计算\n                vec3 H = normalize(viewDir + lightDir);\n                float HdotN = max(0.0f, dot(H, normal));\n                float specularBRDF = pow( HdotN, shininess );\n\n                // 衰减,对于PointLight和SpotLight来说有效,对于DirLight而言,attenuation一直为1\n                brdf.x = diffuseBRDF * attenuation;\n                brdf.y = specularBRDF * attenuation;\n            }\n            // 返回Spot范围衰减\n            float ComputeSpotFalloff(in vec4 spotDirection, in vec3 lightDir){\n                float curAngleCos = dot(lightDir, -spotDirection.xyz);\n                float innerAngleCos = floor(spotDirection.w) * 0.001f;\n                float outerAngleCos = fract(spotDirection.w);\n                float innerMinusOuter = innerAngleCos - outerAngleCos;\n\n                #ifndef Context.Srgb\n                    // 使用二次衰减（请注意^ 4）\n                    return pow(clamp((curAngleCos - outerAngleCos) / innerMinusOuter, 0.0f, 1.0f), 4.0f);\n                #else\n                    // 线性空间衰减\n                    return clamp((curAngleCos - outerAngleCos) / innerMinusOuter, step(spotDirection.w, 0.001f), 1.0f);\n                #endif\n            }\n            void main(){\n                float depth = texture(Context.InGDepth, uv0).r;\n                if(depth >= 1.0){\n                    Context.OutColor = vec4(0.0f, 0.0f, 0.0f, 1.0f);\n                    return;\n                }\n                vec3 wPosition = getPosition(depth, uv0);\n                vec4 _diffuseColor = texture(Context.InGBuffer0, uv0);\n                vec4 _specularColorDecode = texture(Context.InGBuffer2, uv0);\n                vec3 _specularColor = floor(_specularColorDecode.rgb) * 0.1f;\n                vec3 _ambientColor = min(fract(_specularColorDecode.rgb) * 10.0f, vec3(1.0f));\n                float _shininess = floor(_diffuseColor.w);\n                float alpha     = min(fract(_diffuseColor.w) * 10.0f, 1.0f);\n                vec3 normal = texture(Context.InGBuffer1, uv0).xyz;\n                // 计算光照\n                vec4 lightColor;\n                vec4 lightData1;\n                vec4 lightDir = vec4(0.0f);\n                vec3 lightVec = vec3(0.0f);\n                vec2 lightBRDF = vec2(0.0f);\n                vec3 viewDir = normalize(Context.CameraPosition.xyz - wPosition.xyz);\n\n                Context.OutColor.rgb = _diffuseColor.rgb * Context.AmbientLightColor * _ambientColor;\n\n\n                // 不必担心这个分支，不会影响性能\n                if(Context.MultiId == 0){\n                    for( int i = 0;i < Context.CurLightCount;i+=3 ){\n                        // 后期改为Context.GetLightDir(Context.LightData[i]);\n                        lightColor = Context.WLightData[i];\n                        lightData1 = Context.WLightData[i + 1];\n                        ComputeLightDir(wPosition, lightColor.w, lightData1, lightDir, lightVec);\n                        //lightBRDF.x = max( 0.0f, dot( normal, lightDir.xyz ) );\n\n                        // BlinnPhongLighting\n                        //vec3 h = normalize( viewDir + lightDir.xzy );\n                        //lightBRDF.y = pow( max( 0.0f, dot( normal, h ) ), 32.0f );\n                        // 标准PhongLighting\n                        //vec3 refDir = reflect( lightData1.xyz, normal );\n                        //lightBRDF.y = pow( max( 0.0f, dot( viewDir, refDir ) ), 32.0f);\n\n                        // 计算SpotLight的衰减\n                        float spotFallOff = 1.0;\n                        if( lightColor.w > 1.0f )\n                        {\n                            // 计算SpotLight的范围衰减\n                            spotFallOff = ComputeSpotFalloff( Context.WLightData[i + 2], lightDir.xyz );\n                        }\n\n                        // 如果存在法线纹理,则进一步计算lightDir\n\n                        // 计算反射率\n                        ComputeLighting(normal, viewDir, lightDir.xyz, lightDir.w * spotFallOff, _shininess, lightBRDF);\n\n                        // 最终光照值\n                        //Context.OutColor.rgb += lightColor.rgb * (vec3(lightBRDF.x) * _diffuseColor.rgb + vec3(lightBRDF.y) * _specularColor.rgb);\n                        Context.OutColor.rgb += lightColor.rgb * ( _diffuseColor.rgb * vec3( lightBRDF.x ) + _specularColor.rgb * vec3( lightBRDF.y ));\n                        //Context.OutColor.rgb = vec3(spotFallOff);\n                    }\n                }\n                else{\n                    // point和spot\n                    lightColor = Context.WLight_Data_0;\n                    lightData1 = Context.WLight_Data_1;\n                    ComputeLightDir(wPosition, lightColor.w, lightData1, lightDir, lightVec);\n                    //lightBRDF.x = max( 0.0f, dot( normal, lightDir.xyz ) );\n\n                    // BlinnPhongLighting\n                    //vec3 h = normalize( viewDir + lightDir.xzy );\n                    //lightBRDF.y = pow( max( 0.0f, dot( normal, h ) ), 32.0f );\n                    // 标准PhongLighting\n                    //vec3 refDir = reflect( lightData1.xyz, normal );\n                    //lightBRDF.y = pow( max( 0.0f, dot( viewDir, refDir ) ), 32.0f);\n\n                    // 计算SpotLight的衰减\n                    float spotFallOff = 1.0;\n                    if( lightColor.w > 1.0f )\n                    {\n                        // 计算SpotLight的范围衰减\n                        spotFallOff = ComputeSpotFalloff( Context.WLight_Data_2, lightDir.xyz );\n                    }\n\n                    // 如果存在法线纹理,则进一步计算lightDir\n\n                    // 计算反射率\n                    ComputeLighting(normal, viewDir, lightDir.xyz, lightDir.w * spotFallOff, _shininess, lightBRDF);\n\n                    // 最终光照值\n                    //Context.OutColor.rgb += lightColor.rgb * (vec3(lightBRDF.x) * _diffuseColor.rgb + vec3(lightBRDF.y) * _specularColor.rgb);\n                    Context.OutColor.rgb += lightColor.rgb * ( _diffuseColor.rgb * vec3( lightBRDF.x ) + _specularColor.rgb * vec3( lightBRDF.y ));\n                }\n\n\n                Context.OutColor.a = alpha;\n            }\n        }\n    }\n    SubTechnology GlobalPass{\n        Vars{\n            vec4 wordPosition;\n            vec2 uv0;\n            mat4 pvInverse;\n        }\n        Advanced{\n            RenderProgram TilePassLighting;\n        }\n        Vs_Shader{\n            void main(){\n                Context.OutPosition = vec4(Context.InPosition, 1.0f);\n                wordPosition = Context.OutPosition;\n                uv0 = Context.InUv0;\n                pvInverse = inverse(Context.ProjectViewMatrix);\n            }\n        }\n        Fs_Shader{\n            vec3 getPosition(in float depth, in vec2 newTexCoord){\n\n                vec4 pos;\n                pos.xy = (newTexCoord * vec2(2.0)) - vec2(1.0);\n                pos.z  = depth * 2.0 - 1.0;\n                pos.w  = 1.0;\n                pos    = pvInverse * pos;\n                pos.xyz /= pos.w;\n                return pos.xyz;\n            }\n            // 计算光照方向\n            // 对于DirLight,PointLight以及SpotLight,lightType依次为0.0,1.0,2.0\n            // 输出光照方向\n            // lightDir.w存储衰减率(对于DirLight,衰减值一直为1,对于Point或Spot,衰减值随着半径而变小,衰减值越小,表示衰减度越大)\n            void ComputeLightDir(in vec3 worldPos, in float lightType, in vec4 position, out vec4 lightDir, out vec3 lightVec){\n                // 只有lightType = 0.0时,posLight为0.0,否则posLight为1.0\n                float posLight = step(0.5f, lightType);\n\n                // 计算光照位置\n                // 对于DirLight,lightVec = position.xyz * sign(-0.5f) = position.xyz * -1.0f;其中position代表DirLight的方向\n                // 对于PointLight和SpotLight,lightVec = position.xyz * sign(1.0f - 0.5f) - (worldPos * 1.0f) = positions.xyz * 1.0f - worldPos;其中position代表Light的位置\n                lightVec = position.xyz * sign(posLight - 0.5f) - (worldPos * posLight);\n                float dist = length(lightVec);\n\n                // 对于DirLight,lightDir.w = 1.0f\n                //lightDir.w = clamp(1.0f - position.w * dist * posLight, 0.0f, 1.0f);\n\n                lightDir.w = (1.0f - position.w * dist) / (1.0f + position.w * dist * dist);\n                lightDir.w = clamp(lightDir.w, 1.0f - posLight, 1.0f);\n\n                // 归一化\n                lightDir.xyz = lightVec / vec3(dist);\n            }\n            // 基于BlinnPhong光照模型计算光照因子\n            // brdf.x保存漫反射部分;brdf.y保存镜面反射部分\n            void ComputeLighting(in vec3 normal, in vec3 viewDir, in vec3 lightDir, in float attenuation, in float shininess, out vec2 brdf){\n                // diffuse部分\n                float diffuseBRDF = max(0.0f, dot(normal, lightDir));\n                // specular部分\n                // 半角向量代替viewDir参与光照计算\n                vec3 H = normalize(viewDir + lightDir);\n                float HdotN = max(0.0f, dot(H, normal));\n                float specularBRDF = pow( HdotN, shininess );\n\n                // 衰减,对于PointLight和SpotLight来说有效,对于DirLight而言,attenuation一直为1\n                brdf.x = diffuseBRDF * attenuation;\n                brdf.y = specularBRDF * attenuation;\n            }\n            // 返回Spot范围衰减\n            float ComputeSpotFalloff(in vec4 spotDirection, in vec3 lightDir){\n                float curAngleCos = dot(lightDir, -spotDirection.xyz);\n                float innerAngleCos = floor(spotDirection.w) * 0.001f;\n                float outerAngleCos = fract(spotDirection.w);\n                float innerMinusOuter = innerAngleCos - outerAngleCos;\n                float falloff = clamp((curAngleCos - outerAngleCos) / innerMinusOuter, 0.0f, 1.0f);\n                //if(curAngleCos > innerMinusOuter)\n                //    falloff = 1.0f;\n                //else\n                //    falloff = 0.0f;\n\n                #ifndef Context.Srgb\n                    // Use quadratic falloff (notice the ^4)\n                    return pow(clamp((curAngleCos - outerAngleCos) / innerMinusOuter, 0.0, 1.0), 4.0);\n                #else\n                    // Use linear falloff\n                    return falloff;\n                #endif\n            }\n            void main(){\n                float depth = texture(Context.InGDepth, uv0).r;\n                if(depth >= 1.0){\n                    Context.OutColor = vec4(0.0f, 0.0f, 0.0f, 1.0f);\n                    return;\n                }\n                vec3 wPosition = getPosition(depth, uv0);\n                vec4 _diffuseColor = texture(Context.InGBuffer0, uv0);\n                vec4 _specularColorDecode = texture(Context.InGBuffer2, uv0);\n                vec3 _specularColor = floor(_specularColorDecode.rgb) * 0.1f;\n                vec3 _ambientColor = min(fract(_specularColorDecode.rgb) * 10.0f, vec3(1.0f));\n                float _shininess = floor(_diffuseColor.w);\n                float alpha     = min(fract(_diffuseColor.w) * 10.0f, 1.0f);\n                vec3 normal = texture(Context.InGBuffer1, uv0).xyz;\n                // 计算光照\n                vec4 lightColor;\n                vec4 lightData1;\n                vec4 lightDir = vec4(0.0f);\n                vec3 lightVec = vec3(0.0f);\n                vec2 lightBRDF = vec2(0.0f);\n                vec3 viewDir = normalize(Context.CameraPosition.xyz - wPosition.xyz);\n\n                Context.OutColor.rgb = _diffuseColor.rgb * Context.AmbientLightColor * _ambientColor;\n                for( int i = 0;i < Context.CurLightCount;i+=3 ){\n                    // 后期改为Context.GetLightDir(Context.LightData[i]);\n                    lightColor = Context.WLightData[i];\n                    lightData1 = Context.WLightData[i + 1];\n                    ComputeLightDir(wPosition, lightColor.w, lightData1, lightDir, lightVec);\n                    //lightBRDF.x = max( 0.0f, dot( normal, lightDir.xyz ) );\n\n                    // BlinnPhongLighting\n                    //vec3 h = normalize( viewDir + lightDir.xzy );\n                    //lightBRDF.y = pow( max( 0.0f, dot( normal, h ) ), 32.0f );\n                    // 标准PhongLighting\n                    //vec3 refDir = reflect( lightData1.xyz, normal );\n                    //lightBRDF.y = pow( max( 0.0f, dot( viewDir, refDir ) ), 32.0f);\n\n                    // 计算SpotLight的衰减\n                    float spotFallOff = 1.0;\n                    if( lightColor.w > 1.0f )\n                    {\n                        // 计算SpotLight的范围衰减\n                        spotFallOff = ComputeSpotFalloff( Context.WLightData[i + 2], lightDir.xyz );\n                    }\n\n                    // 如果存在法线纹理,则进一步计算lightDir\n\n                    // 计算反射率\n                    ComputeLighting(normal, viewDir, lightDir.xyz, lightDir.w * spotFallOff, _shininess, lightBRDF);\n\n                    // 最终光照值\n                    //Context.OutColor.rgb += lightColor.rgb * (vec3(lightBRDF.x) * _diffuseColor.rgb + vec3(lightBRDF.y) * _specularColor.rgb);\n                    Context.OutColor.rgb += lightColor.rgb * ( _diffuseColor.rgb * vec3( lightBRDF.x ) + _specularColor.rgb * vec3( lightBRDF.y ));\n                    //Context.OutColor.rgb = vec3(spotFallOff);\n                }\n                Context.OutColor.a = alpha;\n            }\n        }\n    }\n    SubTechnology TilePass{\n        Vars{\n            vec4 wordPosition;\n            vec2 uv0;\n            mat4 pvInverse;\n        }\n        Advanced{\n            RenderProgram TilePassLighting;\n        }\n        Vs_Shader{\n            void main(){\n                Context.OutPosition = vec4(Context.InPosition, 1.0f);\n                wordPosition = Context.OutPosition;\n                uv0 = Context.InUv0;\n                pvInverse = inverse(Context.ProjectViewMatrix);\n            }\n        }\n        Fs_Shader{\n            vec3 getPosition(in float depth, in vec2 newTexCoord){\n\n                vec4 pos;\n                pos.xy = (newTexCoord * vec2(2.0)) - vec2(1.0);\n                pos.z  = depth * 2.0 - 1.0;\n                pos.w  = 1.0;\n                pos    = pvInverse * pos;\n                pos.xyz /= pos.w;\n                return pos.xyz;\n            }\n            // 计算光照方向\n            // 对于DirLight,PointLight以及SpotLight,lightType依次为0.0,1.0,2.0\n            // 输出光照方向\n            // lightDir.w存储衰减率(对于DirLight,衰减值一直为1,对于Point或Spot,衰减值随着半径而变小,衰减值越小,表示衰减度越大)\n            void ComputeLightDir(in vec3 worldPos, in float lightType, in vec4 position, out vec4 lightDir, out vec3 lightVec){\n                // 只有lightType = 0.0时,posLight为0.0,否则posLight为1.0\n                float posLight = step(0.5f, lightType);\n\n                // 计算光照位置\n                // 对于DirLight,lightVec = position.xyz * sign(-0.5f) = position.xyz * -1.0f;其中position代表DirLight的方向\n                // 对于PointLight和SpotLight,lightVec = position.xyz * sign(1.0f - 0.5f) - (worldPos * 1.0f) = positions.xyz * 1.0f - worldPos;其中position代表Light的位置\n                lightVec = position.xyz * sign(posLight - 0.5f) - (worldPos * posLight);\n                float dist = length(lightVec);\n\n                // 对于DirLight,lightDir.w = 1.0f\n                //lightDir.w = clamp(1.0f - position.w * dist * posLight, 0.0f, 1.0f);\n\n                lightDir.w = (1.0f - position.w * dist) / (1.0f + position.w * dist * dist);\n                lightDir.w = clamp(lightDir.w, 1.0f - posLight, 1.0f);\n\n                // 归一化\n                lightDir.xyz = lightVec / vec3(dist);\n            }\n            // 基于BlinnPhong光照模型计算光照因子\n            // brdf.x保存漫反射部分;brdf.y保存镜面反射部分\n            void ComputeLighting(in vec3 normal, in vec3 viewDir, in vec3 lightDir, in float attenuation, in float shininess, out vec2 brdf){\n                // diffuse部分\n                float diffuseBRDF = max(0.0f, dot(normal, lightDir));\n                // specular部分\n                // 半角向量代替viewDir参与光照计算\n                vec3 H = normalize(viewDir + lightDir);\n                float HdotN = max(0.0f, dot(H, normal));\n                float specularBRDF = pow( HdotN, shininess );\n\n                // 衰减,对于PointLight和SpotLight来说有效,对于DirLight而言,attenuation一直为1\n                brdf.x = diffuseBRDF * attenuation;\n                brdf.y = specularBRDF * attenuation;\n            }\n            // 返回Spot范围衰减\n            float ComputeSpotFalloff(in vec4 spotDirection, in vec3 lightDir){\n                float curAngleCos = dot(lightDir, -spotDirection.xyz);\n                float innerAngleCos = floor(spotDirection.w) * 0.001f;\n                float outerAngleCos = fract(spotDirection.w);\n                float innerMinusOuter = innerAngleCos - outerAngleCos;\n                float falloff = clamp((curAngleCos - outerAngleCos) / innerMinusOuter, 0.0f, 1.0f);\n                //if(curAngleCos > innerMinusOuter)\n                //    falloff = 1.0f;\n                //else\n                //    falloff = 0.0f;\n\n                #ifndef Context.Srgb\n                    // Use quadratic falloff (notice the ^4)\n                    return pow(clamp((curAngleCos - outerAngleCos) / innerMinusOuter, 0.0, 1.0), 4.0);\n                #else\n                    // Use linear falloff\n                    return falloff;\n                #endif\n            }\n            void main(){\n                float depth = texture(Context.InGDepth, uv0).r;\n                if(depth >= 1.0){\n                    Context.OutColor = vec4(0.0f, 0.0f, 0.0f, 1.0f);\n                    return;\n                }\n                vec3 wPosition = getPosition(depth, uv0);\n                vec4 _diffuseColor = texture(Context.InGBuffer0, uv0);\n                vec4 _specularColorDecode = texture(Context.InGBuffer2, uv0);\n                vec3 _specularColor = floor(_specularColorDecode.rgb) * 0.1f;\n                vec3 _ambientColor = min(fract(_specularColorDecode.rgb) * 10.0f, vec3(1.0f));\n                float _shininess = floor(_diffuseColor.w);\n                float alpha     = min(fract(_diffuseColor.w) * 10.0f, 1.0f);\n                vec3 normal = texture(Context.InGBuffer1, uv0).xyz;\n                // 计算光照\n                vec4 lightColor;\n                vec4 lightData1;\n                vec4 lightDir = vec4(0.0f);\n                vec3 lightVec = vec3(0.0f);\n                vec2 lightBRDF = vec2(0.0f);\n                vec3 viewDir = normalize(Context.CameraPosition.xyz - wPosition.xyz);\n\n                Context.OutColor.rgb = vec3(0.0f);\n                // Tile Based Shading\n                // 获取tile信息\n                vec3 tile = texture(Context.InTileLightDecode, uv0).xyz;\n                int uoffset = int(tile.x);\n                int voffset = int(tile.z);\n                int count = int(tile.y);\n                if(count > 0){\n                    int lightId;\n                    float temp;\n                    int offset;\n                    // lightIndex采样范围规范化单位\n                    float uvSize = 1.0f / (Context.TileLightOffsetSize - 1.0f);\n                    vec2 lightUV;\n                    // lightData采样范围规范单位\n                    float lightUVSize = 1.0f / (float(Context.TileLightNum) - 1.0f);\n                    vec2 lightDataUV;\n                    for(int i = 0;i < count;i++){\n                        temp = float(uoffset + i);\n                        offset = 0;\n\n                        if(temp >= Context.TileLightOffsetSize){\n                            temp -= Context.TileLightOffsetSize;\n                            offset++;\n                        }\n                        if(temp == Context.TileLightOffsetSize){\n                            temp = 0.0f;\n                        }\n\n                        // lightIndexUV\n                        lightUV = vec2(temp * uvSize, float(voffset + offset) * uvSize);\n                        lightId = int(texture(Context.InTileLightIndex, lightUV).x);\n\n                        // 光源信息\n                        lightDataUV = vec2(float(lightId) * lightUVSize);\n                        lightColor = texture(Context.InTileWLightData0, lightDataUV);\n                        lightData1 = texture(Context.InTileWLightData1, lightDataUV);\n\n                        // point和spot\n                        ComputeLightDir(wPosition, lightColor.w, lightData1, lightDir, lightVec);\n                        //lightBRDF.x = max( 0.0f, dot( normal, lightDir.xyz ) );\n\n                        // BlinnPhongLighting\n                        //vec3 h = normalize( viewDir + lightDir.xzy );\n                        //lightBRDF.y = pow( max( 0.0f, dot( normal, h ) ), 32.0f );\n                        // 标准PhongLighting\n                        //vec3 refDir = reflect( lightData1.xyz, normal );\n                        //lightBRDF.y = pow( max( 0.0f, dot( viewDir, refDir ) ), 32.0f);\n\n                        // 计算SpotLight的衰减\n                        float spotFallOff = 1.0;\n                        if( lightColor.w > 1.0f )\n                        {\n                            // 计算SpotLight的范围衰减\n                            spotFallOff = ComputeSpotFalloff( texture(Context.InTileWLightData2, lightDataUV), lightDir.xyz );\n                        }\n\n                        // 如果存在法线纹理,则进一步计算lightDir\n\n                        // 计算反射率\n                        ComputeLighting(normal, viewDir, lightDir.xyz, lightDir.w * spotFallOff, _shininess, lightBRDF);\n\n                        // 最终光照值\n                        //Context.OutColor.rgb += lightColor.rgb * (vec3(lightBRDF.x) * _diffuseColor.rgb + vec3(lightBRDF.y) * _specularColor.rgb);\n                        Context.OutColor.rgb += lightColor.rgb * ( _diffuseColor.rgb * vec3( lightBRDF.x ) + _specularColor.rgb * vec3( lightBRDF.y ));\n                    }\n                }\n                Context.OutColor.a = alpha;\n            }\n        }\n    }\n    Technology{\n        Sub_Pass DeferredShading{\n            Pass GBufferPass{\n            }\n            Pass DeferredShadingPass{\n            }\n        }\n    }\n    Technology MultiPassDeferred{\n        Sub_Pass DeferredShading{\n            Pass GBufferPass{\n            }\n            Pass DeferredShadingPass2{\n            }\n        }\n    }\n    Technology TileDeferred{\n        Sub_Pass TileDeferredShading{\n            Pass GBufferPass{\n            }\n            Pass GlobalPass{\n            }\n            Pass TilePass{\n            }\n        }\n    }\n}\n";static S_PRINCIPLED_DEFERRED_LIGHTING_DEF_DATA="// 默认的延迟光照材质定义,实现PBR材质\nDef DeferredLightingDef{\n    Params{\n        // 基础参数\n        vec4 baseColor;\n        sampler2D baseColorMap;\n        sampler2D normalMap;\n\n        // lightMap或AO\n        sampler2D lightMap;\n        bool aoMap;\n        bool lightMapTexCoord;\n\n        // 自发光\n        vec4 emissive;\n        float emissivePower;\n        float emissiveIntensity;\n\n        // metallic管线\n        float metallic;\n        float roughness;\n        sampler2D metallicRoughnessMap;\n        sampler2D metallicMap;\n        sampler2D roughnessMap;\n\n        // specular管线\n        bool useSpecGloss;\n        sampler2D specularGlossinessMap;\n        sampler2D specularMap;\n        sampler2D glossinessMap;\n        vec4 specular;\n        float glossiness;\n\n        // alphaDiscard\n        float alphaDiscard;\n    }\n    SubTechnology GBufferPass{\n        Vars{\n            vec3 wNormal;\n            vec4 wTangent;\n            vec3 wPosition;\n            vec2 wUv0;\n            vec2 wUv1;\n        }\n        Vs_Shader{\n            void main(){\n                #ifdef Context.Skins\n                    mat4 skinMat =\n                            Context.InWeight0.x * Context.Joints[int(Context.InJoint0.x)] +\n                            Context.InWeight0.y * Context.Joints[int(Context.InJoint0.y)] +\n                            Context.InWeight0.z * Context.Joints[int(Context.InJoint0.z)] +\n                            Context.InWeight0.w * Context.Joints[int(Context.InJoint0.w)];\n                    // vec4 pos = Context.ModelMatrix * skinMat * vec4(Context.InPosition, 1.0f);\n                    vec4 pos = skinMat * vec4(Context.InPosition, 1.0f);\n                #else\n                    vec4 pos = Context.ModelMatrix * vec4(Context.InPosition, 1.0f);\n                #endif\n\n\n                wPosition = pos.xyz;\n                mat3 nMat = mat3(transpose(inverse(Context.ModelMatrix)));\n                vec3 norm = normalize(nMat * Context.InNormal);\n                //vec3 t = normalize(nMat * Context.InTangent);\n                wTangent = vec4(normalize(nMat * Context.InTangent.xyz), Context.InTangent.w);\n                //t = normalize(t - dot(t, norm) * norm);\n                //vec3 b = cross(norm, t);\n                //tbnMat = mat3(t, b, norm);\n                wNormal = norm;\n                wUv0 = Context.InUv0;\n                #ifdef Params.lightMapTexCoord\n                    wUv1 = Context.InUv1;\n                #endif\n\n\n                Context.OutPosition = Context.ProjectViewMatrix * pos;\n            }\n        }\n        Fs_Shader{\n            #define GAMMA 2.2f\n            void main(){\n\n                #ifdef Params.baseColor\n                    #ifdef Params.baseColorMap\n                        vec4 albedo = texture(Params.baseColorMap, wUv0) * Params.baseColor;\n                    #else\n                        vec4 albedo = Params.baseColor;\n                    #endif\n                #else\n                    #ifdef Params.baseColorMap\n                        vec4 albedo = texture(Params.baseColorMap, wUv0);\n                    #else\n                        vec4 albedo = vec4(1.0f);\n                    #endif\n                #endif\n\n                #ifdef Params.alphaDiscard\n                    if(albedo.a < Params.alphaDiscard){\n                        discard;\n                    }\n                #endif\n\n                vec3 normal = wNormal;\n                #ifdef Params.normalMap\n                    // 这里做了一种简化,理论上应该在fs阶段计算tbn,但是从插值的角度来看,可以简化为tbn插值,减少在fs阶段计算tbn开销(虽然这么做不精确,但是折中下可以接受)\n                    vec3 normalHeight = texture(Params.normalMap, wUv0).xyz;\n                    vec3 tangent = normalize(wTangent.xyz);\n                    mat3 tbnMat = mat3(tangent, wTangent.w * cross(normal, tangent), normal);\n                    normal = normalize(tbnMat * ( normalHeight * 2.0f - 1.0f ));\n                #endif\n\n                #ifdef Params.metallicRoughnessMap\n                    vec2 rm = texture(Params.metallicRoughnessMap, wUv0).gb;\n                    #ifdef Params.roughness\n                        float _roughness = rm.x * max(Params.roughness, 1e-4);\n                    #else\n                        float _roughness = rm.x;\n                    #endif\n                    #ifdef Params.metallic\n                        float _metallic = rm.y * max(Params.metallic, 0.0f);\n                    #else\n                        float _metallic = rm.y;\n                    #endif\n                #else\n                    #ifdef Params.roughnessMap\n                        #ifdef Params.roughness\n                            float _roughness = texture(Params.roughnessMap, wUv0).r * max(Params.roughness, 1e-4);\n                        #else\n                            float _roughness = texture(Params.roughnessMap, wUv0).r;\n                        #endif\n                    #else\n                        #ifdef Params.roughness\n                            float _roughness = max(Params.roughness, 1e-4);\n                        #else\n                            float _roughness = 1.0f;\n                        #endif\n                    #endif\n                    #ifdef Params.metallicMap\n                        #ifdef Params.metallic\n                            float _metallic = texture(Params.metallicMap, wUv0).r * max(Params.metallic, 0.0f);\n                        #else\n                            float _metallic = texture(Params.metallicMap, wUv0).r;\n                        #endif\n                    #else\n                        #ifdef Params.metallic\n                            float _metallic = max(Params.metallic, 0.0f);\n                        #else\n                            float _metallic = 1.0f;\n                        #endif\n                    #endif\n                #endif\n\n                #ifdef Params.useSpecGloss\n                    #ifdef Params.specularGlossinessMap\n                        vec4 _specularColor = texture(Params.specularGlossinessMap, wUv0);\n                        #ifdef Params.glossiness\n                            float _glossiness = _specularColor.a * Params.glossiness;\n                        #else\n                            float _glossiness = _specularColor.a;\n                        #endif\n                        #ifdef Params.specular\n                            _specularColor *= Params.specular;\n                        #endif\n                    #else\n                        #ifdef Params.specularMap\n                            vec4 _specularColor = texture(Params.specularMap, wUv0);\n                        #else\n                            vec4 _specularColor = vec4(1.0f);\n                        #endif\n                        #ifdef Params.specular\n                            _specularColor *= Params.specular;\n                        #endif\n                        #ifdef Params.glossinessMap\n                            #ifdef Params.glossiness\n                                float _glossiness = texture(Params.glossinessMap, wUv0).r * Params.glossiness;\n                            #else\n                                float _glossiness = texture(Params.glossinessMap, wUv0).r;\n                            #endif\n                        #else\n                            #ifdef Params.glossiness\n                                float _glossiness = Params.glossiness;\n                            #else\n                                float _glossiness = 1.0f;\n                            #endif\n                        #endif\n                    #endif\n                    vec4 _diffuseColor = albedo;\n                    _roughness = 1.0f - _glossiness;\n                    vec3 fZero = _specularColor.rgb;\n                #else\n                    float nonMetalSpec = 0.04f;\n                    vec4 _specularColor = (nonMetalSpec - nonMetalSpec * _metallic) + albedo * _metallic;\n                    vec4 _diffuseColor = albedo - albedo * _metallic;\n                    vec3 fZero = vec3( 0.5f );\n                #endif\n\n                #ifdef Params.lightMap\n                    vec3 _lightMapColor;\n                    #ifdef Params.lightMapTexCoord\n                        _lightMapColor = texture(Params.lightMap, wUv1).rgb;\n                    #else\n                        _lightMapColor = texture(Params.lightMap, wUv0).rgb;\n                    #endif\n                    #ifdef Params.aoMap\n                        _lightMapColor.gb = _lightMapColor.rr;\n                        vec3 ao = _lightMapColor;\n                    #else\n                        _specularColor.rgb *= _lightMapColor;\n                        _diffuseColor.rgb  *= _lightMapColor;\n                        vec3 ao = vec3(1.0f);\n                    #endif\n                #else\n                    vec3 ao = vec3(1.0f);\n                #endif\n\n\n\n\n                Context.OutGBuffer0.xyz = floor(_diffuseColor.rgb * 100.0f) + ao * 0.1f;\n                Context.OutGBuffer0.w   = albedo.a;\n                Context.OutGBuffer1.xyz = floor(normal.xyz * 1000.0f) + wNormal * 0.001f;\n                Context.OutGBuffer2.rgb = floor(_specularColor.rgb * 100.0f) + fZero * 0.1f;\n                Context.OutGBuffer2.a = floor(_roughness * 100.0f) + _metallic * 0.1f;\n            }\n        }\n    }\n    SubTechnology DeferredShadingPass{\n        Vars{\n            vec4 wordPosition;\n            vec2 uv0;\n            mat4 pvInverse;\n        }\n        Advanced{\n            RenderProgram SinglePassIBLLighting;\n        }\n        Vs_Shader{\n            void main(){\n                Context.OutPosition = vec4(Context.InPosition, 1.0f);\n                wordPosition = Context.OutPosition;\n                uv0 = Context.InUv0;\n                pvInverse = inverse(Context.ProjectViewMatrix);\n            }\n        }\n        Fs_Shader{\n            vec3 getPosition(in float depth, in vec2 newTexCoord){\n\n                vec4 pos;\n                pos.xy = (newTexCoord * vec2(2.0)) - vec2(1.0);\n                pos.z  = depth * 2.0 - 1.0;\n                pos.w  = 1.0;\n                pos    = pvInverse * pos;\n                pos.xyz /= pos.w;\n                return pos.xyz;\n            }\n            // 计算光照方向\n            // 对于DirLight,PointLight以及SpotLight,lightType依次为0.0,1.0,2.0\n            // 输出光照方向\n            // lightDir.w存储衰减率(对于DirLight,衰减值一直为1,对于Point或Spot,衰减值随着半径而变小,衰减值越小,表示衰减度越大)\n            void ComputeLightDir(in vec3 worldPos, in float lightType, in vec4 position, out vec4 lightDir, out vec3 lightVec){\n                // 只有lightType = 0.0时,posLight为0.0,否则posLight为1.0\n                float posLight = step(0.5f, lightType);\n\n                // 计算光照位置\n                // 对于DirLight,lightVec = position.xyz * sign(-0.5f) = position.xyz * -1.0f;其中position代表DirLight的方向\n                // 对于PointLight和SpotLight,lightVec = position.xyz * sign(1.0f - 0.5f) - (worldPos * 1.0f) = positions.xyz * 1.0f - worldPos;其中position代表Light的位置\n                lightVec = position.xyz * sign(posLight - 0.5f) - (worldPos * posLight);\n                float dist = length(lightVec);\n\n                #ifndef Context.Srgb\n                    lightDir.w = (1.0f - position.w * dist) / (1.0f + position.w * dist * dist);\n                    lightDir.w = clamp(lightDir.w, 1.0f - posLight, 1.0f);\n                #else\n                    // 对于DirLight,lightDir.w = 1.0f\n                    lightDir.w = clamp(1.0f - position.w * dist * posLight, 0.0f, 1.0f);\n                #endif\n\n                // 归一化\n                lightDir.xyz = lightVec / vec3(dist);\n            }\n            #define PI 3.14159265358979323846264\n            // 镜面反射菲涅尔计算\n            vec3 F_Shlick(float vh,\tvec3 F0){\n                float fresnelFact = pow(2.0f, (-5.55473f * vh - 6.98316f) * vh);\n                return mix(F0, vec3(1.0f, 1.0f, 1.0f), fresnelFact);\n            }\n            vec3 F_Schlick2(float cosTheta, vec3 F0)\n            {\n                return F0 + (1.0f - F0) * pow(1.0f - cosTheta, 5.0f);\n            }\n            // 计算直接光照\n            void ComputeDirectLighting(in vec3 normal, in vec3 viewDir, in vec3 lightDir, in vec3 lightColor, in vec3 diffuseColor, in vec3 fZero, in float roughness, in float ndotv, out vec3 directLighting){\n                vec3 h = normalize(lightDir + viewDir);\n                float ndotl = max( dot( normal, lightDir ), 0.0f );\n                float ndoth = max( dot( normal, h), 0.0f );\n                float hdotv = max( dot( h, viewDir ), 0.0f );\n\n                // 这里,不使用c/Π计算diffuse fr(x, wi, wo)\n                // 而假设恒定\n                vec3 diffuse = vec3( ndotl ) * lightColor * diffuseColor;\n\n                // cook-torrence,BRDF : http://blog.selfshadow.com/publications/s2013-shading-course/karis/s2013_pbs_epic_notes_v2.pdf\n                float alpha = roughness * roughness;\n\n                // D, GGX 法线分布函数\n                float alpha2 = alpha * alpha;\n                float sum = (( ndoth * ndoth ) * ( alpha2 - 1.0f ) + 1.0f);\n                float denom = PI * sum * sum;\n                float D = alpha2 / denom;\n\n                // F, 菲涅尔项\n                vec3 F = F_Shlick( hdotv, fZero );\n\n                // G, 几何遮挡项\n                float k = alpha * 0.5f;\n                float G_V = ndotv + sqrt( ( ndotv - ndotv * k ) * ndotv + k );\n                float G_L = ndotl + sqrt( ( ndotl - ndotl * k ) * ndotl + k );\n                float G = 1.0f / max( G_V * G_L ,0.01f );\n\n                // specularBRDF\n                float t = D * G * ndotl;\n                vec3 specular =  vec3( t ) * F * lightColor;\n\n                directLighting = diffuse + specular;\n            }\n            // 返回Spot范围衰减\n            float ComputeSpotFalloff(in vec4 spotDirection, in vec3 lightDir){\n                float curAngleCos = dot(lightDir, -spotDirection.xyz);\n                float innerAngleCos = floor(spotDirection.w) * 0.001f;\n                float outerAngleCos = fract(spotDirection.w);\n                float innerMinusOuter = innerAngleCos - outerAngleCos;\n\n                #ifndef Context.Srgb\n                    // 使用二次衰减（请注意^ 4）\n                    return pow(clamp((curAngleCos - outerAngleCos) / innerMinusOuter, 0.0f, 1.0f), 4.0f);\n                #else\n                    // 线性空间衰减\n                    return clamp((curAngleCos - outerAngleCos) / innerMinusOuter, step(spotDirection.w, 0.001f), 1.0f);\n                #endif\n            }\n            // 球谐函数\n            vec3 sphericalHarmonics( const in vec3 normal, const vec3 sph[9] ){\n                float x = normal.x;\n                float y = normal.y;\n                float z = normal.z;\n\n                vec3 result = (\n                    sph[0] +\n\n                    sph[1] * y +\n                    sph[2] * z +\n                    sph[3] * x +\n\n                    sph[4] * y * x +\n                    sph[5] * y * z +\n                    sph[6] * (3.0f * z * z - 1.0f) +\n                    sph[7] * (z * x) +\n                    sph[8] * (x*x - y*y)\n                );\n\n                return max(result, vec3(0.0f));\n            }\n            // 镜面反射趋势朝向\n            vec3 getSpecularDominantDir(const in vec3 N, const in vec3 R, const in float realRoughness){\n\n                float smoothness = 1.0f - realRoughness;\n                float lerpFactor = smoothness * (sqrt(smoothness) + realRoughness);\n                // 当我们在立方体贴图中获取时，结果未规范化\n                vec3 dominant = mix(N, R, lerpFactor);\n\n                return dominant;\n            }\n            // 拟合方程\n            // 关于镜面部分，有很多优化地方，除了常见的优化，还有很多可以替代方案，几乎可以在保证画质的前提下，在移动端35帧率提升到60帧率，详细可参考我的笔记:https://www.cnblogs.com/JhonKkk/p/14313882.html\n            vec3 integrateBRDFApprox( const in vec3 specular, in float roughness, in float NoV ){\n                const vec4 c0 = vec4( -1.0f, -0.0275f, -0.572f, 0.022f );\n                const vec4 c1 = vec4( 1.0f, 0.0425f, 1.04f, -0.04f );\n                vec4 r = roughness * c0 + c1;\n                float a004 = min( r.x * r.x, exp2( -9.28f * NoV ) ) * r.x + r.y;\n                vec2 ab = vec2( -1.04f, 1.04f ) * a004 + r.zw;\n                return specular * ab.x + ab.y;\n            }\n            // 近似镜面IBL多项式\n            vec3 approximateSpecularIBLPolynomial(in samplerCube envMap, in vec3 specularColor , in float roughness, in float ndotv, in vec3 refVec, in float mipMaps){\n                float lod = sqrt( roughness ) * (mipMaps - 1.0f);\n                vec3 prefilteredColor = textureLod(envMap, refVec.xyz, lod).rgb;\n                return prefilteredColor * integrateBRDFApprox(specularColor, roughness, ndotv);\n            }\n            #define GAMMA 2.2f\n            #define GAMMA_T 1.0f / GAMMA\n            void main(){\n                float depth = texture(Context.InGDepth, uv0).r;\n                if(depth >= 1.0){\n                    Context.OutColor = vec4(0.0f, 0.0f, 0.0f, 1.0f);\n                    return;\n                }\n                vec3 wPosition = getPosition(depth, uv0);\n                vec4 buff0 = texture(Context.InGBuffer0, uv0);\n                vec4 buff2 = texture(Context.InGBuffer2, uv0);\n                vec3 _diffuseColor = floor(buff0.rgb) * 0.01f * Context.AmbientLightColor;\n                vec3 _specularColor = floor(buff2.rgb) * 0.01f;\n                vec3 ao = min(fract(buff0.rgb) * 10.0f, vec3(1.0f));\n                vec3 fZero = min(fract(buff2.rgb) * 10.0f, vec3(0.5f));\n                float _roughness = floor(buff2.w) * 0.01f;\n                vec3 n = texture(Context.InGBuffer1, uv0).xyz;\n                vec3 normal = normalize(floor(n) * 0.001f);\n                vec3 wNormal = normalize(fract(n) * 1000.0f);\n                // 计算光照\n                vec4 lightColor;\n                vec4 lightData1;\n                vec4 lightDir = vec4(0.0f);\n                vec3 lightVec = vec3(0.0f);\n                vec3 directLighting = vec3(0.0f);\n                vec3 viewDir = normalize(Context.CameraPosition.xyz - wPosition.xyz);\n\n                float ndotv = max( dot( normal, viewDir ), 0.0f );\n                for( int i = 0;i < Context.CurLightCount;i+=3 ){\n                    lightColor = Context.WLightData[i];\n                    lightData1 = Context.WLightData[i + 1];\n                    ComputeLightDir(wPosition, lightColor.w, lightData1, lightDir, lightVec);\n\n                    // 计算PointLight的衰减\n                    float spotFallOff = 1.0 * lightDir.w;\n                    // 计算SpotLight的衰减\n                    if( lightColor.w > 1.0f )\n                    {\n                        // 计算SpotLight的范围衰减\n                        spotFallOff = ComputeSpotFalloff( Context.WLightData[i + 2], lightDir.xyz );\n                    }\n\n                    ComputeDirectLighting(normal, viewDir, lightDir.xyz, lightColor.rgb, _diffuseColor.rgb, fZero, _roughness, ndotv, directLighting);\n                    Context.OutColor.rgb += directLighting * spotFallOff;\n                }\n\n                if(Context.BlendGiProbes){\n                    #ifdef Context.GIProbes\n                        // 作为webGL项目,暂时不实现探针混合(但作为可拓展,仍然加结尾s命名)\n\n                        // 计算反射视线\n                        vec3 _rv = reflect( -viewDir.xyz, normal.xyz );\n                        float _r = fract( Context.WGIProbe.w );\n                        float _mipMaps = Context.WGIProbe.w - _r;\n                        _rv = _r * ( wPosition.xyz - Context.WGIProbe.xyz ) + _rv;\n\n                        // 使用球谐计算diffuse( 避免Irr采样 )\n                        vec3 giLighting = sphericalHarmonics(normal.xyz, Context.ShCoeffs) * _diffuseColor.rgb;\n\n                        float horiz = dot(_rv, wNormal);\n                        float horizFadePower = 1.0f - _roughness;\n                        horiz = clamp( 1.0f + horizFadePower * horiz, 0.0f, 1.0f );\n                        horiz *= horiz;\n\n                        vec3 _dominantR = getSpecularDominantDir( normal, _rv.xyz, _roughness * _roughness );\n                        giLighting += approximateSpecularIBLPolynomial(Context.InPrefEnvMap, _specularColor.rgb, _roughness, ndotv, _dominantR, _mipMaps) * vec3( horiz );\n                        giLighting *= ao;\n\n                        Context.OutColor.rgb += giLighting * step( 0.0f, Context.WGIProbe.w );\n                        // Context.OutColor.rgb = textureLod(Context.InPrefEnvMap, normal.xyz, 0.0f).rgb;\n                    #endif\n                }\n\n                Context.OutColor.a = buff0.a;\n            }\n        }\n    }\n    SubTechnology DeferredShadingPass2{\n        Vars{\n            vec4 wordPosition;\n            vec2 uv0;\n            mat4 pvInverse;\n        }\n        Advanced{\n            RenderProgram MultiPassIBLLighting;\n        }\n        Vs_Shader{\n            void main(){\n                Context.OutPosition = vec4(Context.InPosition, 1.0f);\n                wordPosition = Context.OutPosition;\n                uv0 = Context.InUv0;\n                pvInverse = inverse(Context.ProjectViewMatrix);\n            }\n        }\n        Fs_Shader{\n            vec3 getPosition(in float depth, in vec2 newTexCoord){\n\n                vec4 pos;\n                pos.xy = (newTexCoord * vec2(2.0)) - vec2(1.0);\n                pos.z  = depth * 2.0 - 1.0;\n                pos.w  = 1.0;\n                pos    = pvInverse * pos;\n                pos.xyz /= pos.w;\n                return pos.xyz;\n            }\n            // 计算光照方向\n            // 对于DirLight,PointLight以及SpotLight,lightType依次为0.0,1.0,2.0\n            // 输出光照方向\n            // lightDir.w存储衰减率(对于DirLight,衰减值一直为1,对于Point或Spot,衰减值随着半径而变小,衰减值越小,表示衰减度越大)\n            void ComputeLightDir(in vec3 worldPos, in float lightType, in vec4 position, out vec4 lightDir, out vec3 lightVec){\n                // 只有lightType = 0.0时,posLight为0.0,否则posLight为1.0\n                float posLight = step(0.5f, lightType);\n\n                // 计算光照位置\n                // 对于DirLight,lightVec = position.xyz * sign(-0.5f) = position.xyz * -1.0f;其中position代表DirLight的方向\n                // 对于PointLight和SpotLight,lightVec = position.xyz * sign(1.0f - 0.5f) - (worldPos * 1.0f) = positions.xyz * 1.0f - worldPos;其中position代表Light的位置\n                lightVec = position.xyz * sign(posLight - 0.5f) - (worldPos * posLight);\n                float dist = length(lightVec);\n\n                #ifndef Context.Srgb\n                    lightDir.w = (1.0f - position.w * dist) / (1.0f + position.w * dist * dist);\n                    lightDir.w = clamp(lightDir.w, 1.0f - posLight, 1.0f);\n                #else\n                    // 对于DirLight,lightDir.w = 1.0f\n                    lightDir.w = clamp(1.0f - position.w * dist * posLight, 0.0f, 1.0f);\n                #endif\n\n                // 归一化\n                lightDir.xyz = lightVec / vec3(dist);\n            }\n            #define PI 3.14159265358979323846264\n            // 镜面反射菲涅尔计算\n            vec3 F_Shlick(float vh,\tvec3 F0){\n                float fresnelFact = pow(2.0f, (-5.55473f * vh - 6.98316f) * vh);\n                return mix(F0, vec3(1.0f, 1.0f, 1.0f), fresnelFact);\n            }\n            vec3 F_Schlick2(float cosTheta, vec3 F0)\n            {\n                return F0 + (1.0f - F0) * pow(1.0f - cosTheta, 5.0f);\n            }\n            // 计算直接光照\n            void ComputeDirectLighting(in vec3 normal, in vec3 viewDir, in vec3 lightDir, in vec3 lightColor, in vec3 diffuseColor, in vec3 fZero, in float roughness, in float ndotv, out vec3 directLighting){\n                vec3 h = normalize(lightDir + viewDir);\n                float ndotl = max( dot( normal, lightDir ), 0.0f );\n                float ndoth = max( dot( normal, h), 0.0f );\n                float hdotv = max( dot( h, viewDir ), 0.0f );\n\n                // 这里,不使用c/Π计算diffuse fr(x, wi, wo)\n                // 而假设恒定\n                vec3 diffuse = vec3( ndotl ) * lightColor * diffuseColor;\n\n                // cook-torrence,BRDF : http://blog.selfshadow.com/publications/s2013-shading-course/karis/s2013_pbs_epic_notes_v2.pdf\n                float alpha = roughness * roughness;\n\n                // D, GGX 法线分布函数\n                float alpha2 = alpha * alpha;\n                float sum = (( ndoth * ndoth ) * ( alpha2 - 1.0f ) + 1.0f);\n                float denom = PI * sum * sum;\n                float D = alpha2 / denom;\n\n                // F, 菲涅尔项\n                vec3 F = F_Shlick( hdotv, fZero );\n\n                // G, 几何遮挡项\n                float k = alpha * 0.5f;\n                float G_V = ndotv + sqrt( ( ndotv - ndotv * k ) * ndotv + k );\n                float G_L = ndotl + sqrt( ( ndotl - ndotl * k ) * ndotl + k );\n                float G = 1.0f / max( G_V * G_L ,0.01f );\n\n                // specularBRDF\n                float t = D * G * ndotl;\n                vec3 specular =  vec3( t ) * F * lightColor;\n\n                directLighting = diffuse + specular;\n            }\n            // 返回Spot范围衰减\n            float ComputeSpotFalloff(in vec4 spotDirection, in vec3 lightDir){\n                float curAngleCos = dot(lightDir, -spotDirection.xyz);\n                float innerAngleCos = floor(spotDirection.w) * 0.001f;\n                float outerAngleCos = fract(spotDirection.w);\n                float innerMinusOuter = innerAngleCos - outerAngleCos;\n\n                #ifndef Context.Srgb\n                    // 使用二次衰减（请注意^ 4）\n                    return pow(clamp((curAngleCos - outerAngleCos) / innerMinusOuter, 0.0f, 1.0f), 4.0f);\n                #else\n                    // 线性空间衰减\n                    return clamp((curAngleCos - outerAngleCos) / innerMinusOuter, step(spotDirection.w, 0.001f), 1.0f);\n                #endif\n            }\n            // 球谐函数\n            vec3 sphericalHarmonics( const in vec3 normal, const vec3 sph[9] ){\n                float x = normal.x;\n                float y = normal.y;\n                float z = normal.z;\n\n                vec3 result = (\n                    sph[0] +\n\n                    sph[1] * y +\n                    sph[2] * z +\n                    sph[3] * x +\n\n                    sph[4] * y * x +\n                    sph[5] * y * z +\n                    sph[6] * (3.0f * z * z - 1.0f) +\n                    sph[7] * (z * x) +\n                    sph[8] * (x*x - y*y)\n                );\n\n                return max(result, vec3(0.0f));\n            }\n            // 镜面反射趋势朝向\n            vec3 getSpecularDominantDir(const in vec3 N, const in vec3 R, const in float realRoughness){\n\n                float smoothness = 1.0f - realRoughness;\n                float lerpFactor = smoothness * (sqrt(smoothness) + realRoughness);\n                // 当我们在立方体贴图中获取时，结果未规范化\n                vec3 dominant = mix(N, R, lerpFactor);\n\n                return dominant;\n            }\n            // 拟合方程\n            // 关于镜面部分，有很多优化地方，除了常见的优化，还有很多可以替代方案，几乎可以在保证画质的前提下，在移动端35帧率提升到60帧率，详细可参考我的笔记:https://www.cnblogs.com/JhonKkk/p/14313882.html\n            vec3 integrateBRDFApprox( const in vec3 specular, in float roughness, in float NoV ){\n                const vec4 c0 = vec4( -1.0f, -0.0275f, -0.572f, 0.022f );\n                const vec4 c1 = vec4( 1.0f, 0.0425f, 1.04f, -0.04f );\n                vec4 r = roughness * c0 + c1;\n                float a004 = min( r.x * r.x, exp2( -9.28f * NoV ) ) * r.x + r.y;\n                vec2 ab = vec2( -1.04f, 1.04f ) * a004 + r.zw;\n                return specular * ab.x + ab.y;\n            }\n            // 近似镜面IBL多项式\n            vec3 approximateSpecularIBLPolynomial(in samplerCube envMap, in vec3 specularColor , in float roughness, in float ndotv, in vec3 refVec, in float mipMaps){\n                float lod = sqrt( roughness ) * (mipMaps - 1.0f);\n                vec3 prefilteredColor = textureLod(envMap, refVec.xyz, lod).rgb;\n                return prefilteredColor * integrateBRDFApprox(specularColor, roughness, ndotv);\n            }\n            #define GAMMA 2.2f\n            #define GAMMA_T 1.0f / GAMMA\n            void main(){\n                float depth = texture(Context.InGDepth, uv0).r;\n                if(depth >= 1.0){\n                    Context.OutColor = vec4(0.0f, 0.0f, 0.0f, 1.0f);\n                    return;\n                }\n                vec3 wPosition = getPosition(depth, uv0);\n                vec4 buff0 = texture(Context.InGBuffer0, uv0);\n                vec4 buff2 = texture(Context.InGBuffer2, uv0);\n                vec3 _diffuseColor = floor(buff0.rgb) * 0.01f * Context.AmbientLightColor;\n                vec3 _specularColor = floor(buff2.rgb) * 0.01f;\n                vec3 ao = min(fract(buff0.rgb) * 10.0f, vec3(1.0f));\n                vec3 fZero = min(fract(buff2.rgb) * 10.0f, vec3(1.0f));\n                float _roughness = floor(buff2.w) * 0.01f;\n                vec3 n = texture(Context.InGBuffer1, uv0).xyz;\n                vec3 normal = normalize(floor(n) * 0.001f);\n                vec3 wNormal = normalize(fract(n) * 1000.0f);\n                // 计算光照\n                vec4 lightColor;\n                vec4 lightData1;\n                vec4 lightDir = vec4(0.0f);\n                vec3 lightVec = vec3(0.0f);\n                vec3 directLighting = vec3(0.0f);\n                vec3 viewDir = normalize(Context.CameraPosition.xyz - wPosition.xyz);\n\n                float ndotv = max( dot( normal, viewDir ), 0.0f );\n                if(Context.MultiId == 0){\n                    for( int i = 0;i < Context.CurLightCount;i+=3 ){\n                        lightColor = Context.WLightData[i];\n                        lightData1 = Context.WLightData[i + 1];\n                        ComputeLightDir(wPosition, lightColor.w, lightData1, lightDir, lightVec);\n\n                        // 计算PointLight的衰减\n                        float spotFallOff = 1.0 * lightDir.w;\n                        // 计算SpotLight的衰减\n                        if( lightColor.w > 1.0f )\n                        {\n                            // 计算SpotLight的范围衰减\n                            spotFallOff = ComputeSpotFalloff( Context.WLightData[i + 2], lightDir.xyz );\n                        }\n\n                        ComputeDirectLighting(normal, viewDir, lightDir.xyz, lightColor.rgb, _diffuseColor.rgb, fZero, _roughness, ndotv, directLighting);\n                        Context.OutColor.rgb += directLighting * spotFallOff;\n                    }\n                }\n                else{\n                    lightColor = Context.WLight_Data_0;\n                    lightData1 = Context.WLight_Data_1;\n                    ComputeLightDir(wPosition, lightColor.w, lightData1, lightDir, lightVec);\n\n                    // 计算PointLight的衰减\n                    float spotFallOff = 1.0 * lightDir.w;\n                    // 计算SpotLight的衰减\n                    if( lightColor.w > 1.0f )\n                    {\n                        // 计算SpotLight的范围衰减\n                        spotFallOff = ComputeSpotFalloff( Context.WLight_Data_2, lightDir.xyz );\n                    }\n\n                    ComputeDirectLighting(normal, viewDir, lightDir.xyz, lightColor.rgb, _diffuseColor.rgb, fZero, _roughness, ndotv, directLighting);\n                    Context.OutColor.rgb += directLighting * spotFallOff;\n                }\n\n                if(Context.BlendGiProbes){\n                    #ifdef Context.GIProbes\n                        // 作为webGL项目,暂时不实现探针混合(但作为可拓展,仍然加结尾s命名)\n\n                        // 计算反射视线\n                        vec3 _rv = reflect( -viewDir.xyz, normal.xyz );\n                        float _r = fract( Context.WGIProbe.w );\n                        float _mipMaps = Context.WGIProbe.w - _r;\n                        _rv = _r * ( wPosition.xyz - Context.WGIProbe.xyz ) + _rv;\n\n                        // 使用球谐计算diffuse( 避免Irr采样 )\n                        vec3 giLighting = sphericalHarmonics(normal.xyz, Context.ShCoeffs) * _diffuseColor.rgb;\n\n                        float horiz = dot(_rv, wNormal);\n                        float horizFadePower = 1.0f - _roughness;\n                        horiz = clamp( 1.0f + horizFadePower * horiz, 0.0f, 1.0f );\n                        horiz *= horiz;\n\n                        vec3 _dominantR = getSpecularDominantDir( normal, _rv.xyz, _roughness * _roughness );\n                        giLighting += approximateSpecularIBLPolynomial(Context.InPrefEnvMap, _specularColor.rgb, _roughness, ndotv, _dominantR, _mipMaps) * vec3( horiz );\n                        giLighting *= ao;\n\n                        Context.OutColor.rgb += giLighting * step( 0.0f, Context.WGIProbe.w );\n                        // Context.OutColor.rgb = textureLod(Context.InPrefEnvMap, normal.xyz, 0.0f).rgb;\n                    #endif\n                }\n\n                Context.OutColor.a = buff0.a;\n            }\n        }\n    }\n    SubTechnology GlobalPass{\n        Vars{\n            vec4 wordPosition;\n            vec2 uv0;\n            mat4 pvInverse;\n        }\n        Advanced{\n            RenderProgram TilePassIBLLighting;\n        }\n        Vs_Shader{\n            void main(){\n                Context.OutPosition = vec4(Context.InPosition, 1.0f);\n                wordPosition = Context.OutPosition;\n                uv0 = Context.InUv0;\n                pvInverse = inverse(Context.ProjectViewMatrix);\n            }\n        }\n        Fs_Shader{\n            vec3 getPosition(in float depth, in vec2 newTexCoord){\n\n                vec4 pos;\n                pos.xy = (newTexCoord * vec2(2.0)) - vec2(1.0);\n                pos.z  = depth * 2.0 - 1.0;\n                pos.w  = 1.0;\n                pos    = pvInverse * pos;\n                pos.xyz /= pos.w;\n                return pos.xyz;\n            }\n            // 计算光照方向\n            // 对于DirLight,PointLight以及SpotLight,lightType依次为0.0,1.0,2.0\n            // 输出光照方向\n            // lightDir.w存储衰减率(对于DirLight,衰减值一直为1,对于Point或Spot,衰减值随着半径而变小,衰减值越小,表示衰减度越大)\n            void ComputeLightDir(in vec3 worldPos, in float lightType, in vec4 position, out vec4 lightDir, out vec3 lightVec){\n                // 只有lightType = 0.0时,posLight为0.0,否则posLight为1.0\n                float posLight = step(0.5f, lightType);\n\n                // 计算光照位置\n                // 对于DirLight,lightVec = position.xyz * sign(-0.5f) = position.xyz * -1.0f;其中position代表DirLight的方向\n                // 对于PointLight和SpotLight,lightVec = position.xyz * sign(1.0f - 0.5f) - (worldPos * 1.0f) = positions.xyz * 1.0f - worldPos;其中position代表Light的位置\n                lightVec = position.xyz * sign(posLight - 0.5f) - (worldPos * posLight);\n                float dist = length(lightVec);\n\n                #ifndef Context.Srgb\n                    lightDir.w = (1.0f - position.w * dist) / (1.0f + position.w * dist * dist);\n                    lightDir.w = clamp(lightDir.w, 1.0f - posLight, 1.0f);\n                #else\n                    // 对于DirLight,lightDir.w = 1.0f\n                    lightDir.w = clamp(1.0f - position.w * dist * posLight, 0.0f, 1.0f);\n                #endif\n\n                // 归一化\n                lightDir.xyz = lightVec / vec3(dist);\n            }\n            #define PI 3.14159265358979323846264\n            // 镜面反射菲涅尔计算\n            vec3 F_Shlick(float vh,\tvec3 F0){\n                float fresnelFact = pow(2.0f, (-5.55473f * vh - 6.98316f) * vh);\n                return mix(F0, vec3(1.0f, 1.0f, 1.0f), fresnelFact);\n            }\n            vec3 F_Schlick2(float cosTheta, vec3 F0)\n            {\n                return F0 + (1.0f - F0) * pow(1.0f - cosTheta, 5.0f);\n            }\n            // 计算直接光照\n            void ComputeDirectLighting(in vec3 normal, in vec3 viewDir, in vec3 lightDir, in vec3 lightColor, in vec3 diffuseColor, in vec3 fZero, in float roughness, in float ndotv, out vec3 directLighting){\n                vec3 h = normalize(lightDir + viewDir);\n                float ndotl = max( dot( normal, lightDir ), 0.0f );\n                float ndoth = max( dot( normal, h), 0.0f );\n                float hdotv = max( dot( h, viewDir ), 0.0f );\n\n                // 这里,不使用c/Π计算diffuse fr(x, wi, wo)\n                // 而假设恒定\n                vec3 diffuse = vec3( ndotl ) * lightColor * diffuseColor;\n\n                // cook-torrence,BRDF : http://blog.selfshadow.com/publications/s2013-shading-course/karis/s2013_pbs_epic_notes_v2.pdf\n                float alpha = roughness * roughness;\n\n                // D, GGX 法线分布函数\n                float alpha2 = alpha * alpha;\n                float sum = (( ndoth * ndoth ) * ( alpha2 - 1.0f ) + 1.0f);\n                float denom = PI * sum * sum;\n                float D = alpha2 / denom;\n\n                // F, 菲涅尔项\n                vec3 F = F_Shlick( hdotv, fZero );\n\n                // G, 几何遮挡项\n                float k = alpha * 0.5f;\n                float G_V = ndotv + sqrt( ( ndotv - ndotv * k ) * ndotv + k );\n                float G_L = ndotl + sqrt( ( ndotl - ndotl * k ) * ndotl + k );\n                float G = 1.0f / max( G_V * G_L ,0.01f );\n\n                // specularBRDF\n                float t = D * G * ndotl;\n                vec3 specular =  vec3( t ) * F * lightColor;\n\n                directLighting = diffuse + specular;\n            }\n            // 返回Spot范围衰减\n            float ComputeSpotFalloff(in vec4 spotDirection, in vec3 lightDir){\n                float curAngleCos = dot(lightDir, -spotDirection.xyz);\n                float innerAngleCos = floor(spotDirection.w) * 0.001f;\n                float outerAngleCos = fract(spotDirection.w);\n                float innerMinusOuter = innerAngleCos - outerAngleCos;\n\n                #ifndef Context.Srgb\n                    // 使用二次衰减（请注意^ 4）\n                    return pow(clamp((curAngleCos - outerAngleCos) / innerMinusOuter, 0.0f, 1.0f), 4.0f);\n                #else\n                    // 线性空间衰减\n                    return clamp((curAngleCos - outerAngleCos) / innerMinusOuter, step(spotDirection.w, 0.001f), 1.0f);\n                #endif\n            }\n            // 球谐函数\n            vec3 sphericalHarmonics( const in vec3 normal, const vec3 sph[9] ){\n                float x = normal.x;\n                float y = normal.y;\n                float z = normal.z;\n\n                vec3 result = (\n                    sph[0] +\n\n                    sph[1] * y +\n                    sph[2] * z +\n                    sph[3] * x +\n\n                    sph[4] * y * x +\n                    sph[5] * y * z +\n                    sph[6] * (3.0f * z * z - 1.0f) +\n                    sph[7] * (z * x) +\n                    sph[8] * (x*x - y*y)\n                );\n\n                return max(result, vec3(0.0f));\n            }\n            // 镜面反射趋势朝向\n            vec3 getSpecularDominantDir(const in vec3 N, const in vec3 R, const in float realRoughness){\n\n                float smoothness = 1.0f - realRoughness;\n                float lerpFactor = smoothness * (sqrt(smoothness) + realRoughness);\n                // 当我们在立方体贴图中获取时，结果未规范化\n                vec3 dominant = mix(N, R, lerpFactor);\n\n                return dominant;\n            }\n            // 拟合方程\n            // 关于镜面部分，有很多优化地方，除了常见的优化，还有很多可以替代方案，几乎可以在保证画质的前提下，在移动端35帧率提升到60帧率，详细可参考我的笔记:https://www.cnblogs.com/JhonKkk/p/14313882.html\n            vec3 integrateBRDFApprox( const in vec3 specular, in float roughness, in float NoV ){\n                const vec4 c0 = vec4( -1.0f, -0.0275f, -0.572f, 0.022f );\n                const vec4 c1 = vec4( 1.0f, 0.0425f, 1.04f, -0.04f );\n                vec4 r = roughness * c0 + c1;\n                float a004 = min( r.x * r.x, exp2( -9.28f * NoV ) ) * r.x + r.y;\n                vec2 ab = vec2( -1.04f, 1.04f ) * a004 + r.zw;\n                return specular * ab.x + ab.y;\n            }\n            // 近似镜面IBL多项式\n            vec3 approximateSpecularIBLPolynomial(in samplerCube envMap, in vec3 specularColor , in float roughness, in float ndotv, in vec3 refVec, in float mipMaps){\n                float lod = sqrt( roughness ) * (mipMaps - 1.0f);\n                vec3 prefilteredColor = textureLod(envMap, refVec.xyz, lod).rgb;\n                return prefilteredColor * integrateBRDFApprox(specularColor, roughness, ndotv);\n            }\n            #define GAMMA 2.2f\n            #define GAMMA_T 1.0f / GAMMA\n            void main(){\n                float depth = texture(Context.InGDepth, uv0).r;\n                if(depth >= 1.0){\n                    Context.OutColor = vec4(0.0f, 0.0f, 0.0f, 1.0f);\n                    return;\n                }\n                vec3 wPosition = getPosition(depth, uv0);\n                vec4 buff0 = texture(Context.InGBuffer0, uv0);\n                vec4 buff2 = texture(Context.InGBuffer2, uv0);\n                vec3 _diffuseColor = floor(buff0.rgb) * 0.01f * Context.AmbientLightColor;\n                vec3 _specularColor = floor(buff2.rgb) * 0.01f;\n                vec3 ao = min(fract(buff0.rgb) * 10.0f, vec3(1.0f));\n                vec3 fZero = min(fract(buff2.rgb) * 10.0f, vec3(0.5f));\n                float _roughness = floor(buff2.w) * 0.01f;\n                vec3 n = texture(Context.InGBuffer1, uv0).xyz;\n                vec3 normal = normalize(floor(n) * 0.001f);\n                vec3 wNormal = normalize(fract(n) * 1000.0f);\n                // 计算光照\n                vec4 lightColor;\n                vec4 lightData1;\n                vec4 lightDir = vec4(0.0f);\n                vec3 lightVec = vec3(0.0f);\n                vec3 directLighting = vec3(0.0f);\n                vec3 viewDir = normalize(Context.CameraPosition.xyz - wPosition.xyz);\n\n                float ndotv = max( dot( normal, viewDir ), 0.0f );\n                for( int i = 0;i < Context.CurLightCount;i+=3 ){\n                    lightColor = Context.WLightData[i];\n                    lightData1 = Context.WLightData[i + 1];\n                    ComputeLightDir(wPosition, lightColor.w, lightData1, lightDir, lightVec);\n\n                    // 计算PointLight的衰减\n                    float spotFallOff = 1.0 * lightDir.w;\n                    // 计算SpotLight的衰减\n                    if( lightColor.w > 1.0f )\n                    {\n                        // 计算SpotLight的范围衰减\n                        spotFallOff = ComputeSpotFalloff( Context.WLightData[i + 2], lightDir.xyz );\n                    }\n\n                    ComputeDirectLighting(normal, viewDir, lightDir.xyz, lightColor.rgb, _diffuseColor.rgb, fZero, _roughness, ndotv, directLighting);\n                    Context.OutColor.rgb += directLighting * spotFallOff;\n                }\n\n                if(Context.BlendGiProbes){\n                    #ifdef Context.GIProbes\n                        // 作为webGL项目,暂时不实现探针混合(但作为可拓展,仍然加结尾s命名)\n\n                        // 计算反射视线\n                        vec3 _rv = reflect( -viewDir.xyz, normal.xyz );\n                        float _r = fract( Context.WGIProbe.w );\n                        float _mipMaps = Context.WGIProbe.w - _r;\n                        _rv = _r * ( wPosition.xyz - Context.WGIProbe.xyz ) + _rv;\n\n                        // 使用球谐计算diffuse( 避免Irr采样 )\n                        vec3 giLighting = sphericalHarmonics(normal.xyz, Context.ShCoeffs) * _diffuseColor.rgb;\n\n                        float horiz = dot(_rv, wNormal);\n                        float horizFadePower = 1.0f - _roughness;\n                        horiz = clamp( 1.0f + horizFadePower * horiz, 0.0f, 1.0f );\n                        horiz *= horiz;\n\n                        vec3 _dominantR = getSpecularDominantDir( normal, _rv.xyz, _roughness * _roughness );\n                        giLighting += approximateSpecularIBLPolynomial(Context.InPrefEnvMap, _specularColor.rgb, _roughness, ndotv, _dominantR, _mipMaps) * vec3( horiz );\n                        giLighting *= ao;\n\n                        Context.OutColor.rgb += giLighting * step( 0.0f, Context.WGIProbe.w );\n                        // Context.OutColor.rgb = textureLod(Context.InPrefEnvMap, normal.xyz, 0.0f).rgb;\n                    #endif\n                }\n                Context.OutColor.a = buff0.a;\n            }\n        }\n    }\n    SubTechnology TilePass{\n        Vars{\n            vec4 wordPosition;\n            vec2 uv0;\n            mat4 pvInverse;\n        }\n        Advanced{\n            RenderProgram TilePassIBLLighting;\n        }\n        Vs_Shader{\n            void main(){\n                Context.OutPosition = vec4(Context.InPosition, 1.0f);\n                wordPosition = Context.OutPosition;\n                uv0 = Context.InUv0;\n                pvInverse = inverse(Context.ProjectViewMatrix);\n            }\n        }\n        Fs_Shader{\n            vec3 getPosition(in float depth, in vec2 newTexCoord){\n\n                vec4 pos;\n                pos.xy = (newTexCoord * vec2(2.0)) - vec2(1.0);\n                pos.z  = depth * 2.0 - 1.0;\n                pos.w  = 1.0;\n                pos    = pvInverse * pos;\n                pos.xyz /= pos.w;\n                return pos.xyz;\n            }\n            // 计算光照方向\n            // 对于DirLight,PointLight以及SpotLight,lightType依次为0.0,1.0,2.0\n            // 输出光照方向\n            // lightDir.w存储衰减率(对于DirLight,衰减值一直为1,对于Point或Spot,衰减值随着半径而变小,衰减值越小,表示衰减度越大)\n            void ComputeLightDir(in vec3 worldPos, in float lightType, in vec4 position, out vec4 lightDir, out vec3 lightVec){\n                // 只有lightType = 0.0时,posLight为0.0,否则posLight为1.0\n                float posLight = step(0.5f, lightType);\n\n                // 计算光照位置\n                // 对于DirLight,lightVec = position.xyz * sign(-0.5f) = position.xyz * -1.0f;其中position代表DirLight的方向\n                // 对于PointLight和SpotLight,lightVec = position.xyz * sign(1.0f - 0.5f) - (worldPos * 1.0f) = positions.xyz * 1.0f - worldPos;其中position代表Light的位置\n                lightVec = position.xyz * sign(posLight - 0.5f) - (worldPos * posLight);\n                float dist = length(lightVec);\n\n                #ifndef Context.Srgb\n                    lightDir.w = (1.0f - position.w * dist) / (1.0f + position.w * dist * dist);\n                    lightDir.w = clamp(lightDir.w, 1.0f - posLight, 1.0f);\n                #else\n                    // 对于DirLight,lightDir.w = 1.0f\n                    lightDir.w = clamp(1.0f - position.w * dist * posLight, 0.0f, 1.0f);\n                #endif\n\n                // 归一化\n                lightDir.xyz = lightVec / vec3(dist);\n            }\n            #define PI 3.14159265358979323846264\n            // 镜面反射菲涅尔计算\n            vec3 F_Shlick(float vh,\tvec3 F0){\n                float fresnelFact = pow(2.0f, (-5.55473f * vh - 6.98316f) * vh);\n                return mix(F0, vec3(1.0f, 1.0f, 1.0f), fresnelFact);\n            }\n            vec3 F_Schlick2(float cosTheta, vec3 F0)\n            {\n                return F0 + (1.0f - F0) * pow(1.0f - cosTheta, 5.0f);\n            }\n            // 计算直接光照\n            void ComputeDirectLighting(in vec3 normal, in vec3 viewDir, in vec3 lightDir, in vec3 lightColor, in vec3 diffuseColor, in vec3 fZero, in float roughness, in float ndotv, out vec3 directLighting){\n                vec3 h = normalize(lightDir + viewDir);\n                float ndotl = max( dot( normal, lightDir ), 0.0f );\n                float ndoth = max( dot( normal, h), 0.0f );\n                float hdotv = max( dot( h, viewDir ), 0.0f );\n\n                // 这里,不使用c/Π计算diffuse fr(x, wi, wo)\n                // 而假设恒定\n                vec3 diffuse = vec3( ndotl ) * lightColor * diffuseColor;\n\n                // cook-torrence,BRDF : http://blog.selfshadow.com/publications/s2013-shading-course/karis/s2013_pbs_epic_notes_v2.pdf\n                float alpha = roughness * roughness;\n\n                // D, GGX 法线分布函数\n                float alpha2 = alpha * alpha;\n                float sum = (( ndoth * ndoth ) * ( alpha2 - 1.0f ) + 1.0f);\n                float denom = PI * sum * sum;\n                float D = alpha2 / denom;\n\n                // F, 菲涅尔项\n                vec3 F = F_Shlick( hdotv, fZero );\n\n                // G, 几何遮挡项\n                float k = alpha * 0.5f;\n                float G_V = ndotv + sqrt( ( ndotv - ndotv * k ) * ndotv + k );\n                float G_L = ndotl + sqrt( ( ndotl - ndotl * k ) * ndotl + k );\n                float G = 1.0f / max( G_V * G_L ,0.01f );\n\n                // specularBRDF\n                float t = D * G * ndotl;\n                vec3 specular =  vec3( t ) * F * lightColor;\n\n                directLighting = diffuse + specular;\n            }\n            // 返回Spot范围衰减\n            float ComputeSpotFalloff(in vec4 spotDirection, in vec3 lightDir){\n                float curAngleCos = dot(lightDir, -spotDirection.xyz);\n                float innerAngleCos = floor(spotDirection.w) * 0.001f;\n                float outerAngleCos = fract(spotDirection.w);\n                float innerMinusOuter = innerAngleCos - outerAngleCos;\n\n                #ifndef Context.Srgb\n                    // 使用二次衰减（请注意^ 4）\n                    return pow(clamp((curAngleCos - outerAngleCos) / innerMinusOuter, 0.0f, 1.0f), 4.0f);\n                #else\n                    // 线性空间衰减\n                    return clamp((curAngleCos - outerAngleCos) / innerMinusOuter, step(spotDirection.w, 0.001f), 1.0f);\n                #endif\n            }\n            // 球谐函数\n            vec3 sphericalHarmonics( const in vec3 normal, const vec3 sph[9] ){\n                float x = normal.x;\n                float y = normal.y;\n                float z = normal.z;\n\n                vec3 result = (\n                    sph[0] +\n\n                    sph[1] * y +\n                    sph[2] * z +\n                    sph[3] * x +\n\n                    sph[4] * y * x +\n                    sph[5] * y * z +\n                    sph[6] * (3.0f * z * z - 1.0f) +\n                    sph[7] * (z * x) +\n                    sph[8] * (x*x - y*y)\n                );\n\n                return max(result, vec3(0.0f));\n            }\n            // 镜面反射趋势朝向\n            vec3 getSpecularDominantDir(const in vec3 N, const in vec3 R, const in float realRoughness){\n\n                float smoothness = 1.0f - realRoughness;\n                float lerpFactor = smoothness * (sqrt(smoothness) + realRoughness);\n                // 当我们在立方体贴图中获取时，结果未规范化\n                vec3 dominant = mix(N, R, lerpFactor);\n\n                return dominant;\n            }\n            // 拟合方程\n            // 关于镜面部分，有很多优化地方，除了常见的优化，还有很多可以替代方案，几乎可以在保证画质的前提下，在移动端35帧率提升到60帧率，详细可参考我的笔记:https://www.cnblogs.com/JhonKkk/p/14313882.html\n            vec3 integrateBRDFApprox( const in vec3 specular, in float roughness, in float NoV ){\n                const vec4 c0 = vec4( -1.0f, -0.0275f, -0.572f, 0.022f );\n                const vec4 c1 = vec4( 1.0f, 0.0425f, 1.04f, -0.04f );\n                vec4 r = roughness * c0 + c1;\n                float a004 = min( r.x * r.x, exp2( -9.28f * NoV ) ) * r.x + r.y;\n                vec2 ab = vec2( -1.04f, 1.04f ) * a004 + r.zw;\n                return specular * ab.x + ab.y;\n            }\n            // 近似镜面IBL多项式\n            vec3 approximateSpecularIBLPolynomial(in samplerCube envMap, in vec3 specularColor , in float roughness, in float ndotv, in vec3 refVec, in float mipMaps){\n                float lod = sqrt( roughness ) * (mipMaps - 1.0f);\n                vec3 prefilteredColor = textureLod(envMap, refVec.xyz, lod).rgb;\n                return prefilteredColor * integrateBRDFApprox(specularColor, roughness, ndotv);\n            }\n            #define GAMMA 2.2f\n            #define GAMMA_T 1.0f / GAMMA\n            void main(){\n                float depth = texture(Context.InGDepth, uv0).r;\n                if(depth >= 1.0){\n                    Context.OutColor = vec4(0.0f, 0.0f, 0.0f, 1.0f);\n                    return;\n                }\n                vec3 wPosition = getPosition(depth, uv0);\n                vec4 buff0 = texture(Context.InGBuffer0, uv0);\n                vec4 buff2 = texture(Context.InGBuffer2, uv0);\n                vec3 _diffuseColor = floor(buff0.rgb) * 0.01f * Context.AmbientLightColor;\n                vec3 _specularColor = floor(buff2.rgb) * 0.01f;\n                vec3 ao = min(fract(buff0.rgb) * 10.0f, vec3(1.0f));\n                vec3 fZero = min(fract(buff2.rgb) * 10.0f, vec3(0.5f));\n                float _roughness = floor(buff2.w) * 0.01f;\n                vec3 n = texture(Context.InGBuffer1, uv0).xyz;\n                vec3 normal = normalize(floor(n) * 0.001f);\n                vec3 wNormal = normalize(fract(n) * 1000.0f);\n                // 计算光照\n                vec4 lightColor;\n                vec4 lightData1;\n                vec4 lightDir = vec4(0.0f);\n                vec3 lightVec = vec3(0.0f);\n                vec3 directLighting = vec3(0.0f);\n                vec3 viewDir = normalize(Context.CameraPosition.xyz - wPosition.xyz);\n\n                Context.OutColor.rgb = vec3(0.0f);\n                // Tile Based Shading\n                // 获取tile信息\n                vec3 tile = texture(Context.InTileLightDecode, uv0).xyz;\n                int uoffset = int(tile.x);\n                int voffset = int(tile.z);\n                int count = int(tile.y);\n                if(count > 0){\n                    int lightId;\n                    float temp;\n                    int offset;\n                    // lightIndex采样范围规范化单位\n                    float uvSize = 1.0f / (Context.TileLightOffsetSize - 1.0f);\n                    vec2 lightUV;\n                    // lightData采样范围规范单位\n                    float lightUVSize = 1.0f / (float(Context.TileLightNum) - 1.0f);\n                    vec2 lightDataUV;\n                    for(int i = 0;i < count;i++){\n                        temp = float(uoffset + i);\n                        offset = 0;\n\n                        if(temp >= Context.TileLightOffsetSize){\n                            temp -= Context.TileLightOffsetSize;\n                            offset++;\n                        }\n                        if(temp == Context.TileLightOffsetSize){\n                            temp = 0.0f;\n                        }\n\n                        // lightIndexUV\n                        lightUV = vec2(temp * uvSize, float(voffset + offset) * uvSize);\n                        lightId = int(texture(Context.InTileLightIndex, lightUV).x);\n\n                        // 光源信息\n                        lightDataUV = vec2(float(lightId) * lightUVSize);\n                        lightColor = texture(Context.InTileWLightData0, lightDataUV);\n                        lightData1 = texture(Context.InTileWLightData1, lightDataUV);\n\n                        float ndotv = max( dot( normal, viewDir ), 0.0f );\n                        ComputeLightDir(wPosition, lightColor.w, lightData1, lightDir, lightVec);\n\n                        // 计算PointLight的衰减\n                        float spotFallOff = 1.0 * lightDir.w;\n                        // 计算SpotLight的衰减\n                        if( lightColor.w > 1.0f )\n                        {\n                            // 计算SpotLight的范围衰减\n                            spotFallOff = ComputeSpotFalloff( texture(Context.InTileWLightData2, lightDataUV), lightDir.xyz );\n                        }\n\n                        ComputeDirectLighting(normal, viewDir, lightDir.xyz, lightColor.rgb, _diffuseColor.rgb, fZero, _roughness, ndotv, directLighting);\n                        Context.OutColor.rgb += directLighting * spotFallOff;\n                    }\n                }\n                Context.OutColor.a = buff0.a;\n            }\n        }\n    }\n    Technology{\n        Sub_Pass DeferredShading{\n            Pass GBufferPass{\n            }\n            Pass DeferredShadingPass{\n            }\n        }\n    }\n    Technology MultiPassDeferred{\n        Sub_Pass DeferredShading{\n            Pass GBufferPass{\n            }\n            Pass DeferredShadingPass2{\n            }\n        }\n    }\n    Technology TileDeferred{\n        Sub_Pass TileDeferredShading{\n            Pass GBufferPass{\n            }\n            Pass GlobalPass{\n            }\n            Pass TilePass{\n            }\n        }\n    }\n}\n";static S_PRINCIPLED_LIGHTING_DEF="// 原理化光照材质定义\nDef PrincipledLightingDef{\n    Params{\n        // 基础参数\n        vec4 baseColor;\n        sampler2D baseColorMap;\n        sampler2D normalMap;\n\n        // lightMap或AO\n        sampler2D lightMap;\n        bool aoMap;\n        bool lightMapTexCoord;\n\n        // 自发光\n        sampler2D emissiveMap;\n        vec4 emissive;\n        float emissivePower;\n        float emissiveIntensity;\n\n        // metallic管线\n        float metallic;\n        float roughness;\n        sampler2D metallicRoughnessMap;\n        sampler2D metallicMap;\n        sampler2D roughnessMap;\n\n        // specular管线\n        bool useSpecGloss;\n        sampler2D specularGlossinessMap;\n        sampler2D specularMap;\n        sampler2D glossinessMap;\n        vec4 specular;\n        float glossiness;\n\n        // alphaDiscard\n        float alphaDiscard;\n    }\n    SubTechnology SPPrincipledLighting{\n        Vars{\n            vec3 wNormal;\n            vec4 wTangent;\n            vec3 wPosition;\n            vec2 wUv0;\n            vec2 wUv1;\n        }\n        Advanced{\n            RenderProgram SinglePassIBLLighting;\n        }\n        Vs_Shader{\n            void main(){\n                #ifdef Context.Skins\n                    mat4 skinMat =\n                            Context.InWeight0.x * Context.Joints[int(Context.InJoint0.x)] +\n                            Context.InWeight0.y * Context.Joints[int(Context.InJoint0.y)] +\n                            Context.InWeight0.z * Context.Joints[int(Context.InJoint0.z)] +\n                            Context.InWeight0.w * Context.Joints[int(Context.InJoint0.w)];\n                    // vec4 pos = Context.ModelMatrix * skinMat * vec4(Context.InPosition, 1.0f);\n                    vec4 pos = skinMat * vec4(Context.InPosition, 1.0f);\n                #else\n                    vec4 pos = Context.ModelMatrix * vec4(Context.InPosition, 1.0f);\n                #endif\n\n\n                wPosition = pos.xyz;\n                mat3 nMat = mat3(transpose(inverse(Context.ModelMatrix)));\n                vec3 norm = normalize(nMat * Context.InNormal);\n                //vec3 t = normalize(nMat * Context.InTangent);\n                wTangent = vec4(normalize(nMat * Context.InTangent.xyz), Context.InTangent.w);\n                //t = normalize(t - dot(t, norm) * norm);\n                //vec3 b = cross(norm, t);\n                //tbnMat = mat3(t, b, norm);\n                wNormal = norm;\n                wUv0 = Context.InUv0;\n                #ifdef Params.lightMapTexCoord\n                    wUv1 = Context.InUv1;\n                #endif\n\n\n                Context.OutPosition = Context.ProjectViewMatrix * pos;\n            }\n        }\n\n        Fs_Shader{\n            // 计算光照方向\n            // 对于DirLight,PointLight以及SpotLight,lightType依次为0.0,1.0,2.0\n            // 输出光照方向\n            // lightDir.w存储衰减率(对于DirLight,衰减值一直为1,对于Point或Spot,衰减值随着半径而变小,衰减值越小,表示衰减度越大)\n            void ComputeLightDir(in vec3 worldPos, in float lightType, in vec4 position, out vec4 lightDir, out vec3 lightVec){\n                // 只有lightType = 0.0时,posLight为0.0,否则posLight为1.0\n                float posLight = step(0.5f, lightType);\n\n                // 计算光照位置\n                // 对于DirLight,lightVec = position.xyz * sign(-0.5f) = position.xyz * -1.0f;其中position代表DirLight的方向\n                // 对于PointLight和SpotLight,lightVec = position.xyz * sign(1.0f - 0.5f) - (worldPos * 1.0f) = positions.xyz * 1.0f - worldPos;其中position代表Light的位置\n                lightVec = position.xyz * sign(posLight - 0.5f) - (worldPos * posLight);\n                float dist = length(lightVec);\n\n                #ifndef Context.Srgb\n                    lightDir.w = (1.0f - position.w * dist) / (1.0f + position.w * dist * dist);\n                    lightDir.w = clamp(lightDir.w, 1.0f - posLight, 1.0f);\n                #else\n                    // 对于DirLight,lightDir.w = 1.0f\n                    lightDir.w = clamp(1.0f - position.w * dist * posLight, 0.0f, 1.0f);\n                #endif\n\n                // 归一化\n                lightDir.xyz = lightVec / vec3(dist);\n            }\n            #define PI 3.14159265358979323846264\n            // 镜面反射菲涅尔计算\n            vec3 F_Shlick(float vh,\tvec3 F0){\n            \tfloat fresnelFact = pow(2.0f, (-5.55473f * vh - 6.98316f) * vh);\n            \treturn mix(F0, vec3(1.0f, 1.0f, 1.0f), fresnelFact);\n            }\n            vec3 F_Schlick2(float cosTheta, vec3 F0)\n            {\n                return F0 + (1.0f - F0) * pow(1.0f - cosTheta, 5.0f);\n            }\n            // 计算直接光照\n            void ComputeDirectLighting(in vec3 normal, in vec3 viewDir, in vec3 lightDir, in vec3 lightColor, in vec3 diffuseColor, in vec3 fZero, in float roughness, in float ndotv, out vec3 directLighting){\n                vec3 h = normalize(lightDir + viewDir);\n                float ndotl = max( dot( normal, lightDir ), 0.0f );\n                float ndoth = max( dot( normal, h), 0.0f );\n                float hdotv = max( dot( h, viewDir ), 0.0f );\n\n                // 这里,不使用c/Π计算diffuse fr(x, wi, wo)\n                // 而假设恒定\n                vec3 diffuse = vec3( ndotl ) * lightColor * diffuseColor;\n\n                // cook-torrence,BRDF : http://blog.selfshadow.com/publications/s2013-shading-course/karis/s2013_pbs_epic_notes_v2.pdf\n                float alpha = roughness * roughness;\n\n                // D, GGX 法线分布函数\n                float alpha2 = alpha * alpha;\n                float sum = (( ndoth * ndoth ) * ( alpha2 - 1.0f ) + 1.0f);\n                float denom = PI * sum * sum;\n                float D = alpha2 / denom;\n\n                // F, 菲涅尔项\n                vec3 F = F_Shlick( hdotv, fZero );\n\n                // G, 几何遮挡项\n                float k = alpha * 0.5f;\n                float G_V = ndotv + sqrt( ( ndotv - ndotv * k ) * ndotv + k );\n                float G_L = ndotl + sqrt( ( ndotl - ndotl * k ) * ndotl + k );\n                float G = 1.0f / max( G_V * G_L ,0.01f );\n\n                // specularBRDF\n                float t = D * G * ndotl;\n                vec3 specular =  vec3( t ) * F * lightColor;\n\n                directLighting = diffuse + specular;\n            }\n            // 返回Spot范围衰减\n            float ComputeSpotFalloff(in vec4 spotDirection, in vec3 lightDir){\n                float curAngleCos = dot(lightDir, -spotDirection.xyz);\n                float innerAngleCos = floor(spotDirection.w) * 0.001f;\n                float outerAngleCos = fract(spotDirection.w);\n                float innerMinusOuter = innerAngleCos - outerAngleCos;\n\n                #ifndef Context.Srgb\n                    // 使用二次衰减（请注意^ 4）\n                    return pow(clamp((curAngleCos - outerAngleCos) / innerMinusOuter, 0.0f, 1.0f), 4.0f);\n                #else\n                    // 线性空间衰减\n                    return clamp((curAngleCos - outerAngleCos) / innerMinusOuter, step(spotDirection.w, 0.001f), 1.0f);\n                #endif\n            }\n            // 球谐函数\n            vec3 sphericalHarmonics( const in vec3 normal, const vec3 sph[9] ){\n                float x = normal.x;\n                float y = normal.y;\n                float z = normal.z;\n\n                vec3 result = (\n                    sph[0] +\n\n                    sph[1] * y +\n                    sph[2] * z +\n                    sph[3] * x +\n\n                    sph[4] * y * x +\n                    sph[5] * y * z +\n                    sph[6] * (3.0f * z * z - 1.0f) +\n                    sph[7] * (z * x) +\n                    sph[8] * (x*x - y*y)\n                );\n\n                return max(result, vec3(0.0f));\n            }\n            // 镜面反射趋势朝向\n            vec3 getSpecularDominantDir(const in vec3 N, const in vec3 R, const in float realRoughness){\n\n                float smoothness = 1.0f - realRoughness;\n                float lerpFactor = smoothness * (sqrt(smoothness) + realRoughness);\n                // 当我们在立方体贴图中获取时，结果未规范化\n                vec3 dominant = mix(N, R, lerpFactor);\n\n                return dominant;\n            }\n            // 拟合方程\n            // 关于镜面部分，有很多优化地方，除了常见的优化，还有很多可以替代方案，几乎可以在保证画质的前提下，在移动端35帧率提升到60帧率，详细可参考我的笔记:https://www.cnblogs.com/JhonKkk/p/14313882.html\n            vec3 integrateBRDFApprox( const in vec3 specular, in float roughness, in float NoV ){\n                const vec4 c0 = vec4( -1.0f, -0.0275f, -0.572f, 0.022f );\n                const vec4 c1 = vec4( 1.0f, 0.0425f, 1.04f, -0.04f );\n                vec4 r = roughness * c0 + c1;\n                float a004 = min( r.x * r.x, exp2( -9.28f * NoV ) ) * r.x + r.y;\n                vec2 ab = vec2( -1.04f, 1.04f ) * a004 + r.zw;\n                return specular * ab.x + ab.y;\n            }\n            // 近似镜面IBL多项式\n            vec3 approximateSpecularIBLPolynomial(in samplerCube envMap, in vec3 specularColor , in float roughness, in float ndotv, in vec3 refVec, in float mipMaps){\n                float lod = sqrt( roughness ) * (mipMaps - 1.0f);\n                vec3 prefilteredColor = textureLod(envMap, refVec.xyz, lod).rgb;\n                return prefilteredColor * integrateBRDFApprox(specularColor, roughness, ndotv);\n            }\n            #define GAMMA 2.2f\n            #define GAMMA_T 1.0f / GAMMA\n            void main(){\n                vec4 lightColor;\n                vec4 lightData1;\n                vec4 lightDir = vec4(0.0f);\n                vec3 lightVec = vec3(0.0f);\n                vec3 directLighting = vec3(0.0f);\n                vec3 viewDir = normalize(Context.CameraPosition.xyz - wPosition.xyz);\n\n                #ifdef Params.baseColor\n                    #ifdef Params.baseColorMap\n                        vec4 albedo = texture(Params.baseColorMap, wUv0) * Params.baseColor * vec4(Context.AmbientLightColor, 1.0);\n                    #else\n                        vec4 albedo = Params.baseColor * vec4(Context.AmbientLightColor, 1.0);\n                    #endif\n                #else\n                    #ifdef Params.baseColorMap\n                        vec4 albedo = texture(Params.baseColorMap, wUv0) * vec4(Context.AmbientLightColor, 1.0);\n                    #else\n                        vec4 albedo = vec4(1.0f) * vec4(Context.AmbientLightColor, 1.0);\n                    #endif\n                #endif\n\n                #ifdef Params.alphaDiscard\n                    if(albedo.a < Params.alphaDiscard){\n                        discard;\n                    }\n                #endif\n\n                vec3 normal = wNormal;\n                #ifdef Params.normalMap\n                    // 这里做了一种简化,理论上应该在fs阶段计算tbn,但是从插值的角度来看,可以简化为tbn插值,减少在fs阶段计算tbn开销(虽然这么做不精确,但是折中下可以接受)\n                    vec3 normalHeight = texture(Params.normalMap, wUv0).xyz;\n                    vec3 tangent = normalize(wTangent.xyz);\n                    mat3 tbnMat = mat3(tangent, wTangent.w * cross(normal, tangent), normal);\n                    normal = normalize(tbnMat * ( normalHeight * 2.0f - 1.0f ));\n                #endif\n\n                #ifdef Params.metallicRoughnessMap\n                    vec2 rm = texture(Params.metallicRoughnessMap, wUv0).gb;\n                    #ifdef Params.roughness\n                        float _roughness = rm.x * max(Params.roughness, 1e-4);\n                    #else\n                        float _roughness = rm.x;\n                    #endif\n                    #ifdef Params.metallic\n                        float _metallic = rm.y * max(Params.metallic, 0.0f);\n                    #else\n                        float _metallic = rm.y;\n                    #endif\n                #else\n                    #ifdef Params.roughnessMap\n                        #ifdef Params.roughness\n                            float _roughness = texture(Params.roughnessMap, wUv0).r * max(Params.roughness, 1e-4);\n                        #else\n                            float _roughness = texture(Params.roughnessMap, wUv0).r;\n                        #endif\n                    #else\n                        #ifdef Params.roughness\n                            float _roughness = max(Params.roughness, 1e-4);\n                        #else\n                            float _roughness = 1.0f;\n                        #endif\n                    #endif\n                    #ifdef Params.metallicMap\n                        #ifdef Params.metallic\n                            float _metallic = texture(Params.metallicMap, wUv0).r * max(Params.metallic, 0.0f);\n                        #else\n                            float _metallic = texture(Params.metallicMap, wUv0).r;\n                        #endif\n                    #else\n                        #ifdef Params.metallic\n                            float _metallic = max(Params.metallic, 0.0f);\n                        #else\n                            float _metallic = 1.0f;\n                        #endif\n                    #endif\n                #endif\n\n                #ifdef Params.useSpecGloss\n                    #ifdef Params.specularGlossinessMap\n                        vec4 _specularColor = texture(Params.specularGlossinessMap, wUv0);\n                        #ifdef Params.glossiness\n                            float _glossiness = _specularColor.a * Params.glossiness;\n                        #else\n                            float _glossiness = _specularColor.a;\n                        #endif\n                        #ifdef Params.specular\n                            _specularColor *= Params.specular;\n                        #endif\n                    #else\n                        #ifdef Params.specularMap\n                            vec4 _specularColor = texture(Params.specularMap, wUv0);\n                        #else\n                            vec4 _specularColor = vec4(1.0f);\n                        #endif\n                        #ifdef Params.specular\n                            _specularColor *= Params.specular;\n                        #endif\n                        #ifdef Params.glossinessMap\n                            #ifdef Params.glossiness\n                                float _glossiness = texture(Params.glossinessMap, wUv0).r * Params.glossiness;\n                            #else\n                                float _glossiness = texture(Params.glossinessMap, wUv0).r;\n                            #endif\n                        #else\n                            #ifdef Params.glossiness\n                                float _glossiness = Params.glossiness;\n                            #else\n                                float _glossiness = 1.0f;\n                            #endif\n                        #endif\n                    #endif\n                    vec4 _diffuseColor = albedo;\n                    _roughness = 1.0f - _glossiness;\n                    vec3 fZero = _specularColor.rgb;\n                #else\n                    float nonMetalSpec = 0.04f;\n                    vec4 _specularColor = (nonMetalSpec - nonMetalSpec * _metallic) + albedo * _metallic;\n                    vec4 _diffuseColor = albedo - albedo * _metallic;\n                    vec3 fZero = vec3( 0.5f );\n                #endif\n\n                #ifdef Params.lightMap\n                    vec3 _lightMapColor;\n                    #ifdef Params.lightMapTexCoord\n                        _lightMapColor = texture(Params.lightMap, wUv1).rgb;\n                    #else\n                        _lightMapColor = texture(Params.lightMap, wUv0).rgb;\n                    #endif\n                    #ifdef Params.aoMap\n                        _lightMapColor.gb = _lightMapColor.rr;\n                        vec3 ao = _lightMapColor;\n                    #else\n                        _specularColor.rgb *= _lightMapColor;\n                        _diffuseColor.rgb  *= _lightMapColor;\n                        vec3 ao = vec3(1.0f);\n                    #endif\n                #else\n                    vec3 ao = vec3(1.0f);\n                #endif\n\n                float ndotv = max( dot( normal, viewDir ), 0.0f );\n                for( int i = 0;i < Context.CurLightCount;i+=3 ){\n                    lightColor = Context.WLightData[i];\n                    lightData1 = Context.WLightData[i + 1];\n                    ComputeLightDir(wPosition, lightColor.w, lightData1, lightDir, lightVec);\n\n                    // 计算PointLight的衰减\n                    float spotFallOff = 1.0 * lightDir.w;\n                    // 计算SpotLight的衰减\n                    if( lightColor.w > 1.0f )\n                    {\n                        // 计算SpotLight的范围衰减\n                        spotFallOff = ComputeSpotFalloff( Context.WLightData[i + 2], lightDir.xyz );\n                    }\n\n                    ComputeDirectLighting(normal, viewDir, lightDir.xyz, lightColor.rgb, _diffuseColor.rgb, fZero, _roughness, ndotv, directLighting);\n                    Context.OutColor.rgb += directLighting * spotFallOff;\n                }\n\n                if(Context.BlendGiProbes){\n                    #ifdef Context.GIProbes\n                        // 作为webGL项目,暂时不实现探针混合(但作为可拓展,仍然加结尾s命名)\n\n                        // 计算反射视线\n                        vec3 _rv = reflect( -viewDir.xyz, normal.xyz );\n                        float _r = fract( Context.WGIProbe.w );\n                        float _mipMaps = Context.WGIProbe.w - _r;\n                        _rv = _r * ( wPosition.xyz - Context.WGIProbe.xyz ) + _rv;\n\n                        // 使用球谐计算diffuse( 避免Irr采样 )\n                        vec3 giLighting = sphericalHarmonics(normal.xyz, Context.ShCoeffs) * _diffuseColor.rgb;\n\n                        float horiz = dot(_rv, wNormal);\n                        float horizFadePower = 1.0f - _roughness;\n                        horiz = clamp( 1.0f + horizFadePower * horiz, 0.0f, 1.0f );\n                        horiz *= horiz;\n\n                        vec3 _dominantR = getSpecularDominantDir( normal, _rv.xyz, _roughness * _roughness );\n                        giLighting += approximateSpecularIBLPolynomial(Context.InPrefEnvMap, _specularColor.rgb, _roughness, ndotv, _dominantR, _mipMaps) * vec3( horiz );\n                        giLighting *= ao;\n\n                        Context.OutColor.rgb += giLighting * step( 0.0f, Context.WGIProbe.w );\n                        // Context.OutColor.rgb = textureLod(Context.InPrefEnvMap, normal.xyz, 0.0f).rgb;\n                    #endif\n                }\n\n                // 唯一shading阶段,在这里处理自发光或只shading一次的逻辑\n                if(Context.UniqueShading){\n                    #ifdef Params.emissive\n                        float _emissivePower = 3.0f;\n                        #ifdef Params.emissivePower\n                            _emissivePower = Params.emissivePower;\n                        #endif\n                        float _emissiveIntensity = 2.0f;\n                        #ifdef Params.emissiveIntensity\n                            _emissiveIntensity = Params.emissiveIntensity;\n                        #endif\n                        #ifdef Params.emissiveMap\n                            vec4 eMap = texture(Params.emissiveMap, wUv0);\n                            Context.OutColor.rgb += Params.emissive.rgb * eMap.rgb * pow(Params.emissive.a * eMap.a, _emissivePower) * _emissiveIntensity;\n                        #else\n                            Context.OutColor.rgb += Params.emissive.rgb * pow(Params.emissive.a, _emissivePower) * _emissiveIntensity;\n                        #endif\n                    #else\n                        #ifdef Params.emissiveMap\n                            float _emissivePower = 3.0f;\n                            #ifdef Params.emissivePower\n                                _emissivePower = Params.emissivePower;\n                            #endif\n                            float _emissiveIntensity = 2.0f;\n                            #ifdef Params.emissiveIntensity\n                                _emisiveIntensity = Params.emissiveIntensity;\n                            #endif\n                            vec4 eMap = texture(Params.emissiveMap, wUv0);\n                            Context.OutColor.rgb += eMap.rgb * pow(eMap.a, _emissivePower) * _emissiveIntensity;\n                        #endif\n                    #endif\n                }\n\n                Context.OutColor.a = albedo.a;\n\n            }\n        }\n    }\n\n    Technology{\n        Sub_Pass{\n            Pass SPPrincipledLighting{\n            }\n        }\n    }\n}\n"}},6466:(t,e,_)=>{_.d(e,{Z:()=>i});class i{_m_Render=null;constructor(t){this._m_Render=t.render}render(t){}}},460:(t,e,_)=>{_.d(e,{Z:()=>a});var i=_(6466),n=_(3286),s=_(2432);class a extends i.Z{static S_DEFERRED_SHADING_G_BUFFER_PASS="GBufferPass";static S_DEFERRED_SHADING_DEFERRED_SHADING_PASS="DeferredShadingPass";static S_DEFERRED_SHADING_PASS_GROUP=[a.S_DEFERRED_SHADING_G_BUFFER_PASS,a.S_DEFERRED_SHADING_DEFERRED_SHADING_PASS];static S_DEFERRED_SHADING_PASS_GROUP_2=[0,1];constructor(t){super(t)}render(t){let e=t.frameContext,_=t.gl,i=t.scene,r=t.lights,o=!1,h=null,m=!1,l=null,u=!1;for(let n in t.bucket){e.getRenderState().store();let r=null;t.bucket[n].forEach((t=>{o=!1;let u=i.getComponent(n),f=u.getCurrentTechnology().getSubPasss(s.Z.DEFERRED_SHADING);if(f){if(h=f.getSubShaderMaps(),r=a.S_DEFERRED_SHADING_PASS_GROUP[0],null==h[r]&&(r=a.S_DEFERRED_SHADING_PASS_GROUP_2[0]),m)e.m_LastFrameBuffer!=e.getFrameBuffer(h[r].subShader.getFBId()||s.Z.DEFAULT_DEFERRED_SHADING_FRAMEBUFFER)&&console.error("使用了不同的dfb>>>");else{m=!0;let t=e.getFrameBuffer(h[r].subShader.getFBId()||s.Z.DEFAULT_DEFERRED_SHADING_FRAMEBUFFER);_.bindFramebuffer(_.FRAMEBUFFER,t.getFrameBuffer()),_.clear(_.COLOR_BUFFER_BIT|_.DEPTH_BUFFER_BIT),e.m_LastFrameBuffer=t}h[r].renderState&&(o=this._m_Render._checkRenderState(_,h[r].renderState,e.getRenderState())),u._selectSubShader(h[r].subShader),t.draw(e),r=a.S_DEFERRED_SHADING_PASS_GROUP[1],l=h[r]?h[r]:h[a.S_DEFERRED_SHADING_PASS_GROUP_2[1]]}o&&this._checkRenderState(_,e.getRenderState().restore(),e.getRenderState())}))}if(m&&l){u=!0;let t=e.m_LastFrameBuffer;_.bindFramebuffer(_.FRAMEBUFFER,e._m_DefaultFrameBuffer),e.m_LastFrameBuffer=e._m_DefaultFrameBuffer,_.clear(_.COLOR_BUFFER_BIT|_.DEPTH_BUFFER_BIT),e.m_LastSubShaderId!=l.subShader.getDefId()&&(l.subShader.needCompile()&&l.subShader._compile(_,e),l.subShader.use(_),e.m_LastSubShaderId=l.subShader.getDefId()),e.m_LastSubShader!=l.subShader&&(e.m_LastSubShader=l.subShader),l.renderState&&this._m_Render._checkRenderState(_,l.renderState,e.getRenderState());let s=t.getFramePicture(),a=l.subShader.getRenderDatas();for(let t in a)_.activeTexture(_.TEXTURE0+a[t].loc),_.bindTexture(_.TEXTURE_2D,e.getFrameBuffer(a[t].refId).getTexture(a[t].dataId).getLoc());"On"==e.getRenderState().getFlag(n.Z.S_STATES[3])&&_.disable(_.DEPTH_TEST),this._m_Render._m_RenderPrograms[l.subShader.getRenderProgramType()].draw(_,i,e,s,r),"On"==e.getRenderState().getFlag(n.Z.S_STATES[3])&&_.enable(_.DEPTH_TEST),_.bindFramebuffer(_.READ_FRAMEBUFFER,t.getFrameBuffer()),_.bindFramebuffer(_.DRAW_FRAMEBUFFER,e._m_DefaultFrameBuffer),_.blitFramebuffer(0,0,i.getCanvas().getWidth(),i.getCanvas().getHeight(),0,0,i.getCanvas().getWidth(),i.getCanvas().getHeight(),_.DEPTH_BUFFER_BIT,_.NEAREST),_.bindFramebuffer(_.FRAMEBUFFER,e._m_DefaultFrameBuffer)}return u}}},7312:(t,e,_)=>{_.d(e,{Z:()=>s});var i=_(6466),n=_(2432);class s extends i.Z{constructor(t){super(t)}render(t){let e=t.frameContext,_=t.gl,i=t.scene,s=t.lights,a=!1,r=null;if(e.getRenderState().store(),t.opaque)for(let o in t.bucket){a=!1;let h=i.getComponent(o),m=h.getCurrentTechnology().getSubPasss(n.Z.FORWARD);if(m){r=m.getSubShaders();for(let n in r)r[n].renderState&&(a=this._m_Render._checkRenderState(_,r[n].renderState,e.getRenderState())),h._selectSubShader(r[n].subShader),this._m_Render._m_RenderPrograms[r[n].subShader.getRenderProgramType()].drawArrays(_,i,e,t.bucket[o],s)}a&&this._m_Render._checkRenderState(_,e.getRenderState().restore(),e.getRenderState())}else t.translucent&&t.bucket.forEach((t=>{a=!1;let o=t.getMaterial(),h=o.getCurrentTechnology().getSubPasss(n.Z.FORWARD);if(h){r=h.getSubShaders();for(let n in r)r[n].renderState&&(a=this._checkRenderState(_,r[n].renderState,e.getRenderState())),o._selectSubShader(r[n].subShader),this._m_Render._m_RenderPrograms[r[n].subShader.getRenderProgramType()].draw(_,i,e,t,s)}a&&this._m_Render._checkRenderState(_,e.restore(),e.getRenderState())}))}}},8597:(t,e,_)=>{_.d(e,{Z:()=>a});var i=_(2432),n=_(3286),s=_(460);class a extends s.Z{static S_TILE_DEFERRED_SHADING_G_BUFFER_PASS="GBufferPass";static S_TILE_DEFERRED_SHADING_GLOBAL_PASS="GlobalPass";static S_TILE_DEFERRED_SHADING_TILE_PASS="TilePass";static S_TILE_DEFERRED_SHADING_PASS_GROUP=[a.S_TILE_DEFERRED_SHADING_G_BUFFER_PASS,a.S_TILE_DEFERRED_SHADING_GLOBAL_PASS,a.S_TILE_DEFERRED_SHADING_TILE_PASS];static S_TILE_DEFERRED_SHADING_PASS_GROUP_2=[0,1,2];constructor(t){super(t),this._init()}_init(){}render(t){let e=t.frameContext,_=t.gl,s=t.scene,r=t.lights,o=!1,h=null,m=!1,l=null,u=null,f=!1;for(let n in t.bucket){e.getRenderState().store();let r=null;t.bucket[n].forEach((t=>{o=!1;let f=s.getComponent(n),c=f.getCurrentTechnology().getSubPasss(i.Z.TILE_DEFERRED_SHADING);if(c){if(h=c.getSubShaderMaps(),r=a.S_TILE_DEFERRED_SHADING_PASS_GROUP[0],null==h[r]&&(r=a.S_TILE_DEFERRED_SHADING_PASS_GROUP_2[0]),m)e.m_LastFrameBuffer!=e.getFrameBuffer(h[r].subShader.getFBId()||i.Z.DEFAULT_DEFERRED_SHADING_FRAMEBUFFER)&&console.error("使用了不同的dfb>>>");else{m=!0;let t=e.getFrameBuffer(h[r].subShader.getFBId()||i.Z.DEFAULT_DEFERRED_SHADING_FRAMEBUFFER);_.bindFramebuffer(_.FRAMEBUFFER,t.getFrameBuffer()),_.clear(_.COLOR_BUFFER_BIT|_.DEPTH_BUFFER_BIT),e.m_LastFrameBuffer=t}h[r].renderState&&(o=this._m_Render._checkRenderState(_,h[r].renderState,e.getRenderState())),f._selectSubShader(h[r].subShader),t.draw(e),r=a.S_TILE_DEFERRED_SHADING_PASS_GROUP[1],l=h[r]?h[r]:h[a.S_TILE_DEFERRED_SHADING_PASS_GROUP_2[1]],r=a.S_TILE_DEFERRED_SHADING_PASS_GROUP[2],u=h[r]?h[r]:h[a.S_TILE_DEFERRED_SHADING_PASS_GROUP_2[2]]}o&&this._checkRenderState(_,e.getRenderState().restore(),e.getRenderState())}))}if(m&&l&&u){f=!0;let t=e.m_LastFrameBuffer;_.bindFramebuffer(_.FRAMEBUFFER,e._m_DefaultFrameBuffer),e.m_LastFrameBuffer=e._m_DefaultFrameBuffer,_.clear(_.COLOR_BUFFER_BIT|_.DEPTH_BUFFER_BIT),"On"==e.getRenderState().getFlag(n.Z.S_STATES[3])&&_.disable(_.DEPTH_TEST);let i=[],a=[],o=null;r.forEach((t=>{o=t.getType(),"DirectionalLight"==o?i.push(t):"PointLight"!=o&&"SpotLight"!=o||a.push(t)})),e.m_LastSubShaderId!=l.subShader.getDefId()&&(l.subShader.needCompile()&&l.subShader._compile(_,e),l.subShader.use(_),e.m_LastSubShaderId=l.subShader.getDefId()),e.m_LastSubShader!=l.subShader&&(e.m_LastSubShader=l.subShader),l.renderState&&this._m_Render._checkRenderState(_,l.renderState,e.getRenderState());let h=t.getFramePicture(),m=l.subShader.getRenderDatas();for(let t in m)_.activeTexture(_.TEXTURE0+m[t].loc),_.bindTexture(_.TEXTURE_2D,e.getFrameBuffer(m[t].refId).getTexture(m[t].dataId).getLoc());this._m_Render._m_RenderPrograms[l.subShader.getRenderProgramType()].draw(_,s,e,h,i,0),e.m_LastSubShaderId!=u.subShader.getDefId()&&(u.subShader.needCompile()&&u.subShader._compile(_,e),u.subShader.use(_),e.m_LastSubShaderId=u.subShader.getDefId()),e.m_LastSubShader!=u.subShader&&(e.m_LastSubShader=u.subShader),u.renderState&&this._m_Render._checkRenderState(_,u.renderState,e.getRenderState());for(let t in m)_.activeTexture(_.TEXTURE0+m[t].loc),_.bindTexture(_.TEXTURE_2D,e.getFrameBuffer(m[t].refId).getTexture(m[t].dataId).getLoc());this._m_Render._m_RenderPrograms[u.subShader.getRenderProgramType()].draw(_,s,e,h,a,1),"On"==e.getRenderState().getFlag(n.Z.S_STATES[3])&&_.enable(_.DEPTH_TEST),_.bindFramebuffer(_.READ_FRAMEBUFFER,t.getFrameBuffer()),_.bindFramebuffer(_.DRAW_FRAMEBUFFER,e._m_DefaultFrameBuffer),_.blitFramebuffer(0,0,s.getCanvas().getWidth(),s.getCanvas().getHeight(),0,0,s.getCanvas().getWidth(),s.getCanvas().getHeight(),_.DEPTH_BUFFER_BIT,_.NEAREST),_.bindFramebuffer(_.FRAMEBUFFER,e._m_DefaultFrameBuffer)}return f}}},1433:(t,e,_)=>{_.d(e,{Z:()=>i});class i{static PROGRAM_TYPE=null;static S_UNIQUE_SHADING_SRC="_uniqueShading";constructor(t){}uniqueShading(t,e,_){e[i.S_UNIQUE_SHADING_SRC]&&t.uniform1i(e[i.S_UNIQUE_SHADING_SRC].loc,_)}reset(){}draw(t,e,_,i,n){i.draw(_)}drawArrays(t,e,_,i,n){i.forEach((t=>{t.draw(_)}))}}},7731:(t,e,_)=>{_.d(e,{Z:()=>m});var i=_(1433),n=_(3286),s=(_(1189),_(5657)),a=_(1441),r=(_(8803),_(9085)),o=_(3792),h=_(9692);class m extends i.Z{static PROGRAM_TYPE="MultiPassIBLLighting";static S_CUR_LIGHT_COUNT="_curLightCount";static S_AMBIENT_LIGHT_COLOR="_ambientLightColor";static S_BLEND_GI_PROBES="_blend_gi_probes";static S_MULTI_ID_SRC="_multiId";static S_V_LIGHT_DATA="_vLightData";static S_W_LIGHT_DATA="_wLightData";static S_V_LIGHT_DATA0="_vLight_Data_0";static S_V_LIGHT_DATA1="_vLight_Data_1";static S_V_LIGHT_DATA2="_vLight_Data_2";static S_W_LIGHT_DATA0="_wLight_Data_0";static S_W_LIGHT_DATA1="_wLight_Data_1";static S_W_LIGHT_DATA2="_wLight_Data_2";static S_PREF_ENV_MAP_SRC="_prefEnvMap";static S_WGIPROBE_SRC="_wGIProbe";static S_SH_COEFFS_SRC="_ShCoeffs";_m_PV=null;_m_Temp_Vec3=new o.Z;_m_Temp_Vec4=new h.Z;_m_Temp_Vec4_2=new h.Z;_m_Temp_Vec4_3=new h.Z;_m_Cam_Up=new h.Z;_m_Cam_Left=new h.Z;_m_Light_Left=new h.Z;_m_Light_Up=new h.Z;_m_Light_Center=new h.Z;_m_ViewPortWidth=-1;_m_ViewPortHeight=-1;_m_CamLeftCoeff=-1;_m_CamTopCoeff=-1;constructor(t){super(t),this._m_AccumulationLights=new n.Z,this._m_AccumulationLights.setFlag(n.Z.S_STATES[4],"On"),this._m_AccumulationLights.setFlag(n.Z.S_STATES[1],"Off"),this._m_AccumulationLights.setFlag(n.Z.S_STATES[5],["SRC_ALPHA","ONE"]),this._m_ClipLights=new n.Z,this._m_ClipLights.setFlag(n.Z.S_STATES[6],"On"),this._m_m_LastSubShader=null}reset(){this._m_m_LastSubShader=null}_blendGIProbes(t,e,_){let i=_.m_LastSubShader.getContextVars();if(null!=i[m.S_WGIPROBE_SRC]){if(this._m_m_LastSubShader!=_.m_LastSubShader){let n=e.getGIProbes()[0],a=s.Z.S_TEMP_VEC4;a.setToInXYZW(n.getPosition()._m_X,n.getPosition()._m_Y,n.getPosition()._m_Z,1/n.getRadius()+n.getPrefilterMipmap()),t.uniform4fv(i[m.S_WGIPROBE_SRC].loc,a.getBufferData(),0,4),a=n.getShCoeffsBufferData(),null!=i[m.S_SH_COEFFS_SRC]&&t.uniform3fv(i[m.S_SH_COEFFS_SRC].loc,a.getBufferData(),0,27),null!=i[m.S_PREF_ENV_MAP_SRC]&&n.getPrefilterEnvMap()._upload(t,i[m.S_PREF_ENV_MAP_SRC].loc),this._m_m_LastSubShader=_.m_LastSubShader}}else{let t=e.getGIProbes();t&&t.length>0&&_.m_LastMaterial.addDefine(r.Z.S_GIPROBES_SRC,!0)}}_lightClip(t,e,_){let i=e.getBoundingVolume(),n=i.getRadius(),s=n*this._m_CamLeftCoeff,r=n*this._m_CamTopCoeff,o=i.getCenter(this._m_Temp_Vec3);o=this._m_Temp_Vec4.setToInXYZW(o._m_X,o._m_Y,o._m_Z,1),this._m_Temp_Vec4._m_W=1,this._m_Temp_Vec4_2._m_W=1,this._m_Temp_Vec4_3._m_W=1;let h=this._m_Cam_Left.multLength(s,this._m_Temp_Vec4_2).add(o),m=this._m_Cam_Up.multLength(r,this._m_Temp_Vec4_3).add(o);a.Z.multiplyMV(this._m_Light_Left,h,this._m_PV),a.Z.multiplyMV(this._m_Light_Up,m,this._m_PV),a.Z.multiplyMV(this._m_Light_Center,o,this._m_PV),this._m_Light_Left._m_X/=this._m_Light_Left._m_W,this._m_Light_Left._m_Y/=this._m_Light_Left._m_W,this._m_Light_Up._m_X/=this._m_Light_Up._m_W,this._m_Light_Up._m_Y/=this._m_Light_Up._m_W,this._m_Light_Center._m_X/=this._m_Light_Center._m_W,this._m_Light_Center._m_Y/=this._m_Light_Center._m_W,this._m_Light_Left._m_X=this._m_ViewPortWidth*(1+this._m_Light_Left._m_X),this._m_Light_Up._m_X=this._m_ViewPortWidth*(1+this._m_Light_Up._m_X),this._m_Light_Center._m_X=this._m_ViewPortWidth*(1+this._m_Light_Center._m_X),this._m_Light_Left._m_Y=this._m_ViewPortHeight*(1-this._m_Light_Left._m_Y),this._m_Light_Up._m_Y=this._m_ViewPortHeight*(1-this._m_Light_Up._m_Y),this._m_Light_Center._m_Y=this._m_ViewPortHeight*(1-this._m_Light_Center._m_Y);let l=Math.abs(this._m_Light_Left._m_X-this._m_Light_Center._m_X),u=Math.abs(this._m_Light_Center._m_Y-this._m_Light_Up._m_Y),f=-1,c=-1;return this._m_Light_Center._m_Z<-this._m_Light_Center._m_W?(f=-this._m_Light_Center._m_X-l,c=-this._m_Light_Center._m_Y+u):(f=this._m_Light_Center._m_X-l,c=this._m_Light_Center._m_Y+u),t.scissor(f,2*this._m_ViewPortHeight-c,2*l,2*u),!0}_uploadLights(t,e,_,i,n,r,o,h,l){let u=_.m_LastSubShader.getContextVars(),f=e.enableGIProbes();if(null!=u[m.S_MULTI_ID_SRC]&&t.uniform1i(u[m.S_MULTI_ID_SRC].loc,h),null!=u[m.S_BLEND_GI_PROBES]&&t.uniform1i(u[m.S_BLEND_GI_PROBES].loc,l&&f),0==h){if(null!=u[m.S_AMBIENT_LIGHT_COLOR])if(0==r){let _=e.AmbientLightColor;t.uniform3f(u[m.S_AMBIENT_LIGHT_COLOR].loc,_._m_X,_._m_Y,_._m_Z),this.uniqueShading(t,u,!0)}else t.uniform3f(u[m.S_AMBIENT_LIGHT_COLOR].loc,0,0,0),e.getRender()._checkRenderState(t,this._m_AccumulationLights,_.getRenderState()),this.uniqueShading(t,u,!1);f&&this._blendGIProbes(t,e,_);let o=null,h=null;null!=u[m.S_V_LIGHT_DATA]?(h=1,o=u[m.S_V_LIGHT_DATA].loc):null!=u[m.S_W_LIGHT_DATA]&&(h=0,o=u[m.S_W_LIGHT_DATA].loc);let l=n+r>i.length?i.length-r:n;if(null==o)return l+r;let c=null,g=null,d=s.Z.S_LIGHT_DATA_4,S=d.getArray(),p=s.Z.S_TEMP_VEC4,C=s.Z.S_TEMP_VEC4_2;for(let t=r,_=0,n=l+r;t<n;t++,_+=12)c=i[t],g=c.getColor(),S[_]=g._m_X,S[_+1]=g._m_Y,S[_+2]=g._m_Z,S[_+3]=c.getTypeId(),"DirectionalLight"===c.getType()&&(h?(C.setToInXYZW(c.getDirection()._m_X,c.getDirection()._m_Y,c.getDirection()._m_Z,0),a.Z.multiplyMV(p,C,e.getMainCamera().getViewMatrix()),S[_+4]=p._m_X,S[_+5]=p._m_Y,S[_+6]=p._m_Z,S[_+7]=-1):(S[_+4]=c.getDirection()._m_X,S[_+5]=c.getDirection()._m_Y,S[_+6]=c.getDirection()._m_Z,S[_+7]=-1),S[_+8]=0,S[_+9]=0,S[_+10]=0,S[_+11]=0);return t.uniform4fv(o,d.getBufferData(),0,12*l),null!=u[m.S_CUR_LIGHT_COUNT]&&t.uniform1i(u[m.S_CUR_LIGHT_COUNT].loc,3*l),l+r}if(1==h){let n=null,a=null;if(n=i[o],r>0&&!this._lightClip(t,n,!0))return r<=0?-1:0;if(null!=u[m.S_AMBIENT_LIGHT_COLOR])if(r<=0){let _=e.AmbientLightColor;t.uniform3f(u[m.S_AMBIENT_LIGHT_COLOR].loc,_._m_X,_._m_Y,_._m_Z),this.uniqueShading(t,u,!0)}else t.uniform3f(u[m.S_AMBIENT_LIGHT_COLOR].loc,0,0,0),e.getRender()._checkRenderState(t,this._m_AccumulationLights,_.getRenderState()),this.uniqueShading(t,u,!1);f&&this._blendGIProbes(t,e,_);let h=null,l=null,c=null,g=null,d=s.Z.S_TEMP_VEC4,S=s.Z.S_TEMP_VEC4_2,p=s.Z.S_TEMP_VEC4_3;if(null!=u[m.S_V_LIGHT_DATA0]?(g=1,h=u[m.S_V_LIGHT_DATA0].loc,l=u[m.S_V_LIGHT_DATA1].loc,c=u[m.S_V_LIGHT_DATA2].loc):null!=u[m.S_W_LIGHT_DATA0]&&(g=0,h=u[m.S_W_LIGHT_DATA0].loc,l=u[m.S_W_LIGHT_DATA1].loc,c=u[m.S_W_LIGHT_DATA2].loc),null==g)return 1;switch(a=n.getColor(),d.setToInXYZW(a._m_X,a._m_Y,a._m_Z,n.getTypeId()),n.getType()){case"PointLight":g||S.setToInXYZW(n.getPosition()._m_X,n.getPosition()._m_Y,n.getPosition()._m_Z,n.getInRadius()),p.setToInXYZW(0,0,0,0);break;case"SpotLight":g||S.setToInXYZW(n.getPosition()._m_X,n.getPosition()._m_Y,n.getPosition()._m_Z,n.getInvSpotRange()),p.setToInXYZW(n.getDirection()._m_X,n.getDirection()._m_Y,n.getDirection()._m_Z,n.getPackedAngleCos())}return null!=h&&t.uniform4f(h,d._m_X,d._m_Y,d._m_Z,d._m_W),null!=l&&t.uniform4f(l,S._m_X,S._m_Y,S._m_Z,S._m_W),null!=c&&t.uniform4f(c,p._m_X,p._m_Y,p._m_Z,p._m_W),1}return 0}draw(t,e,_,i,n){if(0==n.length){let n=_.m_LastSubShader.getContextVars();this.uniqueShading(t,n,!0);let s=e.enableGIProbes();if(s&&this._blendGIProbes(t,e,_),null!=n[m.S_BLEND_GI_PROBES]&&t.uniform1i(n[m.S_BLEND_GI_PROBES].loc,s),null!=n[m.S_MULTI_ID_SRC]&&t.uniform1i(n[m.S_MULTI_ID_SRC].loc,0),null!=n[m.S_AMBIENT_LIGHT_COLOR]){let _=e.AmbientLightColor;t.uniform3f(n[m.S_AMBIENT_LIGHT_COLOR].loc,_._m_X,_._m_Y,_._m_Z)}return null!=n[m.S_CUR_LIGHT_COUNT]&&t.uniform1i(n[m.S_CUR_LIGHT_COUNT].loc,0),void i.draw(_)}let s=e.getRender().getBatchLightSize();_.getRenderState().store();let a=[],r=[],o=null;n.forEach((t=>{o=t.getType(),"DirectionalLight"==o?a.push(t):"PointLight"!=o&&"SpotLight"!=o||r.push(t)}));let h=0;for(;h<a.length;)h=this._uploadLights(t,e,_,a,s,h,-1,0,0==h),i.draw(_);let l=0;if(r.length>0){e.getRender()._checkRenderState(t,this._m_ClipLights,_.getRenderState()),this._m_ViewPortWidth=.5*e.getMainCamera().getWidth(),this._m_ViewPortHeight=.5*e.getMainCamera().getHeight(),t.scissor(0,0,2*this._m_ViewPortWidth,2*this._m_ViewPortHeight),this._m_PV=e.getMainCamera().getProjectViewMatrix(!0);let i=e.getMainCamera().getViewMatrix();this._m_Temp_Vec3.setToInXYZ(i.m[0],i.m[4],i.m[8]),this._m_CamLeftCoeff=1/e.getMainCamera().getFrustumPlane(1).getNormal().dot(this._m_Temp_Vec3),this._m_Temp_Vec3.setToInXYZ(i.m[1],i.m[5],i.m[9]),this._m_CamTopCoeff=1/e.getMainCamera().getFrustumPlane(2).getNormal().dot(this._m_Temp_Vec3),this._m_Cam_Left.setToInXYZW(i.m[0],i.m[4],i.m[8],1).multLength(-1),this._m_Cam_Up.setToInXYZW(i.m[1],i.m[5],i.m[9],1)}for(;l<r.length;)h=this._uploadLights(t,e,_,r,s,0!=h?h:l,l,1,0==h&&0==l),l++,1==h&&i.draw(_);e.getRender()._checkRenderState(t,_.getRenderState().restore(),_.getRenderState()),_.BatchLightLastIndex=h}drawArrays(t,e,_,i,n){if(0==n.length){let n=_.m_LastSubShader.getContextVars();this.uniqueShading(t,n,!0);let s=e.enableGIProbes();if(s&&this._blendGIProbes(t,e,_),null!=n[m.S_BLEND_GI_PROBES]&&t.uniform1i(n[m.S_BLEND_GI_PROBES].loc,s),null!=n[m.S_MULTI_ID_SRC]&&t.uniform1i(n[m.S_MULTI_ID_SRC].loc,0),null!=n[m.S_AMBIENT_LIGHT_COLOR]){let _=e.AmbientLightColor;t.uniform3f(n[m.S_AMBIENT_LIGHT_COLOR].loc,_._m_X,_._m_Y,_._m_Z)}return null!=n[m.S_CUR_LIGHT_COUNT]&&t.uniform1i(n[m.S_CUR_LIGHT_COUNT].loc,0),void i.forEach((t=>{t.draw(_)}))}let s=e.getRender().getBatchLightSize();_.getRenderState().store();let a=[],r=[],o=null;n.forEach((t=>{o=t.getType(),"DirectionalLight"==o?a.push(t):"PointLight"!=o&&"SpotLight"!=o||r.push(t)}));let h=0;for(;h<a.length;)h=this._uploadLights(t,e,_,a,s,h,-1,0,0==h),iDrawable.draw(_);let l=0;if(r.length>0){e.getRender()._checkRenderState(t,this._m_ClipLights,_.getRenderState()),this._m_ViewPortWidth=.5*e.getMainCamera().getWidth(),this._m_ViewPortHeight=.5*e.getMainCamera().getHeight(),t.scissor(0,0,2*this._m_ViewPortWidth,2*this._m_ViewPortHeight),this._m_PV=e.getMainCamera().getProjectViewMatrix(!0);let i=e.getMainCamera().getViewMatrix();this._m_Temp_Vec3.setToInXYZ(i.m[0],i.m[4],i.m[8]),this._m_CamLeftCoeff=1/e.getMainCamera().getFrustumPlane(1).getNormal().dot(this._m_Temp_Vec3),this._m_Temp_Vec3.setToInXYZ(i.m[1],i.m[5],i.m[9]),this._m_CamTopCoeff=1/e.getMainCamera().getFrustumPlane(2).getNormal().dot(this._m_Temp_Vec3),this._m_Cam_Left.setToInXYZW(i.m[0],i.m[4],i.m[8],1).multLength(-1),this._m_Cam_Up.setToInXYZW(i.m[1],i.m[5],i.m[9],1)}for(;l<r.length;)h=this._uploadLights(t,e,_,r,s,0!=h?h:l,l,1,0==h&&0==l),l++,1==h&&i.forEach((t=>{t.draw(_)}));e.getRender()._checkRenderState(t,_.getRenderState().restore(),_.getRenderState()),_.BatchLightLastIndex=h}}},1181:(t,e,_)=>{_.d(e,{Z:()=>h});var i=_(1433),n=_(3286),s=(_(1189),_(5657)),a=_(1441),r=_(9692),o=_(3792);class h extends i.Z{static PROGRAM_TYPE="MultiPassLighting";static S_CUR_LIGHT_COUNT="_curLightCount";static S_AMBIENT_LIGHT_COLOR="_ambientLightColor";static S_MULTI_ID_SRC="_multiId";static S_V_LIGHT_DATA="_vLightData";static S_W_LIGHT_DATA="_wLightData";static S_V_LIGHT_DATA0="_vLight_Data_0";static S_V_LIGHT_DATA1="_vLight_Data_1";static S_V_LIGHT_DATA2="_vLight_Data_2";static S_W_LIGHT_DATA0="_wLight_Data_0";static S_W_LIGHT_DATA1="_wLight_Data_1";static S_W_LIGHT_DATA2="_wLight_Data_2";_m_PV=null;_m_Temp_Vec3=new o.Z;_m_Temp_Vec4=new r.Z;_m_Temp_Vec4_2=new r.Z;_m_Temp_Vec4_3=new r.Z;_m_Cam_Up=new r.Z;_m_Cam_Left=new r.Z;_m_Light_Left=new r.Z;_m_Light_Up=new r.Z;_m_Light_Center=new r.Z;_m_ViewPortWidth=-1;_m_ViewPortHeight=-1;_m_CamLeftCoeff=-1;_m_CamTopCoeff=-1;constructor(t){super(t),this._m_AccumulationLights=new n.Z,this._m_AccumulationLights.setFlag(n.Z.S_STATES[4],"On"),this._m_AccumulationLights.setFlag(n.Z.S_STATES[1],"Off"),this._m_AccumulationLights.setFlag(n.Z.S_STATES[5],["SRC_ALPHA","ONE"]),this._m_ClipLights=new n.Z,this._m_ClipLights.setFlag(n.Z.S_STATES[6],"On")}_uploadLights(t,e,_,i,n,r,o,m){let l=_.m_LastSubShader.getContextVars();if(null!=l[h.S_MULTI_ID_SRC]&&t.uniform1i(l[h.S_MULTI_ID_SRC].loc,m),0==m){if(null!=l[h.S_AMBIENT_LIGHT_COLOR])if(0==r){let _=e.AmbientLightColor;t.uniform3f(l[h.S_AMBIENT_LIGHT_COLOR].loc,_._m_X,_._m_Y,_._m_Z),this.uniqueShading(t,l,!0)}else t.uniform3f(l[h.S_AMBIENT_LIGHT_COLOR].loc,0,0,0),e.getRender()._checkRenderState(t,this._m_AccumulationLights,_.getRenderState()),this.uniqueShading(t,l,!1);let o=null,m=null;null!=l[h.S_V_LIGHT_DATA]?(m=1,o=l[h.S_V_LIGHT_DATA].loc):null!=l[h.S_W_LIGHT_DATA]&&(m=0,o=l[h.S_W_LIGHT_DATA].loc);let u=n+r>i.length?i.length-r:n,f=null,c=null;if(null==o)return u+r;let g=s.Z.S_LIGHT_DATA,d=g.getArray(),S=s.Z.S_TEMP_VEC4,p=s.Z.S_TEMP_VEC4_2;for(let t=r,_=0,n=u+r;t<n;t++,_+=12)f=i[t],c=f.getColor(),d[_]=c._m_X,d[_+1]=c._m_Y,d[_+2]=c._m_Z,d[_+3]=f.getTypeId(),"DirectionalLight"===f.getType()&&(m?(p.setToInXYZW(f.getDirection()._m_X,f.getDirection()._m_Y,f.getDirection()._m_Z,0),a.Z.multiplyMV(S,p,e.getMainCamera().getViewMatrix()),d[_+4]=S._m_X,d[_+5]=S._m_Y,d[_+6]=S._m_Z,d[_+7]=-1):(d[_+4]=f.getDirection()._m_X,d[_+5]=f.getDirection()._m_Y,d[_+6]=f.getDirection()._m_Z,d[_+7]=-1),d[_+8]=0,d[_+9]=0,d[_+10]=0,d[_+11]=0);return t.uniform4fv(o,g.getBufferData(),0,12*u),null!=l[h.S_CUR_LIGHT_COUNT]&&t.uniform1i(l[h.S_CUR_LIGHT_COUNT].loc,3*u),u+r}if(1==m){let n=null,a=null;if(n=i[o],r>0&&!this._lightClip(t,n,!0))return r<=0?-1:0;if(null!=l[h.S_AMBIENT_LIGHT_COLOR])if(r<=0){let _=e.AmbientLightColor;t.uniform3f(l[h.S_AMBIENT_LIGHT_COLOR].loc,_._m_X,_._m_Y,_._m_Z),this.uniqueShading(t,l,!0)}else t.uniform3f(l[h.S_AMBIENT_LIGHT_COLOR].loc,0,0,0),e.getRender()._checkRenderState(t,this._m_AccumulationLights,_.getRenderState()),this.uniqueShading(t,l,!1);let m=null,u=null,f=null,c=null,g=s.Z.S_TEMP_VEC4,d=s.Z.S_TEMP_VEC4_2,S=s.Z.S_TEMP_VEC4_3;if(null!=l[h.S_V_LIGHT_DATA0]?(c=1,m=l[h.S_V_LIGHT_DATA0].loc,u=l[h.S_V_LIGHT_DATA1].loc,f=l[h.S_V_LIGHT_DATA2].loc):null!=l[h.S_W_LIGHT_DATA0]&&(c=0,m=l[h.S_W_LIGHT_DATA0].loc,u=l[h.S_W_LIGHT_DATA1].loc,f=l[h.S_W_LIGHT_DATA2].loc),null==c)return 1;switch(a=n.getColor(),g.setToInXYZW(a._m_X,a._m_Y,a._m_Z,n.getTypeId()),n.getType()){case"PointLight":c||d.setToInXYZW(n.getPosition()._m_X,n.getPosition()._m_Y,n.getPosition()._m_Z,n.getInRadius()),S.setToInXYZW(0,0,0,0);break;case"SpotLight":c||d.setToInXYZW(n.getPosition()._m_X,n.getPosition()._m_Y,n.getPosition()._m_Z,n.getInvSpotRange()),S.setToInXYZW(n.getDirection()._m_X,n.getDirection()._m_Y,n.getDirection()._m_Z,n.getPackedAngleCos())}return null!=m&&t.uniform4f(m,g._m_X,g._m_Y,g._m_Z,g._m_W),null!=u&&t.uniform4f(u,d._m_X,d._m_Y,d._m_Z,d._m_W),null!=f&&t.uniform4f(f,S._m_X,S._m_Y,S._m_Z,S._m_W),1}return 0}_lightClip(t,e,_){let i=e.getBoundingVolume(),n=i.getRadius(),s=n*this._m_CamLeftCoeff,r=n*this._m_CamTopCoeff,o=i.getCenter(this._m_Temp_Vec3);o=this._m_Temp_Vec4.setToInXYZW(o._m_X,o._m_Y,o._m_Z,1),this._m_Temp_Vec4._m_W=1,this._m_Temp_Vec4_2._m_W=1,this._m_Temp_Vec4_3._m_W=1;let h=this._m_Cam_Left.multLength(s,this._m_Temp_Vec4_2).add(o),m=this._m_Cam_Up.multLength(r,this._m_Temp_Vec4_3).add(o);a.Z.multiplyMV(this._m_Light_Left,h,this._m_PV),a.Z.multiplyMV(this._m_Light_Up,m,this._m_PV),a.Z.multiplyMV(this._m_Light_Center,o,this._m_PV),this._m_Light_Left._m_X/=this._m_Light_Left._m_W,this._m_Light_Left._m_Y/=this._m_Light_Left._m_W,this._m_Light_Up._m_X/=this._m_Light_Up._m_W,this._m_Light_Up._m_Y/=this._m_Light_Up._m_W,this._m_Light_Center._m_X/=this._m_Light_Center._m_W,this._m_Light_Center._m_Y/=this._m_Light_Center._m_W,this._m_Light_Left._m_X=this._m_ViewPortWidth*(1+this._m_Light_Left._m_X),this._m_Light_Up._m_X=this._m_ViewPortWidth*(1+this._m_Light_Up._m_X),this._m_Light_Center._m_X=this._m_ViewPortWidth*(1+this._m_Light_Center._m_X),this._m_Light_Left._m_Y=this._m_ViewPortHeight*(1-this._m_Light_Left._m_Y),this._m_Light_Up._m_Y=this._m_ViewPortHeight*(1-this._m_Light_Up._m_Y),this._m_Light_Center._m_Y=this._m_ViewPortHeight*(1-this._m_Light_Center._m_Y);let l=Math.abs(this._m_Light_Left._m_X-this._m_Light_Center._m_X),u=Math.abs(this._m_Light_Center._m_Y-this._m_Light_Up._m_Y),f=-1,c=-1;return this._m_Light_Center._m_Z<-this._m_Light_Center._m_W?(f=-this._m_Light_Center._m_X-l,c=-this._m_Light_Center._m_Y+u):(f=this._m_Light_Center._m_X-l,c=this._m_Light_Center._m_Y+u),t.scissor(f,2*this._m_ViewPortHeight-c,2*l,2*u),!0}_lightCvvTest(t,e,_,i,n,s){return i<-s||t>_||n>s||e<-_}draw(t,e,_,i,n){if(0==n.length){let n=_.m_LastSubShader.getContextVars();if(this.uniqueShading(t,n,!0),null!=n[h.S_MULTI_ID_SRC]&&t.uniform1i(n[h.S_MULTI_ID_SRC].loc,0),null!=n[h.S_AMBIENT_LIGHT_COLOR]){let _=e.AmbientLightColor;t.uniform3f(n[h.S_AMBIENT_LIGHT_COLOR].loc,_._m_X,_._m_Y,_._m_Z)}return null!=n[h.S_CUR_LIGHT_COUNT]&&t.uniform1i(n[h.S_CUR_LIGHT_COUNT].loc,0),void i.draw(_)}let s=e.getRender().getBatchLightSize();_.getRenderState().store();let a=[],r=[];n.forEach((t=>{"DirectionalLight"==t.getType()?a.push(t):r.push(t)}));let o=0;for(;o<a.length;)o=this._uploadLights(t,e,_,a,s,o,-1,0),i.draw(_);let m=0;if(r.length>0){e.getRender()._checkRenderState(t,this._m_ClipLights,_.getRenderState()),this._m_ViewPortWidth=.5*e.getMainCamera().getWidth(),this._m_ViewPortHeight=.5*e.getMainCamera().getHeight(),t.scissor(0,0,2*this._m_ViewPortWidth,2*this._m_ViewPortHeight),this._m_PV=e.getMainCamera().getProjectViewMatrix(!0);let i=e.getMainCamera().getViewMatrix();this._m_Temp_Vec3.setToInXYZ(i.m[0],i.m[4],i.m[8]),this._m_CamLeftCoeff=1/e.getMainCamera().getFrustumPlane(1).getNormal().dot(this._m_Temp_Vec3),this._m_Temp_Vec3.setToInXYZ(i.m[1],i.m[5],i.m[9]),this._m_CamTopCoeff=1/e.getMainCamera().getFrustumPlane(2).getNormal().dot(this._m_Temp_Vec3),this._m_Cam_Left.setToInXYZW(i.m[0],i.m[4],i.m[8],1).multLength(-1),this._m_Cam_Up.setToInXYZW(i.m[1],i.m[5],i.m[9],1)}for(;m<r.length;)o=this._uploadLights(t,e,_,r,s,0!=o?o:m,m,1),m++,1==o&&i.draw(_);e.getRender()._checkRenderState(t,_.getRenderState().restore(),_.getRenderState()),_.BatchLightLastIndex=o}drawArrays(t,e,_,i,n){if(0==n.length){let n=_.m_LastSubShader.getContextVars();if(this.uniqueShading(t,n,!0),null!=n[h.S_MULTI_ID_SRC]&&t.uniform1i(n[h.S_MULTI_ID_SRC].loc,0),null!=n[h.S_AMBIENT_LIGHT_COLOR]){let _=e.AmbientLightColor;t.uniform3f(n[h.S_AMBIENT_LIGHT_COLOR].loc,_._m_X,_._m_Y,_._m_Z)}return null!=n[h.S_CUR_LIGHT_COUNT]&&t.uniform1i(n[h.S_CUR_LIGHT_COUNT].loc,0),void i.forEach((t=>{t.draw(_)}))}let s=e.getRender().getBatchLightSize();_.getRenderState().store();let a=[],r=[];n.forEach((t=>{"DirectionalLight"==t.getType()?a.push(t):r.push(t)}));let o=0;for(;o<a.length;)o=this._uploadLights(t,e,_,a,s,o,-1,0),i.forEach((t=>{t.draw(_)}));let m=0;if(r.length>0){e.getRender()._checkRenderState(t,this._m_ClipLights,_.getRenderState()),this._m_ViewPortWidth=.5*e.getMainCamera().getWidth(),this._m_ViewPortHeight=.5*e.getMainCamera().getHeight(),t.scissor(0,0,2*this._m_ViewPortWidth,2*this._m_ViewPortHeight),this._m_PV=e.getMainCamera().getProjectViewMatrix(!0);let i=e.getMainCamera().getViewMatrix();this._m_Temp_Vec3.setToInXYZ(i.m[0],i.m[4],i.m[8]),this._m_CamLeftCoeff=1/e.getMainCamera().getFrustumPlane(1).getNormal().dot(this._m_Temp_Vec3),this._m_Temp_Vec3.setToInXYZ(i.m[1],i.m[5],i.m[9]),this._m_CamTopCoeff=1/e.getMainCamera().getFrustumPlane(2).getNormal().dot(this._m_Temp_Vec3),this._m_Cam_Left.setToInXYZW(i.m[0],i.m[4],i.m[8],1).multLength(-1),this._m_Cam_Up.setToInXYZW(i.m[1],i.m[5],i.m[9],1)}for(;m<r.length;)o=this._uploadLights(t,e,_,r,s,0!=o?o:m,m,1),m++,1==o&&i.forEach((t=>{t.draw(_)}));e.getRender()._checkRenderState(t,_.getRenderState().restore(),_.getRenderState()),_.BatchLightLastIndex=o}}},3072:(t,e,_)=>{_.d(e,{Z:()=>o});var i=_(1433),n=_(3286),s=(_(1189),_(5657)),a=_(1441),r=(_(8803),_(9085));class o extends i.Z{static PROGRAM_TYPE="SinglePassIBLLighting";static S_CUR_LIGHT_COUNT="_curLightCount";static S_AMBIENT_LIGHT_COLOR="_ambientLightColor";static S_BLEND_GI_PROBES="_blend_gi_probes";static S_V_LIGHT_DATA="_vLightData";static S_W_LIGHT_DATA="_wLightData";static S_PREF_ENV_MAP_SRC="_prefEnvMap";static S_WGIPROBE_SRC="_wGIProbe";static S_SH_COEFFS_SRC="_ShCoeffs";constructor(t){super(t),this._m_AccumulationLights=new n.Z,this._m_AccumulationLights.setFlag(n.Z.S_STATES[4],"On"),this._m_AccumulationLights.setFlag(n.Z.S_STATES[1],"Off"),this._m_AccumulationLights.setFlag(n.Z.S_STATES[5],["ONE","ONE"]),this._m_m_LastSubShader=null}reset(){this._m_m_LastSubShader=null}_blendGIProbes(t,e,_){let i=_.m_LastSubShader.getContextVars();if(null!=i[o.S_WGIPROBE_SRC]){if(this._m_m_LastSubShader!=_.m_LastSubShader){let n=e.getGIProbes()[0],a=s.Z.S_TEMP_VEC4;a.setToInXYZW(n.getPosition()._m_X,n.getPosition()._m_Y,n.getPosition()._m_Z,1/n.getRadius()+n.getPrefilterMipmap()),t.uniform4fv(i[o.S_WGIPROBE_SRC].loc,a.getBufferData(),0,4),a=n.getShCoeffsBufferData(),null!=i[o.S_SH_COEFFS_SRC]&&t.uniform3fv(i[o.S_SH_COEFFS_SRC].loc,a.getBufferData(),0,27),null!=i[o.S_PREF_ENV_MAP_SRC]&&n.getPrefilterEnvMap()._upload(t,i[o.S_PREF_ENV_MAP_SRC].loc),this._m_m_LastSubShader=_.m_LastSubShader}}else{let t=e.getGIProbes();t&&t.length>0&&_.m_LastMaterial.addDefine(r.Z.S_GIPROBES_SRC,!0)}}_uploadLights(t,e,_,i,n,r,h){let m=_.m_LastSubShader.getContextVars(),l=e.enableGIProbes();if(null!=m[o.S_BLEND_GI_PROBES]&&t.uniform1i(m[o.S_BLEND_GI_PROBES].loc,h&&l),null!=m[o.S_AMBIENT_LIGHT_COLOR])if(0==r){let _=e.AmbientLightColor;t.uniform3f(m[o.S_AMBIENT_LIGHT_COLOR].loc,_._m_X,_._m_Y,_._m_Z),this.uniqueShading(t,m,!0)}else t.uniform3f(m[o.S_AMBIENT_LIGHT_COLOR].loc,0,0,0),e.getRender()._checkRenderState(t,this._m_AccumulationLights,_.getRenderState()),this.uniqueShading(t,m,!1);l&&this._blendGIProbes(t,e,_);let u=null,f=null;null!=m[o.S_V_LIGHT_DATA]?(f=1,u=m[o.S_V_LIGHT_DATA].loc):null!=m[o.S_W_LIGHT_DATA]&&(f=0,u=m[o.S_W_LIGHT_DATA].loc);let c=n+r>i.length?i.length-r:n;if(null==u)return c+r;let g=null,d=null,S=s.Z.S_LIGHT_DATA_4,p=S.getArray(),C=s.Z.S_TEMP_VEC4,T=s.Z.S_TEMP_VEC4_2;for(let t=r,_=0,n=c+r;t<n;t++,_+=12)switch(g=i[t],d=g.getColor(),p[_]=d._m_X,p[_+1]=d._m_Y,p[_+2]=d._m_Z,p[_+3]=g.getTypeId(),g.getType()){case"DirectionalLight":f?(T.setToInXYZW(g.getDirection()._m_X,g.getDirection()._m_Y,g.getDirection()._m_Z,0),a.Z.multiplyMV(C,T,e.getMainCamera().getViewMatrix()),p[_+4]=C._m_X,p[_+5]=C._m_Y,p[_+6]=C._m_Z,p[_+7]=-1):(p[_+4]=g.getDirection()._m_X,p[_+5]=g.getDirection()._m_Y,p[_+6]=g.getDirection()._m_Z,p[_+7]=-1),p[_+8]=0,p[_+9]=0,p[_+10]=0,p[_+11]=0;break;case"PointLight":f||(p[_+4]=g.getPosition()._m_X,p[_+5]=g.getPosition()._m_Y,p[_+6]=g.getPosition()._m_Z,p[_+7]=g.getInRadius()),p[_+8]=0,p[_+9]=0,p[_+10]=0,p[_+11]=0;break;case"SpotLight":f||(p[_+4]=g.getPosition()._m_X,p[_+5]=g.getPosition()._m_Y,p[_+6]=g.getPosition()._m_Z,p[_+7]=g.getInvSpotRange()),p[_+8]=g.getDirection()._m_X,p[_+9]=g.getDirection()._m_Y,p[_+10]=g.getDirection()._m_Z,p[_+11]=g.getPackedAngleCos()}return t.uniform4fv(u,S.getBufferData(),0,12*c),null!=m[o.S_CUR_LIGHT_COUNT]&&t.uniform1i(m[o.S_CUR_LIGHT_COUNT].loc,3*c),c+r}draw(t,e,_,i,n){if(0==n.length){let n=_.m_LastSubShader.getContextVars();this.uniqueShading(t,n,!0);let s=e.enableGIProbes();if(s&&this._blendGIProbes(t,e,_),null!=n[o.S_BLEND_GI_PROBES]&&t.uniform1i(n[o.S_BLEND_GI_PROBES].loc,s),null!=n[o.S_CUR_LIGHT_COUNT]&&t.uniform1i(n[o.S_CUR_LIGHT_COUNT].loc,0),null!=n[o.S_AMBIENT_LIGHT_COLOR]){let _=e.AmbientLightColor;t.uniform3f(n[o.S_AMBIENT_LIGHT_COLOR].loc,_._m_X,_._m_Y,_._m_Z)}return void i.draw(_)}let s=e.getRender().getBatchLightSize(),a=0;for(_.getRenderState().store();a<n.length;)a=this._uploadLights(t,e,_,n,s,a,0==a),i.draw(_);e.getRender()._checkRenderState(t,_.getRenderState().restore(),_.getRenderState()),_.BatchLightLastIndex=a}drawArrays(t,e,_,i,n){if(0==n.length){let n=_.m_LastSubShader.getContextVars();this.uniqueShading(t,n,!0);let s=e.enableGIProbes();if(s&&this._blendGIProbes(t,e,_),null!=n[o.S_BLEND_GI_PROBES]&&t.uniform1i(n[o.S_BLEND_GI_PROBES].loc,s),null!=n[o.S_CUR_LIGHT_COUNT]&&t.uniform1i(n[o.S_CUR_LIGHT_COUNT].loc,0),null!=n[o.S_AMBIENT_LIGHT_COLOR]){let _=e.AmbientLightColor;t.uniform3f(n[o.S_AMBIENT_LIGHT_COLOR].loc,_._m_X,_._m_Y,_._m_Z)}return void i.forEach((t=>{t.draw(_)}))}let s=e.getRender().getBatchLightSize(),a=0;for(_.getRenderState().store();a<n.length;)a=this._uploadLights(t,e,_,n,s,a,0==a),i.forEach((t=>{t.draw(_)}));e.getRender()._checkRenderState(t,_.getRenderState().restore(),_.getRenderState()),_.BatchLightLastIndex=a}}},6384:(t,e,_)=>{_.d(e,{Z:()=>r});var i=_(1433),n=_(3286),s=(_(1189),_(5657)),a=_(1441);class r extends i.Z{static PROGRAM_TYPE="SinglePassLighting";static S_CUR_LIGHT_COUNT="_curLightCount";static S_AMBIENT_LIGHT_COLOR="_ambientLightColor";static S_V_LIGHT_DATA="_vLightData";static S_W_LIGHT_DATA="_wLightData";constructor(t){super(t),this._m_AccumulationLights=new n.Z,this._m_AccumulationLights.setFlag(n.Z.S_STATES[4],"On"),this._m_AccumulationLights.setFlag(n.Z.S_STATES[1],"Off"),this._m_AccumulationLights.setFlag(n.Z.S_STATES[5],["ONE","ONE"])}_uploadLights(t,e,_,i,n,o){let h=_.m_LastSubShader.getContextVars();if(null!=h[r.S_AMBIENT_LIGHT_COLOR])if(0==o){let _=e.AmbientLightColor;t.uniform3f(h[r.S_AMBIENT_LIGHT_COLOR].loc,_._m_X,_._m_Y,_._m_Z),this.uniqueShading(t,h,!0)}else t.uniform3f(h[r.S_AMBIENT_LIGHT_COLOR].loc,0,0,0),e.getRender()._checkRenderState(t,this._m_AccumulationLights,_.getRenderState()),this.uniqueShading(t,h,!1);let m=null,l=null;null!=h[r.S_V_LIGHT_DATA]?(l=1,m=h[r.S_V_LIGHT_DATA].loc):null!=h[r.S_W_LIGHT_DATA]&&(l=0,m=h[r.S_W_LIGHT_DATA].loc);let u=n+o>i.length?i.length-o:n;if(null==m)return u+o;let f=null,c=null,g=s.Z.S_LIGHT_DATA,d=g.getArray(),S=s.Z.S_TEMP_VEC4,p=s.Z.S_TEMP_VEC4_2;for(let t=o,_=0,n=u+o;t<n;t++,_+=12)switch(f=i[t],c=f.getColor(),d[_]=c._m_X,d[_+1]=c._m_Y,d[_+2]=c._m_Z,d[_+3]=f.getTypeId(),f.getType()){case"DirectionalLight":l?(p.setToInXYZW(f.getDirection()._m_X,f.getDirection()._m_Y,f.getDirection()._m_Z,0),a.Z.multiplyMV(S,p,e.getMainCamera().getViewMatrix()),d[_+4]=S._m_X,d[_+5]=S._m_Y,d[_+6]=S._m_Z,d[_+7]=-1):(d[_+4]=f.getDirection()._m_X,d[_+5]=f.getDirection()._m_Y,d[_+6]=f.getDirection()._m_Z,d[_+7]=-1),d[_+8]=0,d[_+9]=0,d[_+10]=0,d[_+11]=0;break;case"PointLight":l||(d[_+4]=f.getPosition()._m_X,d[_+5]=f.getPosition()._m_Y,d[_+6]=f.getPosition()._m_Z,d[_+7]=f.getInRadius()),d[_+8]=0,d[_+9]=0,d[_+10]=0,d[_+11]=0;break;case"SpotLight":l||(d[_+4]=f.getPosition()._m_X,d[_+5]=f.getPosition()._m_Y,d[_+6]=f.getPosition()._m_Z,d[_+7]=f.getInvSpotRange()),d[_+8]=f.getDirection()._m_X,d[_+9]=f.getDirection()._m_Y,d[_+10]=f.getDirection()._m_Z,d[_+11]=f.getPackedAngleCos()}return t.uniform4fv(m,g.getBufferData(),0,12*u),null!=h[r.S_CUR_LIGHT_COUNT]&&t.uniform1i(h[r.S_CUR_LIGHT_COUNT].loc,3*u),u+o}draw(t,e,_,i,n){if(0==n.length){let n=_.m_LastSubShader.getContextVars();if(this.uniqueShading(t,n,!0),null!=n[r.S_AMBIENT_LIGHT_COLOR]){let _=e.AmbientLightColor;t.uniform3f(n[r.S_AMBIENT_LIGHT_COLOR].loc,_._m_X,_._m_Y,_._m_Z)}return null!=n[r.S_CUR_LIGHT_COUNT]&&t.uniform1i(n[r.S_CUR_LIGHT_COUNT].loc,0),void i.draw(_)}let s=e.getRender().getBatchLightSize(),a=0;for(;a<n.length;)a=this._uploadLights(t,e,_,n,s,a),i.draw(_);e.getRender()._checkRenderState(t,_.getRenderState().restore(),_.getRenderState()),_.BatchLightLastIndex=a}drawArrays(t,e,_,i,n){if(0==n.length){let n=_.m_LastSubShader.getContextVars();if(this.uniqueShading(t,n,!0),null!=n[r.S_AMBIENT_LIGHT_COLOR]){let _=e.AmbientLightColor;t.uniform3f(n[r.S_AMBIENT_LIGHT_COLOR].loc,_._m_X,_._m_Y,_._m_Z)}return null!=n[r.S_CUR_LIGHT_COUNT]&&t.uniform1i(n[r.S_CUR_LIGHT_COUNT].loc,0),void i.forEach((t=>{t.draw(_)}))}let s=e.getRender().getBatchLightSize(),a=0;for(_.getRenderState().store();a<n.length;)a=this._uploadLights(t,e,_,n,s,a),i.forEach((t=>{t.draw(_)}));e.getRender()._checkRenderState(t,_.getRenderState().restore(),_.getRenderState()),_.BatchLightLastIndex=a}}},16:(t,e,_)=>{_.d(e,{Z:()=>l});var i=_(1433),n=_(1441),s=_(3286),a=_(9085),r=_(5657),o=_(3792),h=_(9692),m=_(3245);class l extends i.Z{static PROGRAM_TYPE="TilePassIBLLighting";static S_CUR_LIGHT_COUNT="_curLightCount";static S_AMBIENT_LIGHT_COLOR="_ambientLightColor";static S_V_LIGHT_DATA="_vLightData";static S_W_LIGHT_DATA="_wLightData";static S_LIGHT_NUM_SRC="_lightNum";static S_TILE_LIGHT_DECODE_SRC="_tileLightDecode";static S_TILE_LIGHT_INDEX_SRC="_tileLightIndex";static S_TILE_LIGHT_OFFSET_SIZE="_tileLightOffsetSize";static S_TILE_W_LIGHT_DATA_0="_tileWLightData0";static S_TILE_V_LIGHT_DATA_0="_tileVLightData0";static S_TILE_W_LIGHT_DATA_1="_tileWLightData1";static S_TILE_V_LIGHT_DATA_1="_tileVLightData1";static S_TILE_W_LIGHT_DATA_2="_tileWLightData2";static S_TILE_V_LIGHT_DATA_2="_tileVLightData2";static S_PREF_ENV_MAP_SRC="_prefEnvMap";static S_WGIPROBE_SRC="_wGIProbe";static S_SH_COEFFS_SRC="_ShCoeffs";static S_BLEND_GI_PROBES="_blend_gi_probes";_m_Tiles=[];_m_LightsIndex=[];_m_LightsDecode=[];_m_LightsDecodeData=null;_m_LightsIndexData=null;_m_LightsData0=null;_m_LightsData1=null;_m_LightsData2=null;_m_LightsData0Array=[];_m_LightsData1Array=[];_m_LightsData2Array=[];_m_PV=null;_m_Temp_Vec3=new o.Z;_m_Temp_Vec4=new h.Z;_m_Temp_Vec4_2=new h.Z;_m_Temp_Vec4_3=new h.Z;_m_Cam_Up=new h.Z;_m_Cam_Left=new h.Z;_m_Light_Left=new h.Z;_m_Light_Up=new h.Z;_m_Light_Center=new h.Z;_m_ViewPortWidth=-1;_m_ViewPortHeight=-1;_m_CamLeftCoeff=-1;_m_CamTopCoeff=-1;constructor(t){super(t),this._m_AccumulationLights=new s.Z,this._m_AccumulationLights.setFlag(s.Z.S_STATES[4],"On"),this._m_AccumulationLights.setFlag(s.Z.S_STATES[1],"Off"),this._m_AccumulationLights.setFlag(s.Z.S_STATES[5],["ONE","ONE"])}reset(){this._m_m_LastSubShader=null}_blendGIProbes(t,e,_){let i=_.m_LastSubShader.getContextVars();if(null!=i[l.S_WGIPROBE_SRC]){if(this._m_m_LastSubShader!=_.m_LastSubShader){let n=e.getGIProbes()[0],s=r.Z.S_TEMP_VEC4;s.setToInXYZW(n.getPosition()._m_X,n.getPosition()._m_Y,n.getPosition()._m_Z,1/n.getRadius()+n.getPrefilterMipmap()),t.uniform4fv(i[l.S_WGIPROBE_SRC].loc,s.getBufferData(),0,4),s=n.getShCoeffsBufferData(),null!=i[l.S_SH_COEFFS_SRC]&&t.uniform3fv(i[l.S_SH_COEFFS_SRC].loc,s.getBufferData(),0,27),null!=i[l.S_PREF_ENV_MAP_SRC]&&n.getPrefilterEnvMap()._upload(t,i[l.S_PREF_ENV_MAP_SRC].loc),this._m_m_LastSubShader=_.m_LastSubShader}}else{let t=e.getGIProbes();t&&t.length>0&&_.m_LastMaterial.addDefine(a.Z.S_GIPROBES_SRC,!0)}}_createTexture(t,e,_,i){let n=new m.Z(t);return t.getCanvas().getGLContext(),n.setTextureFormat(e,_,i),n.setWrap(t,m.Z.S_WRAPS.S_CLAMP_TO_EDGE,m.Z.S_WRAPS.S_CLAMP_TO_EDGE),n.setFilter(t,m.Z.S_FILTERS.S_NEAREST,m.Z.S_FILTERS.S_NEAREST),n.updateTextureFilter(),n.setAlignment(1),n}_reset(t,e,_){this._m_LightsIndexData||(this._m_LightsIndexData=this._createTexture(e,t.RGB32F,t.RGB,t.FLOAT)),this._m_LightsDecodeData||(this._m_LightsDecodeData=this._createTexture(e,t.RGB32F,t.RGB,t.FLOAT)),this._m_LightsData0||(this._m_LightsData0=this._createTexture(e,t.RGBA32F,t.RGBA,t.FLOAT)),this._m_LightsData0Array.length=0,this._m_LightsData1||(this._m_LightsData1=this._createTexture(e,t.RGBA32F,t.RGBA,t.FLOAT)),this._m_LightsData1Array.length=0,this._m_LightsData2||(this._m_LightsData2=this._createTexture(e,t.RGBA32F,t.RGBA,t.FLOAT)),this._m_LightsData2Array.length=0;for(let t=0;t<_;t++)this._m_Tiles[t]=[];this._m_LightsDecode.length=0,this._m_LightsIndex.length=0}_lightClip(t,e){let _=e.getBoundingVolume(),i=_.getRadius(),s=i*this._m_CamLeftCoeff,a=i*this._m_CamTopCoeff,r=_.getCenter(this._m_Temp_Vec3);r=this._m_Temp_Vec4.setToInXYZW(r._m_X,r._m_Y,r._m_Z,1),this._m_Temp_Vec4._m_W=1,this._m_Temp_Vec4_2._m_W=1,this._m_Temp_Vec4_3._m_W=1;let o=this._m_Cam_Left.multLength(s,this._m_Temp_Vec4_2).add(r),h=this._m_Cam_Up.multLength(a,this._m_Temp_Vec4_3).add(r);n.Z.multiplyMV(this._m_Light_Left,o,this._m_PV),n.Z.multiplyMV(this._m_Light_Up,h,this._m_PV),n.Z.multiplyMV(this._m_Light_Center,r,this._m_PV),this._m_Light_Left._m_X/=this._m_Light_Left._m_W,this._m_Light_Left._m_Y/=this._m_Light_Left._m_W,this._m_Light_Up._m_X/=this._m_Light_Up._m_W,this._m_Light_Up._m_Y/=this._m_Light_Up._m_W,this._m_Light_Center._m_X/=this._m_Light_Center._m_W,this._m_Light_Center._m_Y/=this._m_Light_Center._m_W,this._m_Light_Left._m_X=this._m_ViewPortWidth*(1+this._m_Light_Left._m_X),this._m_Light_Up._m_X=this._m_ViewPortWidth*(1+this._m_Light_Up._m_X),this._m_Light_Center._m_X=this._m_ViewPortWidth*(1+this._m_Light_Center._m_X),this._m_Light_Left._m_Y=this._m_ViewPortHeight*(1-this._m_Light_Left._m_Y),this._m_Light_Up._m_Y=this._m_ViewPortHeight*(1-this._m_Light_Up._m_Y),this._m_Light_Center._m_Y=this._m_ViewPortHeight*(1-this._m_Light_Center._m_Y);let m=Math.abs(this._m_Light_Left._m_X-this._m_Light_Center._m_X),l=Math.abs(this._m_Light_Center._m_Y-this._m_Light_Up._m_Y),u=-1,f=-1;this._m_Light_Center._m_Z<-this._m_Light_Center._m_W?(u=-this._m_Light_Center._m_X-m,f=-this._m_Light_Center._m_Y+l):(u=this._m_Light_Center._m_X-m,f=this._m_Light_Center._m_Y+l);let c=2*this._m_ViewPortHeight-f;return{left:u,right:2*m+u,top:2*l+c,bottom:c}}_tile(t,e,_,i,n,s,a){let r=Math.max(Math.floor(s.left/t),0),o=Math.min(Math.ceil(s.right/t),e),h=Math.max(Math.floor(s.bottom/t),0),m=Math.min(Math.ceil(s.top/t),_),l=0;for(let t=r;t<o;t++)for(let _=h;_<m;_++)l=t+_*e,l>=0&&l<i&&n[l].push(a)}_tileLightDecode(t,e,_,i,n,s,a){let r=e.m_LastSubShader.getContextVars(),o=-1;o=a.length;let h=null;if(null!=r[l.S_LIGHT_NUM_SRC]&&t.uniform1i(r[l.S_LIGHT_NUM_SRC].loc,o),null!=r[l.S_TILE_V_LIGHT_DATA_0])h=1;else{if(null==r[l.S_TILE_W_LIGHT_DATA_0])return 0;h=0}for(let t=0,e=0,n=null;t<_;t++){n=i[t],o=n.length;for(let t=0;t<o;t++)this._m_LightsIndex.push(n[t]),this._m_LightsIndex.push(0),this._m_LightsIndex.push(0);this._m_LightsDecode.push(e),this._m_LightsDecode.push(o),this._m_LightsDecode.push(-1),e+=o}let m=Math.ceil(Math.sqrt(this._m_LightsIndex.length/3));null!=r[l.S_TILE_LIGHT_OFFSET_SIZE]&&t.uniform1f(r[l.S_TILE_LIGHT_OFFSET_SIZE].loc,m);for(let t=this._m_LightsIndex.length,e=m*m*3;t<e;t++)this._m_LightsIndex.push(-1);for(let t=0,e=this._m_LightsDecode.length;t<e;t+=3)this._m_LightsDecode[t+2]=this._m_LightsDecode[t]/m,this._m_LightsDecode[t]%=m;null!=r[l.S_TILE_LIGHT_DECODE_SRC]&&this._m_LightsDecodeData.uploadArrayData(r[l.S_TILE_LIGHT_DECODE_SRC].loc,n,s,new Float32Array(this._m_LightsDecode)),null!=r[l.S_TILE_LIGHT_INDEX_SRC]&&this._m_LightsIndexData.uploadArrayData(r[l.S_TILE_LIGHT_INDEX_SRC].loc,m,m,new Float32Array(this._m_LightsIndex));let u=null,f=null;o=a.length;for(let t=0;t<o;t++)switch(u=a[t],f=u.getColor(),this._m_LightsData0Array.push(f._m_X),this._m_LightsData0Array.push(f._m_Y),this._m_LightsData0Array.push(f._m_Z),this._m_LightsData0Array.push(u.getTypeId()),u.getType()){case"PointLight":h||(this._m_LightsData1Array.push(u.getPosition()._m_X),this._m_LightsData1Array.push(u.getPosition()._m_Y),this._m_LightsData1Array.push(u.getPosition()._m_Z),this._m_LightsData1Array.push(u.getInRadius())),this._m_LightsData2Array.push(0),this._m_LightsData2Array.push(0),this._m_LightsData2Array.push(0),this._m_LightsData2Array.push(0);break;case"SpotLight":h||(this._m_LightsData1Array.push(u.getPosition()._m_X),this._m_LightsData1Array.push(u.getPosition()._m_Y),this._m_LightsData1Array.push(u.getPosition()._m_Z),this._m_LightsData1Array.push(u.getInvSpotRange())),this._m_LightsData2Array.push(u.getDirection()._m_X),this._m_LightsData2Array.push(u.getDirection()._m_Y),this._m_LightsData2Array.push(u.getDirection()._m_Z),this._m_LightsData2Array.push(u.getPackedAngleCos())}let c=r[l.S_TILE_W_LIGHT_DATA_0]?r[l.S_TILE_W_LIGHT_DATA_0]:r[l.S_TILE_V_LIGHT_DATA_0];return c&&this._m_LightsData0.uploadArrayData(c.loc,this._m_LightsData0Array.length/4,1,new Float32Array(this._m_LightsData0Array)),c=r[l.S_TILE_W_LIGHT_DATA_1]?r[l.S_TILE_W_LIGHT_DATA_1]:r[l.S_TILE_V_LIGHT_DATA_1],c&&this._m_LightsData1.uploadArrayData(c.loc,this._m_LightsData1Array.length/4,1,new Float32Array(this._m_LightsData1Array)),c=r[l.S_TILE_W_LIGHT_DATA_2]?r[l.S_TILE_W_LIGHT_DATA_2]:r[l.S_TILE_V_LIGHT_DATA_2],c&&this._m_LightsData2.uploadArrayData(c.loc,this._m_LightsData2Array.length/4,1,new Float32Array(this._m_LightsData2Array)),1}_uploadLights(t,e,_,i,s,a,o){let h=_.m_LastSubShader.getContextVars(),m=e.enableGIProbes();if(null!=h[l.S_BLEND_GI_PROBES]&&t.uniform1i(h[l.S_BLEND_GI_PROBES].loc,o&&m),null!=h[l.S_AMBIENT_LIGHT_COLOR])if(0==a){let _=e.AmbientLightColor;t.uniform3f(h[l.S_AMBIENT_LIGHT_COLOR].loc,_._m_X,_._m_Y,_._m_Z),this.uniqueShading(t,h,!0)}else t.uniform3f(h[l.S_AMBIENT_LIGHT_COLOR].loc,0,0,0),e.getRender()._checkRenderState(t,this._m_AccumulationLights,_.getRenderState()),this.uniqueShading(t,h,!1);m&&this._blendGIProbes(t,e,_);let u=null,f=null;null!=h[l.S_V_LIGHT_DATA]?(f=1,u=h[l.S_V_LIGHT_DATA].loc):null!=h[l.S_W_LIGHT_DATA]&&(f=0,u=h[l.S_W_LIGHT_DATA].loc);let c=s+a>i.length?i.length-a:s;if(null==u)return c+a;let g=null,d=null,S=r.Z.S_LIGHT_DATA_4,p=S.getArray(),C=r.Z.S_TEMP_VEC4,T=r.Z.S_TEMP_VEC4_2;for(let t=a,_=0,s=c+a;t<s;t++,_+=12)g=i[t],d=g.getColor(),p[_]=d._m_X,p[_+1]=d._m_Y,p[_+2]=d._m_Z,p[_+3]=g.getTypeId(),"DirectionalLight"===g.getType()&&(f?(T.setToInXYZW(g.getDirection()._m_X,g.getDirection()._m_Y,g.getDirection()._m_Z,0),n.Z.multiplyMV(C,T,e.getMainCamera().getViewMatrix()),p[_+4]=C._m_X,p[_+5]=C._m_Y,p[_+6]=C._m_Z,p[_+7]=-1):(p[_+4]=g.getDirection()._m_X,p[_+5]=g.getDirection()._m_Y,p[_+6]=g.getDirection()._m_Z,p[_+7]=-1),p[_+8]=0,p[_+9]=0,p[_+10]=0,p[_+11]=0);return t.uniform4fv(u,S.getBufferData(),0,12*c),null!=h[l.S_CUR_LIGHT_COUNT]&&t.uniform1i(h[l.S_CUR_LIGHT_COUNT].loc,3*c),c+a}draw(t,e,_,i,n,s){if(_.getRenderState().store(),0==s){if(0==n.length){let n=_.m_LastSubShader.getContextVars();this.uniqueShading(t,n,!0);let s=e.enableGIProbes();if(s&&this._blendGIProbes(t,e,_),null!=n[l.S_BLEND_GI_PROBES]&&t.uniform1i(n[l.S_BLEND_GI_PROBES].loc,s),null!=n[l.S_AMBIENT_LIGHT_COLOR]){let _=e.AmbientLightColor;t.uniform3f(n[l.S_AMBIENT_LIGHT_COLOR].loc,_._m_X,_._m_Y,_._m_Z)}return null!=n[l.S_CUR_LIGHT_COUNT]&&t.uniform1i(n[l.S_CUR_LIGHT_COUNT].loc,0),void i.draw(_)}let s=e.getRender().getBatchLightSize(),a=0;for(;a<n.length;)a=this._uploadLights(t,e,_,n,s,a,0==a),i.draw(_)}else if(1==s){if(0==n.length)return;let s=null,a=e.getRender().getTileInfo(),r=a.tileSize,o=a.tileWidth,h=a.tileHeight,m=a.tileNum;if(this._reset(t,e,m),n.length>0){e.getRender()._checkRenderState(t,this._m_AccumulationLights,_.getRenderState()),this._m_ViewPortWidth=.5*e.getMainCamera().getWidth(),this._m_ViewPortHeight=.5*e.getMainCamera().getHeight(),this._m_PV=e.getMainCamera().getProjectViewMatrix(!0);let i=e.getMainCamera().getViewMatrix();this._m_Temp_Vec3.setToInXYZ(i.m[0],i.m[4],i.m[8]),this._m_CamLeftCoeff=1/e.getMainCamera().getFrustumPlane(1).getNormal().dot(this._m_Temp_Vec3),this._m_Temp_Vec3.setToInXYZ(i.m[1],i.m[5],i.m[9]),this._m_CamTopCoeff=1/e.getMainCamera().getFrustumPlane(2).getNormal().dot(this._m_Temp_Vec3),this._m_Cam_Left.setToInXYZW(i.m[0],i.m[4],i.m[8],1).multLength(-1),this._m_Cam_Up.setToInXYZW(i.m[1],i.m[5],i.m[9],1)}for(let e=0,_=n.length;e<_;e++)s=this._lightClip(t,n[e]),s&&this._tile(r,o,h,m,this._m_Tiles,s,e);this._tileLightDecode(t,_,m,this._m_Tiles,o,h,n),i.draw(_)}e.getRender()._checkRenderState(t,_.getRenderState().restore(),_.getRenderState())}drawArrays(t,e,_,i,n,s){if(_.getRenderState().store(),0==s){if(0==n.length){let n=_.m_LastSubShader.getContextVars();this.uniqueShading(t,n,!0);let s=e.enableGIProbes();if(s&&this._blendGIProbes(t,e,_),null!=n[l.S_BLEND_GI_PROBES]&&t.uniform1i(n[l.S_BLEND_GI_PROBES].loc,s),null!=n[l.S_AMBIENT_LIGHT_COLOR]){let _=e.AmbientLightColor;t.uniform3f(n[l.S_AMBIENT_LIGHT_COLOR].loc,_._m_X,_._m_Y,_._m_Z)}return null!=n[l.S_CUR_LIGHT_COUNT]&&t.uniform1i(n[l.S_CUR_LIGHT_COUNT].loc,0),void i.forEach((t=>{t.draw(_)}))}let s=e.getRender().getBatchLightSize(),a=0;for(;a<n.length;)a=this._uploadLights(t,e,_,n,s,a,0==a),i.forEach((t=>{t.draw(_)}))}else if(1==s){if(0==n.length)return;let s=null,a=e.getRender().getTileInfo(),r=a.tileSize,o=a.tileWidth,h=a.tileHeight,m=a.tileNum;if(this._reset(t,e,m),n.length>0){e.getRender()._checkRenderState(t,this._m_AccumulationLights,_.getRenderState()),this._m_ViewPortWidth=.5*e.getMainCamera().getWidth(),this._m_ViewPortHeight=.5*e.getMainCamera().getHeight(),this._m_PV=e.getMainCamera().getProjectViewMatrix(!0);let i=e.getMainCamera().getViewMatrix();this._m_Temp_Vec3.setToInXYZ(i.m[0],i.m[4],i.m[8]),this._m_CamLeftCoeff=1/e.getMainCamera().getFrustumPlane(1).getNormal().dot(this._m_Temp_Vec3),this._m_Temp_Vec3.setToInXYZ(i.m[1],i.m[5],i.m[9]),this._m_CamTopCoeff=1/e.getMainCamera().getFrustumPlane(2).getNormal().dot(this._m_Temp_Vec3),this._m_Cam_Left.setToInXYZW(i.m[0],i.m[4],i.m[8],1).multLength(-1),this._m_Cam_Up.setToInXYZW(i.m[1],i.m[5],i.m[9],1)}for(let e=0,_=n.length;e<_;e++)s=this._lightClip(t,n[e]),s&&this._tile(r,o,h,m,this._m_Tiles,s,e);this._tileLightDecode(t,_,m,this._m_Tiles,o,h,n),i.forEach((t=>{t.draw(_)}))}e.getRender()._checkRenderState(t,_.getRenderState().restore(),_.getRenderState())}}},6985:(t,e,_)=>{_.d(e,{Z:()=>m});var i=_(1433),n=_(1441),s=_(3286),a=_(5657),r=_(3792),o=_(9692),h=_(3245);class m extends i.Z{static PROGRAM_TYPE="TilePassLighting";static S_CUR_LIGHT_COUNT="_curLightCount";static S_AMBIENT_LIGHT_COLOR="_ambientLightColor";static S_V_LIGHT_DATA="_vLightData";static S_W_LIGHT_DATA="_wLightData";static S_LIGHT_NUM_SRC="_lightNum";static S_TILE_LIGHT_DECODE_SRC="_tileLightDecode";static S_TILE_LIGHT_INDEX_SRC="_tileLightIndex";static S_TILE_LIGHT_OFFSET_SIZE="_tileLightOffsetSize";static S_TILE_W_LIGHT_DATA_0="_tileWLightData0";static S_TILE_V_LIGHT_DATA_0="_tileVLightData0";static S_TILE_W_LIGHT_DATA_1="_tileWLightData1";static S_TILE_V_LIGHT_DATA_1="_tileVLightData1";static S_TILE_W_LIGHT_DATA_2="_tileWLightData2";static S_TILE_V_LIGHT_DATA_2="_tileVLightData2";_m_Tiles=[];_m_LightsIndex=[];_m_LightsDecode=[];_m_LightsDecodeData=null;_m_LightsIndexData=null;_m_LightsData0=null;_m_LightsData1=null;_m_LightsData2=null;_m_LightsData0Array=[];_m_LightsData1Array=[];_m_LightsData2Array=[];_m_PV=null;_m_Temp_Vec3=new r.Z;_m_Temp_Vec4=new o.Z;_m_Temp_Vec4_2=new o.Z;_m_Temp_Vec4_3=new o.Z;_m_Cam_Up=new o.Z;_m_Cam_Left=new o.Z;_m_Light_Left=new o.Z;_m_Light_Up=new o.Z;_m_Light_Center=new o.Z;_m_ViewPortWidth=-1;_m_ViewPortHeight=-1;_m_CamLeftCoeff=-1;_m_CamTopCoeff=-1;constructor(t){super(t),this._m_AccumulationLights=new s.Z,this._m_AccumulationLights.setFlag(s.Z.S_STATES[4],"On"),this._m_AccumulationLights.setFlag(s.Z.S_STATES[1],"Off"),this._m_AccumulationLights.setFlag(s.Z.S_STATES[5],["ONE","ONE"])}_createTexture(t,e,_,i){let n=new h.Z(t);return t.getCanvas().getGLContext(),n.setTextureFormat(e,_,i),n.setWrap(t,h.Z.S_WRAPS.S_CLAMP_TO_EDGE,h.Z.S_WRAPS.S_CLAMP_TO_EDGE),n.setFilter(t,h.Z.S_FILTERS.S_NEAREST,h.Z.S_FILTERS.S_NEAREST),n.updateTextureFilter(),n.setAlignment(1),n}_reset(t,e,_){this._m_LightsIndexData||(this._m_LightsIndexData=this._createTexture(e,t.RGB32F,t.RGB,t.FLOAT)),this._m_LightsDecodeData||(this._m_LightsDecodeData=this._createTexture(e,t.RGB32F,t.RGB,t.FLOAT)),this._m_LightsData0||(this._m_LightsData0=this._createTexture(e,t.RGBA32F,t.RGBA,t.FLOAT)),this._m_LightsData0Array.length=0,this._m_LightsData1||(this._m_LightsData1=this._createTexture(e,t.RGBA32F,t.RGBA,t.FLOAT)),this._m_LightsData1Array.length=0,this._m_LightsData2||(this._m_LightsData2=this._createTexture(e,t.RGBA32F,t.RGBA,t.FLOAT)),this._m_LightsData2Array.length=0;for(let t=0;t<_;t++)this._m_Tiles[t]=[];this._m_LightsDecode.length=0,this._m_LightsIndex.length=0}_lightClip(t,e){let _=e.getBoundingVolume(),i=_.getRadius(),s=i*this._m_CamLeftCoeff,a=i*this._m_CamTopCoeff,r=_.getCenter(this._m_Temp_Vec3);r=this._m_Temp_Vec4.setToInXYZW(r._m_X,r._m_Y,r._m_Z,1),this._m_Temp_Vec4._m_W=1,this._m_Temp_Vec4_2._m_W=1,this._m_Temp_Vec4_3._m_W=1;let o=this._m_Cam_Left.multLength(s,this._m_Temp_Vec4_2).add(r),h=this._m_Cam_Up.multLength(a,this._m_Temp_Vec4_3).add(r);n.Z.multiplyMV(this._m_Light_Left,o,this._m_PV),n.Z.multiplyMV(this._m_Light_Up,h,this._m_PV),n.Z.multiplyMV(this._m_Light_Center,r,this._m_PV),this._m_Light_Left._m_X/=this._m_Light_Left._m_W,this._m_Light_Left._m_Y/=this._m_Light_Left._m_W,this._m_Light_Up._m_X/=this._m_Light_Up._m_W,this._m_Light_Up._m_Y/=this._m_Light_Up._m_W,this._m_Light_Center._m_X/=this._m_Light_Center._m_W,this._m_Light_Center._m_Y/=this._m_Light_Center._m_W,this._m_Light_Left._m_X=this._m_ViewPortWidth*(1+this._m_Light_Left._m_X),this._m_Light_Up._m_X=this._m_ViewPortWidth*(1+this._m_Light_Up._m_X),this._m_Light_Center._m_X=this._m_ViewPortWidth*(1+this._m_Light_Center._m_X),this._m_Light_Left._m_Y=this._m_ViewPortHeight*(1-this._m_Light_Left._m_Y),this._m_Light_Up._m_Y=this._m_ViewPortHeight*(1-this._m_Light_Up._m_Y),this._m_Light_Center._m_Y=this._m_ViewPortHeight*(1-this._m_Light_Center._m_Y);let m=Math.abs(this._m_Light_Left._m_X-this._m_Light_Center._m_X),l=Math.abs(this._m_Light_Center._m_Y-this._m_Light_Up._m_Y),u=-1,f=-1;this._m_Light_Center._m_Z<-this._m_Light_Center._m_W?(u=-this._m_Light_Center._m_X-m,f=-this._m_Light_Center._m_Y+l):(u=this._m_Light_Center._m_X-m,f=this._m_Light_Center._m_Y+l);let c=2*this._m_ViewPortHeight-f;return{left:u,right:2*m+u,top:2*l+c,bottom:c}}_tile(t,e,_,i,n,s,a){let r=Math.max(Math.floor(s.left/t),0),o=Math.min(Math.ceil(s.right/t),e),h=Math.max(Math.floor(s.bottom/t),0),m=Math.min(Math.ceil(s.top/t),_),l=0;for(let t=r;t<o;t++)for(let _=h;_<m;_++)l=t+_*e,l>=0&&l<i&&n[l].push(a)}_tileLightDecode(t,e,_,i,n,s,a){let r=e.m_LastSubShader.getContextVars(),o=-1;o=a.length;let h=null;if(null!=r[m.S_LIGHT_NUM_SRC]&&t.uniform1i(r[m.S_LIGHT_NUM_SRC].loc,o),null!=r[m.S_TILE_V_LIGHT_DATA_0])h=1;else{if(null==r[m.S_TILE_W_LIGHT_DATA_0])return 0;h=0}for(let t=0,e=0,n=null;t<_;t++){n=i[t],o=n.length;for(let t=0;t<o;t++)this._m_LightsIndex.push(n[t]),this._m_LightsIndex.push(0),this._m_LightsIndex.push(0);this._m_LightsDecode.push(e),this._m_LightsDecode.push(o),this._m_LightsDecode.push(-1),e+=o}let l=Math.ceil(Math.sqrt(this._m_LightsIndex.length/3));null!=r[m.S_TILE_LIGHT_OFFSET_SIZE]&&t.uniform1f(r[m.S_TILE_LIGHT_OFFSET_SIZE].loc,l);for(let t=this._m_LightsIndex.length,e=l*l*3;t<e;t++)this._m_LightsIndex.push(-1);for(let t=0,e=this._m_LightsDecode.length;t<e;t+=3)this._m_LightsDecode[t+2]=this._m_LightsDecode[t]/l,this._m_LightsDecode[t]%=l;null!=r[m.S_TILE_LIGHT_DECODE_SRC]&&this._m_LightsDecodeData.uploadArrayData(r[m.S_TILE_LIGHT_DECODE_SRC].loc,n,s,new Float32Array(this._m_LightsDecode)),null!=r[m.S_TILE_LIGHT_INDEX_SRC]&&this._m_LightsIndexData.uploadArrayData(r[m.S_TILE_LIGHT_INDEX_SRC].loc,l,l,new Float32Array(this._m_LightsIndex));let u=null,f=null;o=a.length;for(let t=0;t<o;t++)switch(u=a[t],f=u.getColor(),this._m_LightsData0Array.push(f._m_X),this._m_LightsData0Array.push(f._m_Y),this._m_LightsData0Array.push(f._m_Z),this._m_LightsData0Array.push(u.getTypeId()),u.getType()){case"PointLight":h||(this._m_LightsData1Array.push(u.getPosition()._m_X),this._m_LightsData1Array.push(u.getPosition()._m_Y),this._m_LightsData1Array.push(u.getPosition()._m_Z),this._m_LightsData1Array.push(u.getInRadius())),this._m_LightsData2Array.push(0),this._m_LightsData2Array.push(0),this._m_LightsData2Array.push(0),this._m_LightsData2Array.push(0);break;case"SpotLight":h||(this._m_LightsData1Array.push(u.getPosition()._m_X),this._m_LightsData1Array.push(u.getPosition()._m_Y),this._m_LightsData1Array.push(u.getPosition()._m_Z),this._m_LightsData1Array.push(u.getInvSpotRange())),this._m_LightsData2Array.push(u.getDirection()._m_X),this._m_LightsData2Array.push(u.getDirection()._m_Y),this._m_LightsData2Array.push(u.getDirection()._m_Z),this._m_LightsData2Array.push(u.getPackedAngleCos())}let c=r[m.S_TILE_W_LIGHT_DATA_0]?r[m.S_TILE_W_LIGHT_DATA_0]:r[m.S_TILE_V_LIGHT_DATA_0];return c&&this._m_LightsData0.uploadArrayData(c.loc,this._m_LightsData0Array.length/4,1,new Float32Array(this._m_LightsData0Array)),c=r[m.S_TILE_W_LIGHT_DATA_1]?r[m.S_TILE_W_LIGHT_DATA_1]:r[m.S_TILE_V_LIGHT_DATA_1],c&&this._m_LightsData1.uploadArrayData(c.loc,this._m_LightsData1Array.length/4,1,new Float32Array(this._m_LightsData1Array)),c=r[m.S_TILE_W_LIGHT_DATA_2]?r[m.S_TILE_W_LIGHT_DATA_2]:r[m.S_TILE_V_LIGHT_DATA_2],c&&this._m_LightsData2.uploadArrayData(c.loc,this._m_LightsData2Array.length/4,1,new Float32Array(this._m_LightsData2Array)),1}_uploadLights(t,e,_,i,s,r){let o=_.m_LastSubShader.getContextVars();if(null!=o[m.S_AMBIENT_LIGHT_COLOR])if(0==r){let _=e.AmbientLightColor;t.uniform3f(o[m.S_AMBIENT_LIGHT_COLOR].loc,_._m_X,_._m_Y,_._m_Z),this.uniqueShading(t,o,!0)}else t.uniform3f(o[m.S_AMBIENT_LIGHT_COLOR].loc,0,0,0),e.getRender()._checkRenderState(t,this._m_AccumulationLights,_.getRenderState()),this.uniqueShading(t,o,!1);let h=null,l=null;null!=o[m.S_V_LIGHT_DATA]?(l=1,h=o[m.S_V_LIGHT_DATA].loc):null!=o[m.S_W_LIGHT_DATA]&&(l=0,h=o[m.S_W_LIGHT_DATA].loc);let u=s+r>i.length?i.length-r:s;if(null==h)return u+r;let f=null,c=null,g=a.Z.S_LIGHT_DATA,d=g.getArray(),S=a.Z.S_TEMP_VEC4,p=a.Z.S_TEMP_VEC4_2;for(let t=r,_=0,s=u+r;t<s;t++,_+=12)f=i[t],c=f.getColor(),d[_]=c._m_X,d[_+1]=c._m_Y,d[_+2]=c._m_Z,d[_+3]=f.getTypeId(),"DirectionalLight"===f.getType()&&(l?(p.setToInXYZW(f.getDirection()._m_X,f.getDirection()._m_Y,f.getDirection()._m_Z,0),n.Z.multiplyMV(S,p,e.getMainCamera().getViewMatrix()),d[_+4]=S._m_X,d[_+5]=S._m_Y,d[_+6]=S._m_Z,d[_+7]=-1):(d[_+4]=f.getDirection()._m_X,d[_+5]=f.getDirection()._m_Y,d[_+6]=f.getDirection()._m_Z,d[_+7]=-1),d[_+8]=0,d[_+9]=0,d[_+10]=0,d[_+11]=0);return t.uniform4fv(h,g.getBufferData(),0,12*u),null!=o[m.S_CUR_LIGHT_COUNT]&&t.uniform1i(o[m.S_CUR_LIGHT_COUNT].loc,3*u),u+r}draw(t,e,_,i,n,s){if(_.getRenderState().store(),0==s){if(0==n.length){let n=_.m_LastSubShader.getContextVars();if(this.uniqueShading(t,n,!0),null!=n[m.S_AMBIENT_LIGHT_COLOR]){let _=e.AmbientLightColor;t.uniform3f(n[m.S_AMBIENT_LIGHT_COLOR].loc,_._m_X,_._m_Y,_._m_Z)}return null!=n[m.S_CUR_LIGHT_COUNT]&&t.uniform1i(n[m.S_CUR_LIGHT_COUNT].loc,0),void i.draw(_)}let s=e.getRender().getBatchLightSize(),a=0;for(;a<n.length;)a=this._uploadLights(t,e,_,n,s,a),i.draw(_)}else if(1==s){if(0==n.length)return;let s=null,a=e.getRender().getTileInfo(),r=a.tileSize,o=a.tileWidth,h=a.tileHeight,m=a.tileNum;if(this._reset(t,e,m),n.length>0){e.getRender()._checkRenderState(t,this._m_AccumulationLights,_.getRenderState()),this._m_ViewPortWidth=.5*e.getMainCamera().getWidth(),this._m_ViewPortHeight=.5*e.getMainCamera().getHeight(),this._m_PV=e.getMainCamera().getProjectViewMatrix(!0);let i=e.getMainCamera().getViewMatrix();this._m_Temp_Vec3.setToInXYZ(i.m[0],i.m[4],i.m[8]),this._m_CamLeftCoeff=1/e.getMainCamera().getFrustumPlane(1).getNormal().dot(this._m_Temp_Vec3),this._m_Temp_Vec3.setToInXYZ(i.m[1],i.m[5],i.m[9]),this._m_CamTopCoeff=1/e.getMainCamera().getFrustumPlane(2).getNormal().dot(this._m_Temp_Vec3),this._m_Cam_Left.setToInXYZW(i.m[0],i.m[4],i.m[8],1).multLength(-1),this._m_Cam_Up.setToInXYZW(i.m[1],i.m[5],i.m[9],1)}for(let e=0,_=n.length;e<_;e++)s=this._lightClip(t,n[e]),s&&this._tile(r,o,h,m,this._m_Tiles,s,e);this._tileLightDecode(t,_,m,this._m_Tiles,o,h,n),i.draw(_)}e.getRender()._checkRenderState(t,_.getRenderState().restore(),_.getRenderState())}drawArrays(t,e,_,i,n,s){if(_.getRenderState().store(),0==s){if(0==n.length){let n=_.m_LastSubShader.getContextVars();if(this.uniqueShading(t,n,!0),null!=n[m.S_AMBIENT_LIGHT_COLOR]){let _=e.AmbientLightColor;t.uniform3f(n[m.S_AMBIENT_LIGHT_COLOR].loc,_._m_X,_._m_Y,_._m_Z)}return null!=n[m.S_CUR_LIGHT_COUNT]&&t.uniform1i(n[m.S_CUR_LIGHT_COUNT].loc,0),void i.forEach((t=>{t.draw(_)}))}let s=e.getRender().getBatchLightSize(),a=0;for(;a<n.length;)a=this._uploadLights(t,e,_,n,s,a),i.forEach((t=>{t.draw(_)}))}else if(1==s){if(0==n.length)return;let s=null,a=e.getRender().getTileInfo(),r=a.tileSize,o=a.tileWidth,h=a.tileHeight,m=a.tileNum;if(this._reset(t,e,m),n.length>0){e.getRender()._checkRenderState(t,this._m_AccumulationLights,_.getRenderState()),this._m_ViewPortWidth=.5*e.getMainCamera().getWidth(),this._m_ViewPortHeight=.5*e.getMainCamera().getHeight(),this._m_PV=e.getMainCamera().getProjectViewMatrix(!0);let i=e.getMainCamera().getViewMatrix();this._m_Temp_Vec3.setToInXYZ(i.m[0],i.m[4],i.m[8]),this._m_CamLeftCoeff=1/e.getMainCamera().getFrustumPlane(1).getNormal().dot(this._m_Temp_Vec3),this._m_Temp_Vec3.setToInXYZ(i.m[1],i.m[5],i.m[9]),this._m_CamTopCoeff=1/e.getMainCamera().getFrustumPlane(2).getNormal().dot(this._m_Temp_Vec3),this._m_Cam_Left.setToInXYZW(i.m[0],i.m[4],i.m[8],1).multLength(-1),this._m_Cam_Up.setToInXYZW(i.m[1],i.m[5],i.m[9],1)}for(let e=0,_=n.length;e<_;e++)s=this._lightClip(t,n[e]),s&&this._tile(r,o,h,m,this._m_Tiles,s,e);this._tileLightDecode(t,_,m,this._m_Tiles,o,h,n),i.forEach((t=>{t.draw(_)}))}e.getRender()._checkRenderState(t,_.getRenderState().restore(),_.getRenderState())}}},2432:(t,e,_)=>{_.d(e,{Z:()=>A});var i=_(9870),n=_(3815),s=_(3286),a=_(533),r=_(9085),o=_(4771),h=_(8655),m=_(1433),l=_(6384),u=_(3072),f=_(8803),c=_(9363),g=_(801),d=_(5657),S=_(7312),p=_(460),C=_(1181),T=_(7731),E=_(6985),D=_(8597),P=_(16),M=_(9374),x=_(8948);class A extends n.Z{static FORWARD="Forward";static DEFERRED_SHADING="DeferredShading";static TILE_DEFERRED_SHADING="TileDeferredShading";static DEFAULT_DEFERRED_SHADING_FRAMEBUFFER="DefaultDeferredShadingFrameBuffer";static DEFAULT_FORWARD_SHADING_FRAMEBUFFER="DefaultForwardShadingFrameBuffer";static DEFAULT_POST_FILTER_SHADING_FRAMEBUFFER="DefaultPostFilterShadingFrameBuffer";static PRE_FRAME="preFrame";static POST_QUEUE="postQueue";static POST_FRAME="postFrame";getType(){return"Render"}constructor(t,e){super(t,e),this._m_Drawables=[],this._m_DrawableIDs={},this._m_VisDrawables=[],this._m_FramePictures=[],this._m_FramePictureIDs=[],this._m_Sky=null,this._m_Pipeline={},this._m_PipelineConfig={},this._m_PriorityTechnology="",this._m_FrameContext=new i.Z,this._m_RenderPrograms={},this.m_InitState=new s.Z(!0),this._m_OpaqueRenderState=new s.Z,this._m_TranslucentRenderState=new s.Z,this._m_TranslucentRenderState.setFlag(s.Z.S_STATES[0],"Off"),this._m_TranslucentRenderState.setFlag(s.Z.S_STATES[4],"On"),this._m_TranslucentRenderState.setFlag(s.Z.S_STATES[5],["SRC_ALPHA","ONE_MINUS_SRC_ALPHA"]),this._m_BatchLightSize=4,this._m_GammaCorrection=!0,this._m_GammaFactor=.45,this._m_ToneMapping=!1,this._m_TileInfo={tileSize:0,tileWidth:0,tileHeight:0,tileNum:0},this._m_Scene.getCanvas().on("resize",((t,e)=>{this.updateTileInfo(t,e)})),this.setTileSize(32)}updateTileInfo(t,e){let _=this._m_TileInfo.tileSize;this._m_TileInfo.tileWidth=Math.floor(t/_),this._m_TileInfo.tileHeight=Math.floor(e/_),this._m_TileInfo.tileNum=this._m_TileInfo.tileWidth*this._m_TileInfo.tileHeight}setTileSize(t){t!=this._m_TileInfo.tileSize&&(this._m_TileInfo.tileSize=t,this.updateTileInfo(this._m_Scene.getCanvas().getWidth(),this._m_Scene.getCanvas().getHeight()))}getTileInfo(){return this._m_TileInfo}setPriorityTechnology(t){this._m_PriorityTechnology=t}getPriorityTechnology(){return this._m_PriorityTechnology}setBatchLightSize(t){t!=this._m_BatchLightSize&&(t>50&&(t=50),d.Z.mallocLightData(t),this._m_BatchLightSize=t,r.Z.resizeBatchLightSize(t))}getBatchLightSize(){return this._m_BatchLightSize}startUp(){let t=this._m_Scene.getCanvas().getGLContext(),e=t.getExtension("WEBKIT_WEBGL_depth_texture")||t.getExtension("MOZ_WEBGL_depth_texture");f.Z.debug("depthEXT:",e);let _=this._m_Scene.getCanvas().getWidth(),i=this._m_Scene.getCanvas().getHeight(),n=new a.Z(t,A.DEFAULT_DEFERRED_SHADING_FRAMEBUFFER,_,i);this._m_FrameContext.addFrameBuffer(A.DEFAULT_DEFERRED_SHADING_FRAMEBUFFER,n),n.addTexture(t,r.Z.S_G_BUFFER0_SRC,t.RGBA16F,0,t.RGBA,t.FLOAT,t.COLOR_ATTACHMENT0,!0),n.addTexture(t,r.Z.S_G_BUFFER1_SRC,t.RGBA32F,0,t.RGBA,t.FLOAT,t.COLOR_ATTACHMENT1,!0),n.addTexture(t,r.Z.S_G_BUFFER2_SRC,t.RGBA16F,0,t.RGBA,t.FLOAT,t.COLOR_ATTACHMENT2,!0),n.addTexture(t,r.Z.S_G_DEPTH_SRC,t.DEPTH_COMPONENT24,0,t.DEPTH_COMPONENT,t.UNSIGNED_INT,t.DEPTH_ATTACHMENT,!1),n.finish(t,this._m_Scene,!0);let s=new a.Z(t,A.DEFAULT_FORWARD_SHADING_FRAMEBUFFER,_,i);this._m_FrameContext.addFrameBuffer(A.DEFAULT_FORWARD_SHADING_FRAMEBUFFER,s),s.addTexture(t,r.Z.S_FORWARD_COLOR_MAP_SRC,t.RGBA16F,0,t.RGBA,t.FLOAT,t.COLOR_ATTACHMENT0,!1),s.addBuffer(t,"depth",t.DEPTH_COMPONENT24,t.DEPTH_ATTACHMENT),s.finish(t,this._m_Scene,!0);let g=new o.Z(this._m_Scene,{id:"for_m",frameContext:this.getFrameContext(),materialDef:h.Z.parse(c.Z.S_DEFAULT_OUT_COLOR_DEF_DATA)});g.setParam("gammaFactor",(new M.Z).valueOf(this._m_GammaFactor)),s.getFramePicture().setMaterial(g),this._m_FrameContext._m_DefaultFrameBuffer=s.getFrameBuffer();let d=new a.Z(t,A.DEFAULT_POST_FILTER_SHADING_FRAMEBUFFER,_,i);this._m_FrameContext.addFrameBuffer(A.DEFAULT_POST_FILTER_SHADING_FRAMEBUFFER,d),d.addTexture(t,r.Z.S_IN_SCREEN_SRC,t.RGBA16F,0,t.RGBA,t.FLOAT,t.COLOR_ATTACHMENT0,!1),d.addTexture(t,r.Z.S_IN_DEPTH_SRC,t.DEPTH_COMPONENT24,0,t.DEPTH_COMPONENT,t.UNSIGNED_INT,t.DEPTH_ATTACHMENT,!1),d.finish(t,this._m_Scene,!1),this._m_FrameContext._m_DefaultPostFilterFrameBuffer=d.getFrameBuffer(),this._m_RenderPrograms[m.Z.PROGRAM_TYPE]=new m.Z,this._m_RenderPrograms[l.Z.PROGRAM_TYPE]=new l.Z,this._m_RenderPrograms[C.Z.PROGRAM_TYPE]=new C.Z,this._m_RenderPrograms[u.Z.PROGRAM_TYPE]=new u.Z,this._m_RenderPrograms[T.Z.PROGRAM_TYPE]=new T.Z,this._m_RenderPrograms[E.Z.PROGRAM_TYPE]=new E.Z,this._m_RenderPrograms[P.Z.PROGRAM_TYPE]=new P.Z,this._m_PipelineConfig[A.FORWARD]=new S.Z({render:this}),this._m_PipelineConfig[A.DEFERRED_SHADING]=new p.Z({render:this}),this._m_PipelineConfig[A.TILE_DEFERRED_SHADING]=new D.Z({render:this}),this.enablePipeline(A.FORWARD),this.enablePipeline(A.DEFERRED_SHADING),this._m_Scene.getCanvas().on("resize",((e,_)=>{this._m_FrameContext.resize(t,e,_),this._m_FrameContext._m_DefaultFrameBuffer=this._m_FrameContext.getFrameBuffer(A.DEFAULT_FORWARD_SHADING_FRAMEBUFFER).getFrameBuffer(),this._m_FrameContext._m_DefaultPostFilterFrameBuffer=this._m_FrameContext.getFrameBuffer(A.DEFAULT_POST_FILTER_SHADING_FRAMEBUFFER).getFrameBuffer()}))}beginPostFilter(){const t=this._m_Scene.getCanvas().getGLContext();t.bindFramebuffer(t.READ_FRAMEBUFFER,this._m_FrameContext._m_DefaultFrameBuffer),t.bindFramebuffer(t.DRAW_FRAMEBUFFER,this._m_FrameContext._m_DefaultPostFilterFrameBuffer),t.blitFramebuffer(0,0,this._m_Scene.getCanvas().getWidth(),this._m_Scene.getCanvas().getHeight(),0,0,this._m_Scene.getCanvas().getWidth(),this._m_Scene.getCanvas().getHeight(),t.COLOR_BUFFER_BIT|t.DEPTH_BUFFER_BIT,t.NEAREST),t.bindFramebuffer(t.FRAMEBUFFER,this._m_FrameContext._m_DefaultFrameBuffer),"On"==this._m_FrameContext.getRenderState().getFlag(s.Z.S_STATES[3])&&t.disable(t.DEPTH_TEST)}swapPostFilter(){const t=this._m_Scene.getCanvas().getGLContext();t.bindFramebuffer(t.READ_FRAMEBUFFER,this._m_FrameContext._m_DefaultFrameBuffer),t.bindFramebuffer(t.DRAW_FRAMEBUFFER,this._m_FrameContext._m_DefaultPostFilterFrameBuffer),t.blitFramebuffer(0,0,this._m_Scene.getCanvas().getWidth(),this._m_Scene.getCanvas().getHeight(),0,0,this._m_Scene.getCanvas().getWidth(),this._m_Scene.getCanvas().getHeight(),t.COLOR_BUFFER_BIT,t.NEAREST),t.bindFramebuffer(t.FRAMEBUFFER,this._m_FrameContext._m_DefaultFrameBuffer)}finishPostFilter(){}enablePipeline(t){let e=-1;switch(t){case A.FORWARD:e=0;break;case A.DEFERRED_SHADING:case A.TILE_DEFERRED_SHADING:e=1}e>=0?this._m_Pipeline[e]=this._m_PipelineConfig[t]:f.Z.warn("无效pipeline!")}getVisDrawables(){return this._m_VisDrawables}getDrawableIDs(){return this._m_DrawableIDs}getFrameContext(){return this._m_FrameContext}setSky(t){this._m_Sky!=t&&(this._m_Sky=t)}getSky(){return this._m_Sky}addDrawable(t){t.isFramePicture&&t.isFramePicture()?this._m_FramePictureIDs[t.getId()]||(this._m_FramePictureIDs[t.getId()]=t,this._m_FramePictures.push(t)):t.isSky&&t.isSky()||this._m_DrawableIDs[t.getId()]||(this._m_DrawableIDs[t.getId()]=t,this._m_Drawables.push(t))}removeDrawable(t){this._m_DrawableIDs[t.getId()]&&(this._m_DrawableIDs[t.getId()]=null,this._m_Drawables.remove(t))}_checkRenderState(t,e,_){let i=e.getState(),n=!1;for(let e in i)if(_.getFlag(e)!=i[e])switch(n=!0,_.setFlag(e,i[e]),e){case s.Z.S_STATES[0]:switch(i[e]){case s.Z.S_FACE_CULL_BACK:t.enable(t.CULL_FACE),t.cullFace(t.BACK);break;case s.Z.S_FACE_CULL_FRONT:t.enable(t.CULL_FACE),t.cullFace(t.FRONT);break;case s.Z.S_FACE_CULL_FRONT_AND_BACK:t.enable(t.CULL_FACE),t.cullFace(t.FRONT_AND_BACK);break;case s.Z.S_FACE_CULL_OFF:t.disable(t.CULL_FACE)}break;case s.Z.S_STATES[1]:"On"==i[e]?t.depthMask(!0):"Off"==i[e]&&t.depthMask(!1);break;case s.Z.S_STATES[2]:"On"==i[e]?t.colorMask(!0,!0,!0,!0):"Off"==i[e]&&t.colorMask(!1,!1,!1,!1);break;case s.Z.S_STATES[3]:"On"==i[e]?t.enable(t.DEPTH_TEST):"Off"==i[e]&&t.disable(t.DEPTH_TEST);break;case s.Z.S_STATES[4]:"On"==i[e]?t.enable(t.BLEND):"Off"==i[e]&&t.disable(t.BLEND);break;case s.Z.S_STATES[5]:let _=null,n=null;switch(i[e][0]){case"SRC_ALPHA":_=t.SRC_ALPHA;break;case"ONE":_=t.ONE}switch(i[e][1]){case"SRC_ALPHA":n=t.SRC_ALPHA;case"ONE_MINUS_SRC_COLOR":n=t.ONE_MINUS_SRC_COLOR;break;case"ONE_MINUS_SRC_ALPHA":n=t.ONE_MINUS_SRC_ALPHA;break;case"ONE":n=t.ONE}null!=_&&null!=n&&t.blendFunc(_,n);break;case s.Z.S_STATES[6]:"On"==i[e]?t.enable(t.SCISSOR_TEST):"Off"==i[e]&&t.disable(t.SCISSOR_TEST);break;case s.Z.S_STATES[7]:"On"==i[e]?t.enable(t.POLYGON_OFFSET_FILL):"Off"==i[e]&&t.disable(t.POLYGON_OFFSET_FILL);break;case s.Z.S_STATES[8]:t.polygonOffset(i[e][0],i[e][1])}return n}_resetFrameContext(){this._m_FrameContext.reset()}_resetRenderContext(){for(let t in this._m_RenderPrograms)this._m_RenderPrograms[t].reset()}_drawFrame(t){let e=this._m_Scene.getCanvas().getGLContext();this.fire(A.PRE_FRAME,[t]),this._resetFrameContext(),this._resetRenderContext(),this._checkRenderState(e,this.m_InitState,this._m_FrameContext.getRenderState());let _=this._m_VisDrawables,i=!1,n=!1,a=!1,r=!1,o=this._m_Scene.getVisLights(),h={},m=[],l=[];_.forEach((t=>{t.isGUI()?(a=!0,l[t.getMaterial().getId()]||(l[t.getMaterial().getId()]=[]),l[t.getMaterial().getId()].push(t)):t.isOpaque()?(i=!0,h[t.getMaterial().getId()]||(h[t.getMaterial().getId()]=[]),h[t.getMaterial().getId()].push(t)):t.isTranslucent()&&(n=!0,m.push(t))})),this.fire(A.POST_QUEUE,[t]),i&&(this._checkRenderState(e,this._m_OpaqueRenderState,this._m_FrameContext.getRenderState()),r=this._m_Pipeline[1].render({gl:e,scene:this._m_Scene,frameContext:this._m_FrameContext,lights:o,bucket:h}));let u=this._m_Scene.getMainCamera().demandFilter();if(r||((this._m_GammaCorrection||u)&&(r=!0,e.bindFramebuffer(e.FRAMEBUFFER,this._m_FrameContext._m_DefaultFrameBuffer),this._m_FrameContext.m_LastFrameBuffer=this._m_FrameContext._m_DefaultFrameBuffer),e.clear(e.COLOR_BUFFER_BIT|e.DEPTH_BUFFER_BIT)),i&&this._m_Pipeline[0].render({gl:e,scene:this._m_Scene,frameContext:this._m_FrameContext,lights:o,opaque:!0,bucket:h}),this._drawEnv(e,o),n&&(this._checkRenderState(e,this._m_TranslucentRenderState,this._m_FrameContext.getRenderState()),m=g.Z.sortTranslucentBucket(this._m_Scene.getMainCamera(),m),this._m_Pipeline[0].render({gl:e,scene:this._m_Scene,frameContext:this._m_FrameContext,lights:o,translucent:!0,bucket:m})),u&&this.beginPostFilter(),this.fire(A.POST_FRAME,[t]),u&&("On"==this._m_FrameContext.getRenderState().getFlag(s.Z.S_STATES[3])&&e.enable(e.DEPTH_TEST),this.finishPostFilter()),a&&(this._checkRenderState(e,this._m_TranslucentRenderState,this._m_FrameContext.getRenderState()),this._m_Pipeline[0].render({gl:e,scene:this._m_Scene,frameContext:this._m_FrameContext,lights:o,opaque:!0,bucket:l})),r){e.bindFramebuffer(e.FRAMEBUFFER,null);let t=this._m_FrameContext.getFrameBuffer(A.DEFAULT_FORWARD_SHADING_FRAMEBUFFER).getFramePicture(),_=t.getMaterial().getCurrentTechnology().getSubPasss(A.FORWARD);t.getMaterial()._selectSubShader(_.getSubShaders()[0].subShader);let i=_.getSubShaders()[0].subShader.getRenderDatas();"On"==this._m_FrameContext.getRenderState().getFlag(s.Z.S_STATES[3])&&e.disable(e.DEPTH_TEST);for(let t in i)e.activeTexture(e.TEXTURE0+i[t].loc),e.bindTexture(e.TEXTURE_2D,this._m_FrameContext.getFrameBuffer(i[t].refId).getTexture(i[t].dataId).getLoc());t.draw(this._m_FrameContext),"On"==this._m_FrameContext.getRenderState().getFlag(s.Z.S_STATES[3])&&e.enable(e.DEPTH_TEST),this._m_FrameContext.m_LastFrameBuffer=null}}useDefaultFrame(){if(null!=this._m_FrameContext.m_LastFrameBuffer){let t=this._m_Scene.getCanvas().getGLContext();t.bindFramebuffer(t.FRAMEBUFFER,null),this._m_FrameContext.m_LastFrameBuffer=null}}setViewPort(t,e,_,i,n){t.viewport(e,_,i,n)}useForcedMat(t,e,_){let i=e.getCurrentTechnology().getSubPasss(t);if(i){let t=i.getSubShaders(),n=0;for(let i in t){if(n==_){e._selectSubShader(t[i].subShader);let _=t[i].subShader.getRenderDatas();const n=this._m_Scene.getCanvas().getGLContext();for(let t in _)n.activeTexture(n.TEXTURE0+_[t].loc),n.bindTexture(n.TEXTURE_2D,this._m_FrameContext.getFrameBuffer(_[t].refId).getTexture(_[t].dataId).getLoc());break}n++}}}draw(t,e,_,i,n){let s=null,a=null,r=null,o=null;if(_){let h=this._m_FrameContext.m_LastFrameBuffer,m=this._m_FrameContext.m_LastWidth,l=this._m_FrameContext.m_LastHeight,u=m,f=l,c=null,g=0;for(let d in _)if(n&&g>0&&this.swapPostFilter(),g++,a=this._m_Scene.getComponent(d),r=a.getCurrentTechnology(),o=r.getSubPasss(e),o){s=o.getSubShaders();let e=0;for(let r in s){n&&e>0&&this.swapPostFilter(),e++,a._selectSubShader(s[r].subShader),null!=s[r].subShader.getFBId()?(c=this._m_FrameContext.getFrameBuffer(s[r].subShader.getFBId()),this._m_FrameContext.m_LastFrameBuffer!=c&&(this._m_FrameContext.m_LastFrameBuffer=c,t.bindFramebuffer(t.FRAMEBUFFER,c.getFrameBuffer()),u=c.getWidth(),f=c.getHeight(),m==u&&l==f||t.viewport(0,0,u,f),t.clear(t.COLOR_BUFFER_BIT|t.DEPTH_BUFFER_BIT))):this._m_FrameContext.m_LastFrameBuffer!=h&&(t.bindFramebuffer(t.FRAMEBUFFER,h),m==u&&l==f||(u=m,f=l,t.viewport(0,0,u,f)),this._m_FrameContext.m_LastFrameBuffer=h);let o=s[r].subShader.getRenderDatas();for(let e in o)t.activeTexture(t.TEXTURE0+o[e].loc),t.bindTexture(t.TEXTURE_2D,this._m_FrameContext.getFrameBuffer(o[e].refId).getTexture(o[e].dataId).getLoc());s[r].renderState&&this._checkRenderState(t,s[r].renderState,this._m_FrameContext.getRenderState()),this._m_RenderPrograms[s[r].subShader.getRenderProgramType()].drawArrays(t,this._m_Scene,this._m_FrameContext,_[d],i)}}this._m_FrameContext.m_LastFrameBuffer!=h&&(t.bindFramebuffer(t.FRAMEBUFFER,h),m==u&&l==f||(u=m,f=l,t.viewport(0,0,u,f)),this._m_FrameContext.m_LastFrameBuffer=h)}}_drawEnv(t,e){if(this._m_Sky){let _=null,i=this._m_Sky.getMaterial(),n=i.getCurrentTechnology().getSubPasss(A.FORWARD);if(n){_=n.getSubShaders();for(let n in _)_[n].renderState&&this._checkRenderState(t,_[n].renderState,this._m_FrameContext.getRenderState()),i._selectSubShader(_[n].subShader),this._m_RenderPrograms[_[n].subShader.getRenderProgramType()].draw(t,this._m_Scene,this._m_FrameContext,this._m_Sky,e)}}}enableGammaCorrection(t){this._m_GammaCorrection=t}enableToneMapping(t){t!=this._m_ToneMapping&&(this._m_ToneMapping=t,this._m_FrameContext.getFrameBuffer(A.DEFAULT_FORWARD_SHADING_FRAMEBUFFER).getFramePicture().getMaterial().setParam("toneMapping",(new x.Z).valueOf(this._m_ToneMapping)))}setGammaFactor(t){t!=this._m_GammaFactor&&(this._m_GammaFactor=t,this._m_FrameContext.getFrameBuffer(A.DEFAULT_FORWARD_SHADING_FRAMEBUFFER).getFramePicture().getMaterial().setParam("gammaFactor",(new M.Z).valueOf(this._m_GammaFactor)))}render(t){this._drawFrame(t)}_sortDrawList(){}}},801:(t,e,_)=>{_.d(e,{Z:()=>n});var i=_(3792);class n{static _TEMP_BUCKET_ARRAY=[];static _TEMP_ARRAY=[];static _TEMP_VEC3=new i.Z;constructor(){this.m_OpaqueBucket={},this.m_TranslucentBucket={}}addToOpaque(t){}static sortTranslucentBucket(t,e){let _=n._TEMP_BUCKET_ARRAY;_.length=0;let i=n._TEMP_ARRAY;i.length=0;let s=t.getEye();return e.forEach((t=>{i.push([t.getBoundingVolume().getCenter(n._TEMP_VEC3).distanceSq(s),t])})),i.sort(((t,e)=>e[0]-t[0])),i.forEach((t=>{_.push(t[1])})),_}}},4607:(t,e,_)=>{_.d(e,{Z:()=>c});var i=_(3815),n=_(3792),s=_(1441),a=_(5657),r=_(9085),o=_(73),h=_(7014),m=_(8803),l=_(2432),u=_(1575),f=_(1082);class c extends i.Z{static S_TEMP_MAT4=new s.Z;static S_TEMP_VEC3=new n.Z;static S_TEMP_VEC3_2=new n.Z;static S_TEMP_VEC3_3=new n.Z;static S_TEMP_VEC3_4=new n.Z;static S_CAMERA_UPDATE_EVENT="camera_update_event";static S_FRUSTUM_INTERSECT_INTERSECTS=0;static S_FRUSTUM_INTERSECT_INSIDE=1;static S_FRUSTUM_INTERSECT_OUTSIDE=2;static S_LEFT_PLANE=0;static S_RIGHT_PLANE=1;static S_BOTTOM_PLANE=2;static S_TOP_PLANE=3;static S_FAR_PLANE=4;static S_NEAR_PLANE=5;constructor(t,e){super(t,e),this._m_Eye=new n.Z(0,0,10),this._m_At=new n.Z(0,0,-10),this._m_Up=new n.Z(0,1,0),this._m_Dir=new n.Z,this._m_ViewMatrix=new s.Z,this._m_ProjectMatrix=new s.Z,this._m_ProjectViewMatrix=new s.Z,this._m_ViewMatrixUpdate=!1,this._m_ProjectMatrixUpdate=!1,this._m_ProjectViewMatrixUpdate=!1,this._m_ParallelProjection=null!=e.parallelProjection&&e.parallelProjection,this._m_Fovy=e.fovy||45,this._m_FixedAspect=null!=e.aspect&&e.aspect,this._m_IsRenderingCamera=!1,this._m_FrustumPlane=[];for(let t=0;t<6;t++)this._m_FrustumPlane.push(new o.Z);this._m_FrustumNear=.1,this._m_FrustumFar=1e3,this._m_FrustumLeft=0,this._m_FrustumRight=0,this._m_FrustumTop=0,this._m_FrustumBottom=0,this._m_ResolutionInverse=new f.Z,this._m_CoeffLeft=new Array(2).fill(0),this._m_CoeffRight=new Array(2).fill(0),this._m_CoeffBottom=new Array(2).fill(0),this._m_CoeffTop=new Array(2).fill(0),this._m_FrustumMask=0;let _=this._m_Scene.getCanvas(),i=_.getGLContext();this._m_Width=e.width||_.getWidth(),this._m_Height=e.height||_.getHeight(),this._m_FixedSize=null!=e.fixedSize&&e.fixedSize,this._m_ViewMatrix.lookAt(this._m_Eye,this._m_At,this._m_Up),this._m_ViewMatrixUpdate=!0,this._m_ProjectMatrixUpdate=!0,this._m_UpdateCameraPosition=!0,i.viewport(0,0,this._m_Width,this._m_Height),this._m_Scene.getRender().getFrameContext().m_LastWidth=this._m_Width,this._m_Scene.getRender().getFrameContext().m_LastHeight=this._m_Height,this._init(),_.on("resize",(()=>{if(!this._m_FixedSize){if(this._m_Width=_.getWidth(),this._m_Height=_.getHeight(),this._m_IsRenderingCamera){i.viewport(0,0,this._m_Width,this._m_Height),this._m_ResolutionInverse.setToInXY(1/this._m_Width,1/this._m_Height);let t=this._m_Scene.getRender().getFrameContext();t.m_LastWidth=this._m_Width,t.m_LastHeight=this._m_Height,t.getContext(r.Z.S_RESOLUTION_INVERSE)&&(i.bindBuffer(i.UNIFORM_BUFFER,this.VIEW_PORT),i.bufferSubData(i.UNIFORM_BUFFER,0,this._m_ResolutionInverse.getBufferData()),i.bindBuffer(i.UNIFORM_BUFFER,null))}this._m_ParallelProjection?this._m_ProjectMatrix.parallelM(this._m_FrustumLeft,this._m_FrustumRight,this._m_FrustumTop,this._m_FrustumBottom,this._m_FrustumNear,this._m_FrustumFar):this._m_ProjectMatrix.perspectiveM(this._m_Fovy,this._m_FixedAspect?this._m_FixedAspect:1*this._m_Width/this._m_Height,this._m_FrustumNear,this._m_FrustumFar),this._m_ProjectMatrixUpdate=!0}this._doUpdate()})),this._m_Filters=[],this._m_Scene.getRender().on(l.Z.POST_QUEUE,(t=>{this._m_IsRenderingCamera&&this.demandFilter()&&this._m_Filters.forEach((t=>{t.isEnable()&&t.preFrame()}))})),this._m_Scene.getRender().on(l.Z.POST_FRAME,(t=>{if(this._m_IsRenderingCamera&&this.demandFilter()){let t=this._m_Filters.length,e=0;this._m_Filters.forEach((_=>{e++,_.isEnable()&&(_.postFilter(),e<t&&this._m_Scene.getRender().swapPostFilter())}))}}))}_init(){if(this._m_ParallelProjection)this._m_FrustumNear=1,this._m_FrustumFar=2,this._m_FrustumLeft=-.5,this._m_FrustumRight=.5,this._m_FrustumTop=.5,this._m_FrustumBottom=-.5,this._m_ProjectMatrix.parallelM(this._m_FrustumLeft,this._m_FrustumRight,this._m_FrustumTop,this._m_FrustumBottom,this._m_FrustumNear,this._m_FrustumFar);else{let t=1*this._m_Width/this._m_Height,e=.1*Math.tan(.5*h.Z.toRadians(this._m_Fovy)),_=e*t;m.Z.debug("w:"+_+";h:"+e+";as:"+t),this._m_FrustumLeft=-_,this._m_FrustumRight=_,this._m_FrustumBottom=-e,this._m_FrustumTop=e,this._m_FrustumNear=.1,this._m_FrustumFar=1e3,this._m_ProjectMatrix.perspectiveM(this._m_Fovy,this._m_FixedAspect?this._m_FixedAspect:1*this._m_Width/this._m_Height,this._m_FrustumNear,this._m_FrustumFar)}let t=this._m_Scene.getRender().getFrameContext(),e=this._m_Scene.getCanvas().getGLContext();if(t.getContextBlock("MAT"))this.MAT=t.getContextBlock("MAT");else{let _=e.createBuffer();this.MAT=_,e.bindBuffer(e.UNIFORM_BUFFER,_),e.bufferData(e.UNIFORM_BUFFER,192,e.STATIC_DRAW),e.bindBuffer(e.UNIFORM_BUFFER,null),e.bindBufferRange(e.UNIFORM_BUFFER,r.Z.BLOCKS.MAT.blockIndex,_,0,192),t.addContextBlock("MAT",this.MAT)}if(t.getContextBlock("VIEW"))this.VIEW=t.getContextBlock("VIEW");else{let _=e.createBuffer();this.VIEW=_,e.bindBuffer(e.UNIFORM_BUFFER,_),e.bufferData(e.UNIFORM_BUFFER,12,e.STATIC_DRAW),e.bindBuffer(e.UNIFORM_BUFFER,null),e.bindBufferRange(e.UNIFORM_BUFFER,r.Z.BLOCKS.VIEW.blockIndex,_,0,12),t.addContextBlock("VIEW",this.VIEW)}if(t.getContextBlock("VIEW_PORT"))this.VIEW_PORT=t.getContextBlock("VIEW_PORT");else{let _=e.createBuffer();this.VIEW_PORT=_,e.bindBuffer(e.UNIFORM_BUFFER,_),e.bufferData(e.UNIFORM_BUFFER,8,e.STATIC_DRAW),e.bindBuffer(e.UNIFORM_BUFFER,null),e.bindBufferRange(e.UNIFORM_BUFFER,r.Z.BLOCKS.VIEW_PORT.blockIndex,_,0,8),t.addContextBlock("VIEW_PORT",this.VIEW_PORT)}this._m_ResolutionInverse.setToInXY(1/this._m_Width,1/this._m_Height),t.getContext(r.Z.S_RESOLUTION_INVERSE)&&(e.bindBuffer(e.UNIFORM_BUFFER,this.VIEW_PORT),e.bufferSubData(e.UNIFORM_BUFFER,0,this._m_ResolutionInverse.getBufferData()),e.bindBuffer(e.UNIFORM_BUFFER,null)),this._doUpdate()}setFrustum(t,e,_,i,n,s){this._m_FrustumNear=n,this._m_FrustumFar=s,this._m_FrustumLeft=t,this._m_FrustumRight=e,this._m_FrustumTop=_,this._m_FrustumBottom=i,this._m_ProjectMatrix.parallelM(this._m_FrustumLeft,this._m_FrustumRight,this._m_FrustumTop,this._m_FrustumBottom,this._m_FrustumNear,this._m_FrustumFar)}setFrustumPerspective(t,e,_,i){this._m_ParallelProjection=!1,this._m_Fovy=t,this._m_FixedAspect=e;let n=Math.tan(.5*h.Z.toRadians(this._m_Fovy))*_,s=n*this._m_FixedAspect;this._m_FrustumLeft=-s,this._m_FrustumRight=s,this._m_FrustumBottom=-n,this._m_FrustumTop=n,this._m_FrustumNear=_,this._m_FrustumFar=i,this._m_ProjectMatrix.perspectiveM(this._m_Fovy,this._m_FixedAspect?this._m_FixedAspect:1*this._m_Width/this._m_Height,this._m_FrustumNear,this._m_FrustumFar)}forceUpdateProjection(){this._m_ParallelProjection?this._m_ProjectMatrix.parallelM(this._m_FrustumLeft,this._m_FrustumRight,this._m_FrustumTop,this._m_FrustumBottom,this._m_FrustumNear,this._m_FrustumFar):this._m_ProjectMatrix.perspectiveM(this._m_Fovy,this._m_FixedAspect?this._m_FixedAspect:1*this._m_Width/this._m_Height,this._m_FrustumNear,this._m_FrustumFar)}addFilterFromMaterial(t){let e=u.Z.newFilterFromMaterial(this,t);return this._m_Filters.push(e),e}addFilter(t,e){let _=[],i=0;for(let t=Math.min(e,this._m_Filters.length);i<t;i++)_.push(this._m_Filters[i]);_.push(t);for(let t=this._m_Filters.length;i<t;i++)_.push(this._m_Filters[i]);this._m_Filters=_}getFilters(){return this._m_Filters}demandFilter(){return null!=this._m_Filters&&this._m_Filters.length>0}getLeft(){return this._m_FrustumLeft}getRight(){return this._m_FrustumRight}getTop(){return this._m_FrustumTop}getBottom(){return this._m_FrustumBottom}getNear(){return this._m_FrustumNear}getFar(){return this._m_FrustumFar}setFar(t){this._m_FrustumFar=t}setIsRenderingCamera(t){this._m_IsRenderingCamera=t,this._m_UpdateCameraPosition=!0,this._m_ViewMatrixUpdate=!0,this._m_ProjectMatrixUpdate=!0,this._m_ProjectViewMatrixUpdate=!0,t&&this._doUpdate(!0)}getFrustumPlane(t){return this._m_FrustumPlane[t]}getFrustumMask(){return this._m_FrustumMask}setFrustumMask(t){this._m_FrustumMask=t}getAt(){return this._m_At}setAt(t){this._m_At.setTo(t)}getEye(){return this._m_Eye}setEye(t){this._m_Eye.setTo(t)}getUp(){return this._m_Up}setUp(t){this._m_Up.setTo(t)}getDir(){return this._m_Dir}lookAt(t,e,_){this._m_Eye.setTo(t),this._m_At.setTo(e),this._m_At.sub(this._m_Eye,this._m_Dir),this._m_Dir.normal(),_.cross(this._m_Dir,c.S_TEMP_VEC3).normal(),this._m_Dir.cross(c.S_TEMP_VEC3,this._m_Up).normal(),this._m_ViewMatrix.lookAt(this._m_Eye,this._m_At,this._m_Up),this._m_ViewMatrixUpdate=!0,this._doUpdate()}isParallelProjection(){return this._m_ParallelProjection}_updateFrustum(){if(this._m_ParallelProjection)this._m_CoeffLeft[0]=1,this._m_CoeffLeft[1]=0,this._m_CoeffRight[0]=-1,this._m_CoeffRight[1]=0,this._m_CoeffBottom[0]=1,this._m_CoeffBottom[1]=0,this._m_CoeffTop[0]=-1,this._m_CoeffTop[1]=0;else{let t=this._m_FrustumNear*this._m_FrustumNear,e=this._m_FrustumLeft*this._m_FrustumLeft,_=this._m_FrustumRight*this._m_FrustumRight,i=this._m_FrustumBottom*this._m_FrustumBottom,n=this._m_FrustumTop*this._m_FrustumTop,s=1/Math.sqrt(t+e);this._m_CoeffLeft[0]=-this._m_FrustumNear*s,this._m_CoeffLeft[1]=-this._m_FrustumLeft*s,s=1/Math.sqrt(t+_),this._m_CoeffRight[0]=this._m_FrustumNear*s,this._m_CoeffRight[1]=this._m_FrustumRight*s,s=1/Math.sqrt(t+i),this._m_CoeffBottom[0]=this._m_FrustumNear*s,this._m_CoeffBottom[1]=-this._m_FrustumBottom*s,s=1/Math.sqrt(t+n),this._m_CoeffTop[0]=-this._m_FrustumNear*s,this._m_CoeffTop[1]=this._m_FrustumTop*s}c.S_TEMP_VEC3.setToInXYZ(-this._m_ViewMatrix.m[0],-this._m_ViewMatrix.m[4],-this._m_ViewMatrix.m[8]),c.S_TEMP_VEC3_2.setToInXYZ(this._m_ViewMatrix.m[1],this._m_ViewMatrix.m[5],this._m_ViewMatrix.m[9]),c.S_TEMP_VEC3_3.setTo(this._m_Dir);let t=c.S_TEMP_VEC3_3.dot(this._m_Eye),e=this._m_FrustumPlane[c.S_LEFT_PLANE].getNormal();e._m_X=c.S_TEMP_VEC3._m_X*this._m_CoeffLeft[0],e._m_Y=c.S_TEMP_VEC3._m_Y*this._m_CoeffLeft[0],e._m_Z=c.S_TEMP_VEC3._m_Z*this._m_CoeffLeft[0],e.addInXYZ(c.S_TEMP_VEC3_3._m_X*this._m_CoeffLeft[1],c.S_TEMP_VEC3_3._m_Y*this._m_CoeffLeft[1],c.S_TEMP_VEC3_3._m_Z*this._m_CoeffLeft[1]),this._m_FrustumPlane[c.S_LEFT_PLANE].setD(this._m_Eye.dot(e));let _=this._m_FrustumPlane[c.S_RIGHT_PLANE].getNormal();_._m_X=c.S_TEMP_VEC3._m_X*this._m_CoeffRight[0],_._m_Y=c.S_TEMP_VEC3._m_Y*this._m_CoeffRight[0],_._m_Z=c.S_TEMP_VEC3._m_Z*this._m_CoeffRight[0],_.addInXYZ(c.S_TEMP_VEC3_3._m_X*this._m_CoeffRight[1],c.S_TEMP_VEC3_3._m_Y*this._m_CoeffRight[1],c.S_TEMP_VEC3_3._m_Z*this._m_CoeffRight[1]),this._m_FrustumPlane[c.S_RIGHT_PLANE].setD(this._m_Eye.dot(_));let i=this._m_FrustumPlane[c.S_BOTTOM_PLANE].getNormal();i._m_X=c.S_TEMP_VEC3_2._m_X*this._m_CoeffBottom[0],i._m_Y=c.S_TEMP_VEC3_2._m_Y*this._m_CoeffBottom[0],i._m_Z=c.S_TEMP_VEC3_2._m_Z*this._m_CoeffBottom[0],i.addInXYZ(c.S_TEMP_VEC3_3._m_X*this._m_CoeffBottom[1],c.S_TEMP_VEC3_3._m_Y*this._m_CoeffBottom[1],c.S_TEMP_VEC3_3._m_Z*this._m_CoeffBottom[1]),this._m_FrustumPlane[c.S_BOTTOM_PLANE].setD(this._m_Eye.dot(i));let n=this._m_FrustumPlane[c.S_TOP_PLANE].getNormal();n._m_X=c.S_TEMP_VEC3_2._m_X*this._m_CoeffTop[0],n._m_Y=c.S_TEMP_VEC3_2._m_Y*this._m_CoeffTop[0],n._m_Z=c.S_TEMP_VEC3_2._m_Z*this._m_CoeffTop[0],n.addInXYZ(c.S_TEMP_VEC3_3._m_X*this._m_CoeffTop[1],c.S_TEMP_VEC3_3._m_Y*this._m_CoeffTop[1],c.S_TEMP_VEC3_3._m_Z*this._m_CoeffTop[1]),this._m_FrustumPlane[c.S_TOP_PLANE].setD(this._m_Eye.dot(n)),this._m_ParallelProjection&&(this._m_FrustumPlane[c.S_LEFT_PLANE].setD(this._m_FrustumPlane[c.S_LEFT_PLANE].getD()+this._m_FrustumLeft),this._m_FrustumPlane[c.S_RIGHT_PLANE].setD(this._m_FrustumPlane[c.S_RIGHT_PLANE].getD()-this._m_FrustumRight),this._m_FrustumPlane[c.S_TOP_PLANE].setD(this._m_FrustumPlane[c.S_TOP_PLANE].getD()-this._m_FrustumTop),this._m_FrustumPlane[c.S_BOTTOM_PLANE].setD(this._m_FrustumPlane[c.S_BOTTOM_PLANE].getD()+this._m_FrustumBottom)),this._m_FrustumPlane[c.S_FAR_PLANE].setNormaXYZ(-c.S_TEMP_VEC3_3._m_X,-c.S_TEMP_VEC3_3._m_Y,-c.S_TEMP_VEC3_3._m_Z),this._m_FrustumPlane[c.S_FAR_PLANE].setD(-(t+this._m_FrustumFar)),this._m_FrustumPlane[c.S_NEAR_PLANE].setNormaXYZ(c.S_TEMP_VEC3_3._m_X,c.S_TEMP_VEC3_3._m_Y,c.S_TEMP_VEC3_3._m_Z),this._m_FrustumPlane[c.S_NEAR_PLANE].setD(t+this._m_FrustumNear)}_update(){let t=this._m_Scene.getCanvas().getGLContext();t.bindBuffer(t.UNIFORM_BUFFER,this.MAT);let e=this._m_Scene.getRender().getFrameContext();this._m_ViewMatrixUpdate&&(this._m_UpdateCameraPosition=!0,this._m_ProjectViewMatrixUpdate=!0,(e.getContext(r.Z.S_VIEW_MATRIX_SRC)||e.getContext(r.Z.S_VP_SRC)||e.getContext(r.Z.S_MVP_SRC))&&(this._m_IsRenderingCamera&&(t.bufferSubData(t.UNIFORM_BUFFER,0,this._m_ViewMatrix.getBufferData()),e.setCalcContext(r.Z.S_VIEW_MATRIX_SRC,this._m_ViewMatrix)),this._m_ViewMatrixUpdate=!1)),this._m_ProjectMatrixUpdate&&(this._m_ProjectViewMatrixUpdate=!0,(e.getContext(r.Z.S_PROJECT_MATRIX_SRC)||e.getContext(r.Z.S_VP_SRC)||e.getContext(r.Z.S_MVP_SRC))&&(this._m_IsRenderingCamera&&(t.bufferSubData(t.UNIFORM_BUFFER,64,this._m_ProjectMatrix.getBufferData()),e.setCalcContext(r.Z.S_PROJECT_MATRIX_SRC,this._m_ProjectMatrix)),this._m_ProjectMatrixUpdate=!1)),this._m_ProjectViewMatrixUpdate&&e.getContext(r.Z.S_VP_SRC)&&(s.Z.multiplyMM(this._m_ProjectViewMatrix,0,this._m_ProjectMatrix,0,this._m_ViewMatrix,0),this._m_IsRenderingCamera&&(t.bufferSubData(t.UNIFORM_BUFFER,128,this._m_ProjectViewMatrix.getBufferData()),e.setCalcContext(r.Z.S_VP_SRC,this._m_ProjectViewMatrix)),this._m_ProjectViewMatrixUpdate=!1),t.bindBuffer(t.UNIFORM_BUFFER,null),this._m_UpdateCameraPosition&&e.getContext(r.Z.S_CAMERA_POSITION_SRC)&&(this._m_IsRenderingCamera&&(t.bindBuffer(t.UNIFORM_BUFFER,this.VIEW),t.bufferSubData(t.UNIFORM_BUFFER,0,this._m_Eye.getBufferData()),t.bindBuffer(t.UNIFORM_BUFFER,null)),this._m_UpdateCameraPosition=!1),e.getContext(r.Z.S_RESOLUTION_INVERSE)&&(t.bindBuffer(t.UNIFORM_BUFFER,this.VIEW_PORT),t.bufferSubData(t.UNIFORM_BUFFER,0,this._m_ResolutionInverse.getBufferData()),t.bindBuffer(t.UNIFORM_BUFFER,null)),(this._m_ViewMatrixUpdate||this._m_ProjectMatrixUpdate||this._m_ProjectViewMatrixUpdate)&&this._doUpdate(),this._updateFrustum(),this.fire(c.S_CAMERA_UPDATE_EVENT,[this._m_ViewMatrix,this._m_ProjectMatrix,this._m_ProjectViewMatrix])}setViewMatrix(t){this._m_ViewMatrix.set(t);let e=this._m_ViewMatrix.inertRetNew(a.Z.S_TEMP_MAT4);e&&(this._m_Eye.setToInXYZ(e.m[12],e.m[13],e.m[14]),this._m_Up.setToInXYZ(e.m[4],e.m[5],e.m[6]),a.Z.S_TEMP_VEC3.setToInXYZ(-e.m[8],-e.m[9],-e.m[10]),a.Z.S_TEMP_VEC3.add(this._m_Eye,this._m_At),this._m_At.sub(this._m_Eye,this._m_Dir),this._m_Dir.normal()),this._m_ViewMatrixUpdate=!0,this._doUpdate()}getViewMatrix(){return this._m_ViewMatrix}getProjectViewMatrix(t){return t&&s.Z.multiplyMM(this._m_ProjectViewMatrix,0,this._m_ProjectMatrix,0,this._m_ViewMatrix,0),this._m_ProjectViewMatrix}setProjectMatrix(t){this._m_ProjectMatrix.set(t),this._m_ProjectMatrixUpdate=!0,this._doUpdate()}getHeight(){return this._m_Height}getWidth(){return this._m_Width}scroll(t){this._m_ProjectMatrix.perspectiveM(t,1*this._m_Width/this._m_Height,this._m_FrustumNear,this._m_FrustumFar),this._m_ProjectMatrixUpdate=!0,this._doUpdate()}getProjectMatrix(){return this._m_ProjectMatrix}frustumContains(t){if(t){let e=0,_=0,i=0,n=c.S_FRUSTUM_INTERSECT_INSIDE;for(let s=6;s>=0;s--)if(s!=t.getPriorityPlane()&&(_=6==s?t.getPriorityPlane():s,e=1<<_,0==(this._m_FrustumMask&e))){if(i=t.whichSide(this._m_FrustumPlane[_]),i==o.Z.S_SIDE_NEGATIVE)return t.setPriorityPlane(_),c.S_FRUSTUM_INTERSECT_OUTSIDE;i==o.Z.S_SIDE_POSITIVE?this._m_FrustumMask|=e:n=c.S_FRUSTUM_INTERSECT_INTERSECTS}return n}return c.S_FRUSTUM_INTERSECT_INSIDE}getWorldCoordinates(t,e,_,i){i||(i=new n.Z),_?(s.Z.multiplyMM(this._m_ProjectViewMatrix,0,this._m_ProjectMatrix,0,this._m_ViewMatrix,0),c.S_TEMP_MAT4.set(this._m_ProjectViewMatrix)):c.S_TEMP_MAT4.set(this._m_ProjectMatrix),c.S_TEMP_MAT4.inert();let a=this.getWidth(),r=this.getHeight();c.S_TEMP_VEC3.setToInXYZ((t._m_X/a-0)/1*2-1,(t._m_Y/r-0)/1*2-1,2*e-1);let o=s.Z.multiplyMV3(i,c.S_TEMP_VEC3,c.S_TEMP_MAT4);return i.multLength(1/o),i}}},7150:(t,e,_)=>{_.d(e,{Z:()=>T});var i=_(3815),n=_(1760),s=_(3286),a=_(2432),r=_(1441),o=_(533),h=(_(9085),_(4771)),m=_(9881),l=_(8655),u=_(9363),f=_(4963),c=_(6953),g=_(8948),d=_(3448),S=_(1082),p=_(9374),C=_(1753);class T extends i.Z{static S_QUADRATIC_SCALING=1;static S_FIXED=2;_m_ShadowSplitType=T.S_QUADRATIC_SCALING;_m_MainCamera;_m_PreShadowMat;_m_PostShadowMat;_m_NbShadowMaps=1;_m_Light;_m_SkipPass;_m_ShadowGeometryCasts=[];_m_ShadowGeometryReceivers=[];_m_FadeInfo=null;_m_ZFarOverride=0;_m_FadeLength=0;_m_BackfaceShadows=!1;_m_PCFEdge=1;_m_ShadowIntensity=.7;_m_ResolutionInverse=new S.Z;_m_ShadowMapSizeInverse=new S.Z;_m_LVPM=[];_m_ShadowFB=[];_m_ShadowMapSize=512;_m_ShadowMapSizes=[];_m_BiasFactor=1;_m_BiasUnits=1;_m_ShadowRenderState=new s.Z;_m_ShadowRenderState2=new s.Z;_m_UploadShadowMaps=[];_m_UploadLightViews=[];_m_Enable=!0;_m_DebugShadowMap=[];_m_Debug=!1;static S_SHADOW_MAP_ARRAY_SRC={0:"_shadowMap0",1:"_shadowMap1",2:"_shadowMap2",3:"_shadowMap3",4:"_shadowMap4",5:"_shadowMap5",6:"_shadowMap6"};static S_LIGHT_SHADOW_VP_ARRAY_SRC={0:"_lightViewProjectMatrix0",1:"_lightViewProjectMatrix1",2:"_lightViewProjectMatrix2",3:"_lightViewProjectMatrix3",4:"_lightViewProjectMatrix4",5:"_lightViewProjectMatrix5",6:"_lightViewProjectMatrix6"};static S_LIGHT_DIR="_lightDir";static S_LIGHT_POS="_lightPos";static S_SPLITS="_splits";static S_FADEINFO="_fadeInfo";static S_RESOLUTION_INVERSE="_ResolutionInverse";static S_SHADOW_MAP_SIZE="_shadowMapSize";static S_SHADOW_MAP_SIZE_INVERSE="_sMapSizeInverse";constructor(t,e){super(t,e),this._m_NbShadowMaps=e.nbShadowMaps,this._m_ShadowMapSize=e.shadowMapSize,this._m_Debug=null!=e.debug&&e.debug,this._m_BackfaceShadows=null!=e.backfaceShadows&&e.backfaceShadows,this._m_ShadowSplitType=e.shadowSplitType||this._m_ShadowSplitType;const _=this._m_Scene.getCanvas().getGLContext();let i=this._m_ShadowMapSize,n=Math.min(1/this._m_NbShadowMaps,.25);for(let t=0;t<this._m_NbShadowMaps;t++)if(this._m_LVPM[t]=new r.Z,this._m_ShadowSplitType==T.S_QUADRATIC_SCALING?(this._m_ShadowFB[t]=new o.Z(_,"ShadowFB_"+t+m.Z.nextId(),i,i),this._m_ShadowMapSizes[t]=i,i/=2,i=Math.max(i,128)):this._m_ShadowSplitType==T.S_FIXED?this._m_ShadowFB[t]=new o.Z(_,"ShadowFB_"+t+m.Z.nextId(),this._m_ShadowMapSize,this._m_ShadowMapSize):Log.error("错误的阴影类型!"),this._m_ShadowFB[t].setFixedSize(!0),this._m_Debug&&this._m_ShadowFB[t].addTexture(_,"ShadowFBDefaultColor",_.RGBA,0,_.RGBA,_.UNSIGNED_BYTE,_.COLOR_ATTACHMENT0,!1),this._m_ShadowFB[t].addTexture(_,T.S_SHADOW_MAP_ARRAY_SRC[t],_.DEPTH_COMPONENT16,0,_.DEPTH_COMPONENT,_.UNSIGNED_SHORT,_.DEPTH_ATTACHMENT,!1),this._m_ShadowFB[t].finish(_,this._m_Scene,!1),this._m_UploadShadowMaps[t]=T.S_SHADOW_MAP_ARRAY_SRC[t],this._m_UploadLightViews[t]=T.S_LIGHT_SHADOW_VP_ARRAY_SRC[t],this._m_Debug){this._m_DebugShadowMap[t]=new f.Z(this._m_Scene,{id:"debug_shadow_map_"+t}),this._m_DebugShadowMap[t].setSize(n,.3),this._m_DebugShadowMap[t].setLeftTop(2.01*n*t-(1-n),-.7),this._m_DebugShadowMap[t].useDefaultMat();let e=new c.Z(this._m_Scene);e.setTextureFormat(c.Z.S_TEXTURE_FORMAT.S_RGBA,c.Z.S_TEXTURE_FORMAT.S_RGBA,c.Z.S_TEXTURE_FORMAT.S_UNSIGNED_BYTE),e.target(this._m_ShadowFB[t]),this._m_DebugShadowMap[t].getMaterial().setParam("colorMap",e),this._m_DebugShadowMap[t].setZIndex(0)}this._m_ShadowRenderState.setFlag(s.Z.S_STATES[0],s.Z.S_FACE_CULL_FRONT),this._m_Debug||this._m_ShadowRenderState.setFlag(s.Z.S_STATES[2],"Off"),this._m_ShadowRenderState.setFlag(s.Z.S_STATES[7],"On"),this._m_ShadowRenderState.setFlag(s.Z.S_STATES[8],[this._m_BiasFactor,this._m_BiasUnits]),this._m_ShadowRenderState2.setFlag(s.Z.S_STATES[1],"Off"),this._m_PreShadowMat=new h.Z(this._m_Scene,{id:"preShadowMat_"+m.Z.nextId(),materialDef:l.Z.parse(u.Z.S_PRE_SHADOW_DEF_DATA)}),this._m_Debug&&this._m_PreShadowMat.setParam("debug",(new g.Z).valueOf(!0)),this._m_PostShadowMat=new h.Z(this._m_Scene,{id:"postShadowMat_"+m.Z.nextId(),materialDef:l.Z.parse(u.Z.S_POST_SHADOW_DEF_DATA)}),this._m_PostShadowMat.setParam("pcfEdge",(new p.Z).valueOf(this._m_PCFEdge)),this._m_PostShadowMat.setParam("shadowIntensity",(new p.Z).valueOf(this._m_ShadowIntensity)),this._m_ShadowMapSizeInverse.setToInXY(1/this._m_ShadowMapSize,1/this._m_ShadowMapSize),this._m_PostShadowMat.setParam("backfaceShadows",(new g.Z).valueOf(this._m_BackfaceShadows)),this.initMat(),this._m_FramePicture=new d.Z(this._m_Scene,{id:this._m_Id+"_picture"}),this._m_Scene.getMainCamera().addFilter(this,0)}isEnable(){return this._m_Enable}enable(t){this._m_Enable=t}initMat(){}setBackfaceShadows(t){this._m_BackfaceShadows!=t&&(this._m_BackfaceShadows=t,this._m_PostShadowMat.setParam("backfaceShadows",(new g.Z).valueOf(this._m_BackfaceShadows)))}isBackfaceShadows(){return this._m_BackfaceShadows}setBias(t,e){this._m_BiasFactor=t,this._m_BiasUnits=e,this._m_ShadowRenderState.setFlag(s.Z.S_STATES[8],[this._m_BiasFactor,this._m_BiasUnits])}getBiasFactor(){return this._m_BiasFactor}getBiasUnits(){return this._m_BiasUnits}setFade(t,e){this._m_FadeInfo||(this._m_FadeInfo=new C.Z);let _=this._m_FadeInfo.valueFromXY(t,e);this._m_PostShadowMat.setParam("fadeInfo",_)}setFadeExtend(t){this._m_ZFarOverride!=t&&(this._m_ZFarOverride=t),0==this._m_ZFarOverride?this._m_FadeInfo&&this.setFade(0,0):this.setFade(this._m_ZFarOverride-this._m_FadeLength,1/this._m_FadeLength)}getFadeExtend(){return this._m_ZFarOverride}setFadeLength(t){this._m_FadeLength!=t&&(this._m_FadeLength=t),0==this._m_ZFarOverride?this._m_FadeInfo&&this.setFade(0,0):this.setFade(this._m_ZFarOverride-this._m_FadeLength,1/this._m_FadeLength)}getFadeLength(){return this._m_FadeLength}setPCFEdge(t){this._m_PCFEdge!=t&&(this._m_PCFEdge=t,this._m_PostShadowMat.setParam("pcfEdge",(new p.Z).valueOf(this._m_PCFEdge)))}getPCFEdge(){return this._m_PCFEdge}setShadowIntensity(t){this._m_ShadowIntensity!=t&&(this._m_ShadowIntensity=t,this._m_PostShadowMat.setParam("shadowIntensity",(new p.Z).valueOf(this._m_ShadowIntensity)))}getShadowIntensity(){return this._m_ShadowIntensity}setLight(t){this._m_Light=t}getLight(){return this._m_Light}updateShadowCams(){}visLight(){return 0!=(this._m_Light._m_Mark&n.Z.S_VISIBLE_LIGHT)}generateShadowMap(t,e,_,i){this._m_ShadowGeometryCasts.length=0,this._m_ShadowGeometryCasts=this.getShadowGeometryCasts(i,this._m_ShadowGeometryCasts);let n=this.getShadowCam(i);this._m_LVPM[i].set(n.getProjectViewMatrix(!0)),this._m_Scene.setMainCamera(n),this._m_ShadowFB[i].use(e),this._m_ShadowFB[i].clear(t),this._m_ShadowGeometryCasts.forEach((t=>{t.draw(_)}))}getShadowGeometryCasts(t,e){return e}getShadowGeometryReceivers(t){return t}getShadowCam(t){}_uploadInfo(t,e){let _=e.m_LastSubShader.getContextVars(),i=null;for(let e=0;e<this._m_NbShadowMaps;e++)i=_[T.S_SHADOW_MAP_ARRAY_SRC[e]],null!=i&&(t.activeTexture(t.TEXTURE0+i.loc),t.bindTexture(t.TEXTURE_2D,this._m_ShadowFB[e].getTexture(T.S_SHADOW_MAP_ARRAY_SRC[e]).getLoc())),i=_[T.S_LIGHT_SHADOW_VP_ARRAY_SRC[e]],null!=i&&t[i.fun](i.loc,!1,this._m_LVPM[e].getBufferData());this._m_BackfaceShadows,i=_[T.S_SHADOW_MAP_SIZE],null!=i&&t.uniform1f(i.loc,this._m_ShadowMapSize),i=_[T.S_SHADOW_MAP_SIZE_INVERSE],null!=i&&t.uniform2f(i.loc,this._m_ShadowMapSizeInverse._m_X,this._m_ShadowMapSizeInverse._m_Y)}preFrame(){if(this._m_ShadowGeometryReceivers.length=0,this._m_SkipPass=!this.visLight(),this._m_SkipPass)return;this.updateShadowCams();let t=this._m_Scene.getRender();this._m_MainCamera=this._m_Scene.getMainCamera();let e=t.getFrameContext();const _=this._m_Scene.getCanvas().getGLContext();e.getRenderState().store(),this._m_ShadowSplitType==T.S_FIXED&&t.setViewPort(_,0,0,this._m_ShadowMapSize,this._m_ShadowMapSize),t._checkRenderState(_,this._m_ShadowRenderState,e.getRenderState()),t.useForcedMat("PreFrame",this._m_PreShadowMat,0);for(let i=0;i<this._m_NbShadowMaps;i++)this._m_ShadowSplitType==T.S_QUADRATIC_SCALING&&t.setViewPort(_,0,0,this._m_ShadowMapSizes[i],this._m_ShadowMapSizes[i]),this.generateShadowMap(_,t,e,i);this._m_Scene.setMainCamera(this._m_MainCamera),this._m_Scene.getRender().useDefaultFrame(),t.setViewPort(_,0,0,this._m_Scene.getCanvas().getWidth(),this._m_Scene.getCanvas().getHeight()),t._checkRenderState(_,e.getRenderState().restore(),e.getRenderState())}postFilter(){if(this._m_SkipPass)return;let t=this._m_Scene.getRender(),e=t.getFrameContext();const _=this._m_Scene.getCanvas().getGLContext();if(e.getRenderState().store(),t._checkRenderState(_,this._m_ShadowRenderState2,e.getRenderState()),t.useForcedMat("PostFilter",this._m_PostShadowMat,0),this._uploadInfo(_,e),this._m_FramePicture.draw(e),this._m_Debug)for(let _=0;_<this._m_NbShadowMaps;_++)t.useForcedMat(a.Z.FORWARD,this._m_DebugShadowMap[_].getMaterial(),0),this._m_DebugShadowMap[_].draw(e);t._checkRenderState(_,e.getRenderState().restore(),e.getRenderState())}}},9968:(t,e,_)=>{_.d(e,{Z:()=>u});var i=_(7150),n=_(8803),s=_(4607),a=_(9881),r=_(3792),o=_(6092),h=_(9692),m=_(2245),l=_(9085);class u extends i.Z{_m_SplitsVec4=new h.Z;_m_SplitsArray=null;_m_ShadowCam=null;_m_Points=new Array(8);_m_TempVec3=new r.Z;_m_Lambda=.65;_m_Stabilize=!0;constructor(t,e){e.nbShadowMaps=e.nbSplits,super(t,e),this.init(e.nbSplits,e.shadowMapSize)}init(t,e){this._m_NbShadowMaps=Math.max(Math.min(t,4),1),this._m_NbShadowMaps!=t&&n.Z.error("PSSM分割级别只能为1-4之间,指定的分割级别为:"+t),this._m_SplitsArray=new Array(this._m_NbShadowMaps+1),this._m_ShadowCam=new s.Z(this._m_Scene,{id:"DirectionalLightShadowProcess_"+a.Z.nextId(),width:e,height:e,fixedSize:!0,parallelProjection:!0}),this._m_ShadowCam.setEye(new r.Z(0,0,0));for(let t=0;t<8;t++)this._m_Points[t]=new r.Z}initMat(){super.initMat(),this._m_PostShadowMat.addDefine(l.Z.S_PSSM_SRC,!1)}_uploadInfo(t,e){super._uploadInfo(t,e);let _=e.m_LastSubShader.getContextVars(),n=null;if(n=_[i.Z.S_LIGHT_DIR],n){let e=this._m_Light.getDirection();t.uniform3f(n.loc,e._m_X,e._m_Y,e._m_Z)}n=_[i.Z.S_SPLITS],n&&t.uniform4f(n.loc,this._m_SplitsVec4._m_X,this._m_SplitsVec4._m_Y,this._m_SplitsVec4._m_Z,this._m_SplitsVec4._m_W)}updateShadowCams(){if(null==this._m_Light)return void n.Z.warn("无效光源!");const t=this._m_Scene.getMainCamera();let e=this._m_ZFarOverride;0==e&&(e=t.getFar());let _=Math.max(t.getNear(),.001);o.Z.calculateLightConeScope(t,_,e,1,this._m_Points),this._m_ShadowCam.setFar(e);let i=this._m_ShadowCam.getEye();if(this._m_ShadowCam.lookAt(i,i.add(this._m_Light.getDirection(),this._m_TempVec3),this._m_ShadowCam.getUp()),this._m_ShadowCam._updateFrustum(),this._m_ShadowCam.forceUpdateProjection(),this._m_ShadowCam.getProjectViewMatrix(!0),o.Z.calculateSplits(this._m_SplitsArray,_,e,this._m_Lambda),t.isParallelProjection()){let t=1*(e-_);for(let e=0;e<this._m_NbShadowMaps;e++)this._m_SplitsArray[e]/=t}switch(this._m_SplitsArray.length){case 5:this._m_SplitsVec4._m_W=this._m_SplitsArray[4];case 4:this._m_SplitsVec4._m_Z=this._m_SplitsArray[3];case 3:this._m_SplitsVec4._m_Y=this._m_SplitsArray[2];case 2:case 1:this._m_SplitsVec4._m_X=this._m_SplitsArray[1]}}getShadowCam(t){return this._m_ShadowCam}getShadowGeometryCasts(t,e){return o.Z.calculateLightConeScope(this._m_MainCamera,this._m_SplitsArray[t],this._m_SplitsArray[t+1],1,this._m_Points),0==this._m_ShadowGeometryReceivers.length&&o.Z.calculateGeometriesInFrustum(this._m_Scene.getRender().getVisDrawables(),this._m_MainCamera,m.Z.S_SHADOW_RECEIVE,this._m_ShadowGeometryReceivers),o.Z.calculateShadowCamera(this._m_Scene.getSceneNodes(),this._m_ShadowGeometryReceivers,this._m_ShadowCam,this._m_Points,e,this._m_Stabilize?this._m_ShadowMapSize:0),e}getShadowGeometryReceivers(t){0==t.length&&o.Z.calculateGeometriesInFrustum(this._m_Scene.getRender().getVisDrawables(),this._m_MainCamera,m.Z.S_SHADOW_RECEIVE,t)}}},6092:(t,e,_)=>{_.d(e,{Z:()=>h});var i=_(3792),n=_(2245),s=_(1441),a=_(6153),r=_(8375),o=_(1760);class h{static S_TEMP_VEC3_0=new i.Z;static S_TEMP_VEC3_1=new i.Z;static S_TEMP_VEC3_2=new i.Z;static S_TEMP_VEC3_3=new i.Z;static S_TEMP_VEC3_4=new i.Z;static S_TEMP_VEC3_5=new i.Z;static S_TEMP_VEC3_6=new i.Z;static S_TEMP_VEC3_7=new i.Z;static S_TEMP_VEC3_8=new i.Z;static S_TEMP_VEC3_00=new i.Z;static S_TEMP_VEC3_11=new i.Z;static S_TEMP_VEC3_22=new i.Z;static S_TEMP_VEC3_33=new i.Z;static S_TEMP_VEC3_44=new i.Z;static S_TEMP_VEC3_55=new i.Z;static S_TEMP_MAT44_0=new s.Z;static S_TEMP_MAT44_1=new s.Z;static S_AABB_BOUNDARY_BOX0=new a.Z;static S_AABB_BOUNDARY_BOX1=new a.Z;static calculateLightConeScope(t,e,_,i,n){let s=1*t.getTop()/t.getNear(),a=1*e,r=1*_,o=1*t.getTop(),m=1*t.getRight()/o,l=-1,u=-1,f=-1,c=-1;t.isParallelProjection()?(l=o,u=l*m,f=o,c=f*m):(l=s*a,u=l*m,f=s*r,c=f*m);let g=t.getEye(),d=t.getDir(),S=t.getUp(),p=d.cross(S,h.S_TEMP_VEC3_1).normal(),C=d.multLength(r,h.S_TEMP_VEC3_2).add(g),T=d.multLength(a,h.S_TEMP_VEC3_3).add(g),E=S.multLength(l,h.S_TEMP_VEC3_4),D=S.multLength(f,h.S_TEMP_VEC3_5),P=p.multLength(u,h.S_TEMP_VEC3_6),M=p.multLength(c,h.S_TEMP_VEC3_7);if(T.sub(E,n[0]).sub(P),T.add(E,n[1]).sub(P),T.add(E,n[2]).add(P),T.sub(E,n[3]).add(P),C.sub(D,n[4]).sub(M),C.add(D,n[5]).sub(M),C.add(D,n[6]).add(M),C.sub(D,n[7]).add(M),1!=i){let t=h.S_TEMP_VEC3_8.setToInXYZ(0,0,0);for(let e=0;e<8;e++)t.add(n[e]);t.multLength(1/8);let e=h.S_TEMP_VEC3_0;for(let _=0;_<8;_++)n[_].sub(t,e),e.multLength(i-1),n[_].add(e)}}static calculateSplits(t,e,_,i){let n=-1,s=-1,a=-1,r=1*_/e,o=_-e;for(let _=0,h=t.length;_<h;_++)n=1*_/h,s=e*Math.pow(r,n),a=e+o*n,t[_]=s*i+a*(1-i);t[0]=e,t[t.length-1]=_}static calculateShadowCamera(t,e,_,i,n,o){_.isParallelProjection()&&(_.setFrustum(-1,1,1,-1,-_.getFar(),_.getFar()),_.forceUpdateProjection());let m=_.getProjectViewMatrix(!0),l=h.calculateBoundaryFromPoints(i,m,h.S_AABB_BOUNDARY_BOX0),u=new a.Z,f=new a.Z,c=0,g=0,d=null,S=null,p=null;e.forEach((t=>{d=t.getBoundingVolume(),S=h.S_AABB_BOUNDARY_BOX1,d.transformFromMat44(m,h.S_AABB_BOUNDARY_BOX1),l.contains(S)&&(p=S.getCenter(),Math.abs(p._m_X)!=Number.MAX_VALUE&&!Number.isNaN(p._m_X)&&Number.isFinite(p._m_X)&&(f.merge(S),g++))}));let C=new r.Z(m,c,l,u,n);t.forEach((t=>{C.calculate(t)})),c=C._m_CasterCount,c!=g&&u.setHalfInXYZ(u.getXHalf()+2,u.getYHalf()+2,u.getZHalf()+2);let T=u.getMin(h.S_TEMP_VEC3_00),E=u.getMax(h.S_TEMP_VEC3_11),D=f.getMin(h.S_TEMP_VEC3_22),P=f.getMax(h.S_TEMP_VEC3_33),M=l.getMin(h.S_TEMP_VEC3_44),x=l.getMax(h.S_TEMP_VEC3_55);M._m_Z=0;let A,L,R,I,v,w,F=_.getProjectMatrix(),b=h.S_TEMP_VEC3_8,O=h.S_TEMP_VEC3_7;b._m_X=Math.max(Math.max(T._m_X,D._m_X),M._m_X),O._m_X=Math.min(Math.min(E._m_X,P._m_X),x._m_X),b._m_Y=Math.max(Math.max(T._m_Y,D._m_Y),M._m_Y),O._m_Y=Math.min(Math.min(E._m_Y,P._m_Y),x._m_Y),b._m_Z=Math.min(T._m_Z,M._m_Z),O._m_Z=Math.min(P._m_Z,x._m_Z),A=2/(O._m_X-b._m_X),L=2/(O._m_Y-b._m_Y);let Z=.5*o;if(0!=Z&&A>0&&L>0){let t=.1;A=1/Math.ceil(1/A*t)*t,L=1/Math.ceil(1/L*t)*t}I=-.5*(O._m_X+b._m_X)*A,v=-.5*(O._m_Y+b._m_Y)*L,0!=Z&&A>0&&L>0&&(I=1*Math.ceil(I*Z)/Z,v=1*Math.ceil(v*Z)/Z),R=1/(O._m_Z-b._m_Z),w=-b._m_Z*R;let B=h.S_TEMP_MAT44_0;B.setArray([A,0,0,0,0,L,0,0,0,0,R,0,I,v,w,1]);let y=h.S_TEMP_MAT44_1;s.Z.multiplyMM(y,0,B,0,F,0),_.setProjectMatrix(y)}static calculateBoundaryFromPoints(t,e,_){let n=h.S_TEMP_VEC3_0.setTo(i.Z.S_MIN),r=h.S_TEMP_VEC3_1.setTo(i.Z.S_MAX),o=h.S_TEMP_VEC3_2,m=0;for(let _=0,i=t.length;_<i;_++)m=s.Z.multiplyMV3(o,t[_],e),o.multLength(1/m),n.min(o),r.max(o);let l=n.add(r,h.S_TEMP_VEC3_3).multLength(.5),u=r.sub(n,h.S_TEMP_VEC3_4).multLength(.5),f=_||new a.Z;return f.setCenter(l),f.setHalfInXYZ(u._m_X+2,u._m_Y+2,u._m_Z+2.5),f}static calculateGeometriesInFrustum(t,e,_,i){let n=e.getFrustumMask();h._cull(t,e,_,i),e.setFrustumMask(n)}static calculateNodeInFrustum(t,e,_,i){let n=e.getFrustumMask();e.setFrustumMask(0),h._cull2(t,e,_,i),e.setFrustumMask(n)}static _cull(t,e,_,i){t.forEach((t=>{e.setFrustumMask(0),t.inFrustum(e)&&h._parseShadowMode(t,_)&&i.push(t)}))}static _cull2(t,e,_,i){if(t.getFilterFlag()!=n.Z.S_ALWAYS&&t.inFrustum(e))if(t.isDrawable&&t.isDrawable()&&!t.isGUI())h._parseShadowMode(t,_)&&i.push(t);else if(t.getChildren().length>0){let n=e.getFrustumMask();t.getChildren().forEach((t=>{t instanceof o.Z||(e.setFrustumMask(n),h._cull2(t,e,_,i))}))}}static _parseShadowMode(t,e){if(e!=n.Z.S_SHADOW_NONE)switch(e){case n.Z.S_SHADOW_CAST:return t.isCastShadow();case n.Z.S_SHADOW_RECEIVE:return t.isReceiveShadow();case n.Z.S_SHADOW_CAST_AND_RECEIVE:return!0}return!1}}},8375:(t,e,_)=>{_.d(e,{Z:()=>r}),_(3121);var i=_(2245),n=_(6153),s=_(8333),a=_(3792);class r{_m_VP;_m_CasterCount;_m_SplitBoundaryBox;_m_CasterBoundaryBox;_m_SplitOccluders;static S_TEMP_VEC3_0=new a.Z;static S_TEMP_VEC3_1=new a.Z;static S_TEMP_VEC3_2=new a.Z;static S_AABB_BOUNDARY_BOX0=new n.Z;static S_AABB_BOUNDARY_BOX1=new n.Z;constructor(t,e,_,i,n){this._m_VP=t,this._m_CasterCount=e,this._m_SplitBoundaryBox=_,this._m_CasterBoundaryBox=i,this._m_SplitOccluders=n}calculate(t){return this._calculate(t),this._m_CasterCount}_calculate(t){if(t.getFilterFlag()!=i.Z.S_ALWAYS)if(t.isDrawable&&t.isDrawable()&&!t.isGUI()){if(t.isCastShadow()){let e=t.getBoundingVolume(),_=r.S_AABB_BOUNDARY_BOX0;e.transformFromMat44(this._m_VP,r.S_AABB_BOUNDARY_BOX0);let i=this._m_SplitBoundaryBox.contains(_);if(i||e.getType()!=s.Z.S_TYPE_AABB)i&&(this._m_CasterBoundaryBox.merge(_),this._m_CasterCount++,null!=this._m_SplitOccluders&&this._m_SplitOccluders.push(t));else if(_.setZHalf(_.getZHalf()+50),_.setCenter(_.getCenter(r.S_TEMP_VEC3_0).addInXYZ(0,0,25)),this._m_SplitBoundaryBox.contains(_)){let e=_.getCenter(r.S_TEMP_VEC3_1)._m_X;Math.abs(e)!=Number.MAX_VALUE&&!Number.isNaN(e)&&Number.isFinite(e)&&(_.setZHalf(_.getZHalf()-50),_.setCenter(_.getCenter(r.S_TEMP_VEC3_0).subInXYZ(0,0,25)),this._m_CasterBoundaryBox.merge(_),this._m_CasterCount++),null!=this._m_SplitOccluders&&this._m_SplitOccluders.push(t)}}}else if(t instanceof i.Z){let e=t.getBoundingVolume();if(null!=e){let _=r.S_AABB_BOUNDARY_BOX0;e.transformFromMat44(this._m_VP,r.S_AABB_BOUNDARY_BOX0);let i=this._m_SplitBoundaryBox.contains(_);i||_.getType()!=s.Z.S_TYPE_AABB||(_.setZHalf(_.getZHalf()+50),_.setCenter(_.getCenter(r.S_TEMP_VEC3_0).addInXYZ(0,0,25)),i=this._m_SplitBoundaryBox.contains(_)),i&&t.getChildren().forEach((t=>{this._calculate(t)}))}}}}},3396:(t,e,_)=>{_.d(e,{Z:()=>n});var i=_(8803);class n{constructor(){}static _get(t,e,_,i){i=i||{sync:!0};const n=new XMLHttpRequest;if(n.open(_||"POST",t,i.sync),i&&i.inflate&&(n.responseType="arraybuffer"),0==i.sync)return n.send(null),200===n.status?n.responseText:null;n.onreadystatechange=function(){4===n.readyState&&200===n.status&&e(n.response)},n.send(null)}static getBasePath(t){let e=t.lastIndexOf("/");return-1===e?t:t.substring(0,e+1)}static loadFile(t,e,_,n){(n=n||{type:"GET",sync:!0}).type=n.type||"GET",n.sync=null==n.sync||n.sync;let s=new XMLHttpRequest;s.open(n.type,t,n.sync);let a=n&&n.inflate;if(i.Z.debug("inflate:"+a),a&&(s.responseType="arraybuffer",i.Z.debug("二进制")),0==n.sync)return s.send(null),200===s.status?s.responseText:null;s.addEventListener("load",(t=>{let n=t.target.response;200===s.status?e&&e(n):0===s.status?(i.Z.warn("loadFile: HTTP Status 0 received."),e&&e(n)):_&&_(t)}),!1),s.addEventListener("error",(t=>{_&&_(t)}),!1),s.send(null)}static loadMaterialSourceDef(t,e){return n._get(t,null,"GET",{sync:!1})}static loadModel(t,e){}}},7997:(t,e,_)=>{_.d(e,{Z:()=>i});class i{constructor(t){this.object=t,this.listeners={}}removeA(t){let e,_,i=arguments,n=i.length;for(;n>1&&t.length;)for(e=i[--n];-1!==(_=t.indexOf(e));)t.splice(_,1);return t}isset(t){for(let t=0;t<arguments.length;t++)if(void 0===arguments[t]||null==arguments[t])return!1;return!0}isArray(t){return"[object Array]"===Object.prototype.toString.call(t)}register(t,e,_){"string"==typeof t&&"function"==typeof e&&(this.listeners[t]||(this.listeners[t]=new Array),this.listeners[t].push({object:this.isset(_)?_:this.object,callback:e}))}unregister(t,e,_){if("string"==typeof t&&"function"==typeof e&&(_=this.isset(_)?_:this.object,this.listeners[t]))for(let i=0;i<this.listeners[t].length;i++)if(this.listeners[t][i].object==_&&this.listeners[t][i].callback==e){this.listeners[t].splice(i,1);break}}trigger(t,e,_){if("string"!=typeof t)return!1;if(e=e||new Array,this.isset(e)?this.isArray(e)||(e=[e]):e=new Array,"mouse"==t.substring(0,5).toLowerCase()&&(e[0]=this.normalizeEvent(e[0])),!this.listeners[t]||0==this.listeners[t].length)return!0;let i=this.listeners[t].slice(0);for(let t=0;t<i.length;t++){let n=null;if(n=this.isset(_)?i[t].callback.apply(_,e):i[t].callback.apply(i[t].object,e),!1===n)return!1}return!0}normalizeEvent(t){return t}}},8803:(t,e,_)=>{_.d(e,{Z:()=>m});const i=console.log,n=console.info,s=console.warn,a=console.debug,r=console.error,o=console.time,h=console.timeEnd;class m{static S_DEBUG=0;static S_INFO=1;static S_WARN=2;static S_LOG=3;static S_ERROR=4;static S_TIME=5;static S_TIME_CALC=6;static debug(){}static log(){}static info(){}static warn(){}static error(){}static time(){}static timeEnd(){}static timeCalc(){}static enable(t,e){switch(t){case m.S_DEBUG:m.debug=e?a:()=>{};break;case m.S_INFO:m.info=e?n:()=>{};break;case m.S_LOG:m.log=e?i:()=>{};break;case m.S_WARN:m.warn=e?s:()=>{};break;case m.S_ERROR:m.error=e?r:()=>{};break;case m.S_TIME:m.time=e?o:()=>{},m.timeEnd=e?h:()=>{};break;case m.S_TIME_CALC:m.timeCalc=e?function(t){return t?(t.time=(new Date).getTime()-t.time,t):((t={}).time=(new Date).getTime(),t)}:()=>{}}}}m.enable(m.S_LOG,!0),m.enable(m.S_INFO,!0),m.enable(m.S_DEBUG,!0),m.enable(m.S_ERROR,!0),m.enable(m.S_WARN,!0),m.enable(m.S_TIME,!0)},5657:(t,e,_)=>{_.d(e,{Z:()=>r});var i=_(3792),n=_(1441),s=_(2860),a=_(9692);class r{static S_TEMP_VEC3=new i.Z;static S_TEMP_VEC3_2=new i.Z;static S_TEMP_VEC3_3=new i.Z;static S_TEMP_VEC3_4=new i.Z;static S_TEMP_VEC4=new a.Z;static S_TEMP_VEC4_2=new a.Z;static S_TEMP_VEC4_3=new a.Z;static S_TEMP_MAT4=new n.Z;static S_TEMP_MAT4_1=new n.Z;static S_TEMP_MAT4_2=new n.Z;static S_TEMP_MAT4_3=new n.Z;static S_LIGHT_DATA_4=new s.Z(48);static S_LIGHT_DATA=r.S_LIGHT_DATA_4;static S_LIGHT_DATA_8=new s.Z(96);static S_SH_COEFFS=new s.Z(27);constructor(){}static mallocLightData(t){r.S_LIGHT_DATA=new s.Z(3*t*4)}}},9881:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{Z:()=>Tools});var _Math3d_Bounding_BoundingVolume_js__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(8333),_Math3d_Vector3_js__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(3792),_Math3d_Vector2_js__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__(1082),_Log_js__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__(8803);const o={lz:function(t,e){if("number"!=typeof e||e<=0||"number"!=typeof t&&"string"!=typeof t)return t;for(t+="";t.length<e;)t="0"+t;return t},getHashCode:function(t){for(var e=0,_="string"==typeof t?t.length:0,i=0;i<_;)e=(e<<5)-e+t.charCodeAt(i++);return e<0?-1*e+4294967295:e},uniqueId:function(t,e){if(null==t||"string"!=typeof t){o.___uqidc?++o.___uqidc:o.___uqidc=0;var _=t=(new Date).getTime()+""+o.___uqidc}else _=o.getHashCode(t);return(e?"res:":"")+_.toString(32)+"-"+o.lz((4*t.length).toString(16),3)}},BS=[[0,1,0],[1,0,0],[0,0,1]];class Tools{static _s_Id=0;static isPowerOfTwo(t){return 0==(t&t-1)}static nextHighestPowerOfTwo(t){--t;for(let e=1;e<32;e<<=1)t|=t>>e;return t+1}static ensureImageSizePowerOfTwo(t,e){return Tools.isPowerOfTwo(t.width)&&Tools.isPowerOfTwo(t.height)||(e.width=Tools.nextHighestPowerOfTwo(t.width),e.height=Tools.nextHighestPowerOfTwo(t.height),e.getContext("2d").drawImage(t,0,0,t.width,t.height,0,0,e.width,e.height),t=e),t}static checkIsNull(t){return null!=t&&null!=t}static nextId(){return Tools.uniqueId(--Tools._s_Id+"R3D")}static insertLine(t,e,_){let i=(t=Tools.trim(t)).split("\n"),n="";for(let t=0;t<i.length;t++)t==_&&(n+=e+"\n"),n+=i[t]+"\n";return n}static uniqueId(t){return o.uniqueId(t)}static getTagPattern(str){return eval("/"+str+"/g")}static getPattern(str){return eval("/"+str+"/")}static trim(t){return t.replace(/(^\s*)|(\s*$)/g,"")}static find(t,e){return-1!=t.search(e)}static find2(t,e){return t.search(e)}static repSrc(t,e,_,i){return-1!=t.search(e)?t.replace(_,i):t}static approxScreenArea(t,e,_){return t.getType()==_Math3d_Bounding_BoundingVolume_js__WEBPACK_IMPORTED_MODULE_0__.Z.S_TYPE_AABB?(t.getXHalf()*t.getXHalf()+t.getYHalf()*t.getYHalf()+t.getZHalf()*t.getZHalf())*_*_/(e*e*4)*Math.PI:(t.getType(),_Math3d_Bounding_BoundingVolume_js__WEBPACK_IMPORTED_MODULE_0__.Z.S_TYPE_SPHERE,0)}static generatorTangents2(t,e,_,i){let n=e.length/3,s=new Float32Array(4*n),a=[],r=[];for(let t=0;t<n;t++)a[t]=new _Math3d_Vector3_js__WEBPACK_IMPORTED_MODULE_1__.Z,r[t]=new _Math3d_Vector3_js__WEBPACK_IMPORTED_MODULE_1__.Z;let o=new _Math3d_Vector3_js__WEBPACK_IMPORTED_MODULE_1__.Z,h=new _Math3d_Vector3_js__WEBPACK_IMPORTED_MODULE_1__.Z,m=new _Math3d_Vector3_js__WEBPACK_IMPORTED_MODULE_1__.Z,l=new _Math3d_Vector2_js__WEBPACK_IMPORTED_MODULE_3__.Z,u=new _Math3d_Vector2_js__WEBPACK_IMPORTED_MODULE_3__.Z,f=new _Math3d_Vector2_js__WEBPACK_IMPORTED_MODULE_3__.Z,c=new _Math3d_Vector3_js__WEBPACK_IMPORTED_MODULE_1__.Z,g=new _Math3d_Vector3_js__WEBPACK_IMPORTED_MODULE_1__.Z,d=(t,i,n)=>{o.setToInXYZ(e[3*t],e[3*t+1],e[3*t+2]),h.setToInXYZ(e[3*i],e[3*i+1],e[3*i+2]),m.setToInXYZ(e[3*n],e[3*n+1],e[3*n+2]),l.setToInXY(_[2*t],_[2*t+1]),u.setToInXY(_[2*i],_[2*i+1]),f.setToInXY(_[2*n],_[2*n+1]),h.sub(o),m.sub(o),u.sub(l),f.sub(l);let s=1/(u._m_X*f._m_Y-f._m_X*u._m_Y);isFinite(s)&&(c.setTo(h),c.multLength(f._m_Y),c.addInXYZ(m._m_X*-u._m_Y,m._m_Y*-u._m_Y,m._m_Z*-u._m_Y),c.multLength(s),g.setTo(m),g.multLength(u._m_X),g.addInXYZ(h._m_X*-f._m_X,h._m_Y*-f._m_X,h._m_Z*-f._m_X),g.multLength(s),a[t].add(c),a[i].add(c),a[n].add(c),r[t].add(g),r[i].add(g),r[n].add(g))};for(let e=0;e<t.length;e+=3)d(t[e+0],t[e+1],t[e+2]);let S,p,C,T=new _Math3d_Vector3_js__WEBPACK_IMPORTED_MODULE_1__.Z,E=new _Math3d_Vector3_js__WEBPACK_IMPORTED_MODULE_1__.Z,D=new _Math3d_Vector3_js__WEBPACK_IMPORTED_MODULE_1__.Z,P=new _Math3d_Vector3_js__WEBPACK_IMPORTED_MODULE_1__.Z,M=t=>{D.setToInXYZ(i[3*t],i[3*t+1],i[3*t+2]),P.setTo(D),p=a[t],T.setTo(p),T.sub(D.multLength(D.dot(p))).normal(),P.cross(p,E),C=E.dot(r[t]),S=C<0?-1:1,s[4*t]=T._m_X,s[4*t+1]=T._m_Y,s[4*t+2]=T._m_Z,s[4*t+3]=S};for(let e=0;e<t.length;e+=3)M(t[e+0]),M(t[e+1]),M(t[e+2]);return s}static generatorFillTangents2(t){let e=t.length/3*4,_=[];for(let t=0;t<e;t++)_[t]=0;return _}static generatorFillTangents(t){let e=[];for(let _=0;_<t.length;_++)e[_]=t[_];return e}static generatorTangents(t,e,_){let i=new _Math3d_Vector3_js__WEBPACK_IMPORTED_MODULE_1__.Z,n=new _Math3d_Vector3_js__WEBPACK_IMPORTED_MODULE_1__.Z,s=new Array(4).fill(0),a=0,r=0,o=0,h=0,m=[],l={},u=new _Math3d_Vector3_js__WEBPACK_IMPORTED_MODULE_1__.Z,f=new _Math3d_Vector3_js__WEBPACK_IMPORTED_MODULE_1__.Z,c=new _Math3d_Vector3_js__WEBPACK_IMPORTED_MODULE_1__.Z,g=new _Math3d_Vector2_js__WEBPACK_IMPORTED_MODULE_3__.Z,d=new _Math3d_Vector2_js__WEBPACK_IMPORTED_MODULE_3__.Z,S=new _Math3d_Vector2_js__WEBPACK_IMPORTED_MODULE_3__.Z,p=new _Math3d_Vector2_js__WEBPACK_IMPORTED_MODULE_3__.Z,C=0,T=0,E=0,D=0;for(let a=0;a<t.length;a+=3){u.setToInXYZ(e[3*t[a]],e[3*t[a]+1],e[3*t[a]+2]),f.setToInXYZ(e[3*t[a+1]],e[3*t[a+1]+1],e[3*t[a+1]+2]),c.setToInXYZ(e[3*t[a+2]],e[3*t[a+2]+1],e[3*t[a+2]+2]),g.setToInXY(_[2*t[a]],_[2*t[a]+1]),d.setToInXY(_[2*t[a+1]],_[2*t[a+1]+1]),S.setToInXY(_[2*t[a+2]],_[2*t[a+2]+1]),f.sub(u,i),c.sub(u,n),d.sub(g,p),C=p._m_X,T=p._m_Y,S.sub(g,p),E=p._m_X,D=p._m_Y,Tools._generatorDietaryUVMat(C,T,E,D,s),r=s[0]*i._m_X+s[1]*n._m_X,o=s[0]*i._m_Y+s[1]*n._m_Y,h=s[0]*i._m_Z+s[1]*n._m_Z;let m=r*r+o*o+h*h;m=1/Math.sqrt(m),r*=m,o*=m,h*=m,Tools._generatorWeightedTangent(t[a],t[a+1],t[a+2],r,o,h,l)}Tools._normalizedTangents(l);for(let t in l)m[a++]=l[t][0],m[a++]=l[t][1],m[a++]=l[t][2];return m}static _normalizedTangents(t){let e=[],_=0;for(let i in t)e[0]=t[i][0],e[1]=t[i][1],e[2]=t[i][2],_=e[0]*e[0]+e[1]*e[1]+e[2]*e[2],_>0?(_=Math.sqrt(1*_),e[0]/=_,e[1]/=_,e[2]/=_):e[0]=e[1]=e[2]=0,t[i][0]=e[0],t[i][1]=e[1],t[i][2]=e[2]}static _generatorWeightedTangent(t,e,_,i,n,s,a){Tools.checkIsNull(a[t])?a[t]=[.5*(i+a[t][0]),.5*(n+a[t][1]),.5*(s+a[t][2])]:a[t]=[i,n,s],Tools.checkIsNull(a[e])?a[e]=[.5*(i+a[e][0]),.5*(n+a[e][1]),.5*(s+a[e][2])]:a[e]=[i,n,s],Tools.checkIsNull(a[_])?a[_]=[.5*(i+a[_][0]),.5*(n+a[_][1]),.5*(s+a[_][2])]:a[_]=[i,n,s]}static _generatorDietaryUVMat(t,e,_,i,n){let s=1/(t*i-_*e);return n[0]=i*s,n[1]=-e*s,n[2]=-_*s,n[3]=t*s,n}static generatorBaryCentrics(t,e){let _,i,n,s={},a=[],r=null,o=0;for(let t=0;t<e.length;t+=3)a.length=0,_=e[t],i=e[t+1],n=e[t+2],s[_]&&a.push(s[_]),s[i]&&a.push(s[i]),s[n]&&a.push(s[n]),r=Tools._nextBarycentrics(a),r&&(o=0,s[_]||(s[_]=r[o++]),s[i]||(s[i]=r[o++]),s[n]||(s[n]=r[o++]));let h=new Array(t.length).fill(0);for(let t in s)h[3*t]=s[t][0],h[3*t+1]=s[t][1],h[3*t+2]=s[t][2];return h}static _nextBarycentrics(t){if(3==t.length)return t[0][0]==t[1][0]&&t[0][1]==t[1][1]&&t[0][2]==t[1][2]?t[0]=[0,0,0]:t[1][0]==t[2][0]&&t[1][1]==t[2][1]&&t[1][2]==t[2][2]?t[1]=[0,0,0]:t[2][0]==t[0][0]&&t[2][1]==t[0][1]&&t[2][2]==t[0][2]&&(t[2]=[0,0,0]),null;if(0==t.length)return[[0,1,0],[1,0,0],[0,0,1]];{let e=[!0,!0,!0],_=[];2==t.length&&t[0][0]==t[1][0]&&t[0][1]==t[1][1]&&t[0][2]==t[1][2]&&(t[0]=[0,0,0]),t.forEach((t=>{t[0]==BS[1][0]&&t[1]==BS[1][1]&&t[2]==BS[1][2]?e[1]=!1:t[0]==BS[2][0]&&t[1]==BS[2][1]&&t[2]==BS[2][2]?e[2]=!1:t[0]==BS[0][0]&&t[1]==BS[0][1]&&t[2]==BS[0][2]&&(e[0]=!1)}));for(let t=0;t<3;t++)e[t]&&_.push(BS[t]);return _}}}},8274:(t,e,_)=>{_.d(e,{Z:()=>i});class i{static setBufLocal(t,e,_,i,n,s,a,r){t.bindBuffer(_,e),t.vertexAttribPointer(i,n,s,!1,a,r),t.enableVertexAttribArray(i),t.bindBuffer(_,null)}static setVertexBuf(t,e,_,i,n,s,a,r,o,h){t.bindVertexArray(e);let m=t.createBuffer();return t.bindBuffer(_,m),t.bufferData(_,i,n),t.vertexAttribPointer(s,a,r,!1,o,h),t.enableVertexAttribArray(s),t.bindBuffer(_,null),t.bindVertexArray(null),m}static setIndicesBuf(t,e,_,i,n){t.bindVertexArray(e);let s=t.createBuffer();return t.bindBuffer(_,s),t.bufferData(_,i,n),t.bindVertexArray(null),t.bindBuffer(_,null),s}}},8239:(t,e,_)=>{_.d(e,{l:()=>i});class i{constructor(t,e,_,i,n){this._m_Name=t,this._m_Loc=e||null,this._m_Width=_||0,this._m_Height=i||0,this._m_Format=n}setName(t){this._m_Name=t}getName(){return this._m_Name}setLoc(t){this._m_Loc=t}getLoc(){return this._m_Loc}setWidth(t){this._m_Width=t}getWidth(){return this._m_Width}setHeight(t){this._m_Height=t}getHeight(){return this._m_Height}setFormat(t){this._m_Format=t}getFormat(){return this._m_Format}}},533:(t,e,_)=>{_.d(e,{Z:()=>r});var i=_(8239),n=_(1135),s=(_(4963),_(3448)),a=_(8803);class r{constructor(t,e,_,i){this._m_Name=e,this._m_Framebuffer=t.createFramebuffer(),this._m_Textures=[],this._m_NameTextures={},this._m_MapTextures={},this._m_Buffers=[],this._m_MapBuffers={},this._m_DrawBuffers=[],this._m_Width=_,this._m_Height=i,this._m_RelativeWidth=1,this._m_RelativeHeight=1,this._m_RData={},this._m_FramePicture=null,this._m_FixedSize=!1,this._m_RelativeSize=!1}getWidth(){return this._m_Width}getHeight(){return this._m_Height}setRelativeSize(t){this._m_RelativeSize=t}setRelativeWidthHeight(t,e){this._m_RelativeWidth=t,this._m_RelativeHeight=e}isRelativeSize(){return this._m_RelativeSize}setFixedSize(t){this._m_FixedSize=t}isFixedSize(){return this._m_FixedSize}readPixels(t,e,_,i,n,s,a,r){n=n||0,s=s||0,a=a||this._m_Width,r=r||this._m_Height;let o=-1,h=null;switch(_){case t.RGBA16F:h=Float32Array,o=4;break;case t.RGBA8:case t.RGBA:h=i!=t.FLOAT?Uint8Array:Float32Array,o=4;break;case t.RGB16F:h=Float32Array,o=3;break;case t.RGB8:case t.RGB:h=i!=t.FLOAT?Uint8Array:Float32Array,o=3}t.getParameter(t.IMPLEMENTATION_COLOR_READ_FORMAT),t.getParameter(t.IMPLEMENTATION_COLOR_READ_TYPE);let m=new h(a*r*o);return t.readPixels(n,s,a,r,_,i,m),m}getFramePicture(){return this._m_FramePicture}getFrameBuffer(){return this._m_Framebuffer}use(t){let e=t.getFrameContext();if(e.m_LastFrameBuffer!=this._m_Framebuffer){let _=t._m_Scene.getCanvas().getGLContext();_.bindFramebuffer(_.FRAMEBUFFER,this._m_Framebuffer),e.m_LastFrameBuffer=this._m_Framebuffer}}clear(t){t.clear(t.COLOR_BUFFER_BIT|t.DEPTH_BUFFER_BIT)}addBuffer(t,e,_,n){t.bindFramebuffer(t.FRAMEBUFFER,this._m_Framebuffer);let s=null;s=t.createRenderbuffer(),t.bindRenderbuffer(t.RENDERBUFFER,s);let a=new i.l(e,s,this._m_Width,this._m_Height,_);t.renderbufferStorage(t.RENDERBUFFER,_,this._m_Width,this._m_Height),t.framebufferRenderbuffer(t.FRAMEBUFFER,n,t.RENDERBUFFER,s),this._m_MapBuffers[n]=a,this._m_Buffers.push(a),t.bindFramebuffer(t.FRAMEBUFFER,null),t.bindRenderbuffer(t.RENDERBUFFER,null),this._rData("buffer",{name:e,format:_,attachId:n})}_rData(t,e){this._m_RData[t]||(this._m_RData[t]={keys:{},values:[]}),this._m_RData[t].keys[e.name]||(this._m_RData[t].keys[e.name]=!0,this._m_RData[t].values.push(e))}getBuffers(){return this._m_Buffers}setMipMap(t,e,_,i){t.framebufferTexture2D(t.FRAMEBUFFER,_,t.TEXTURE_2D,this._m_NameTextures[e].getLoc(),i)}addTexture(t,e,_,i,s,a,r,o,h){t.bindFramebuffer(t.FRAMEBUFFER,this._m_Framebuffer);let m=t.createTexture(),l=new n.Z(e,m,_,this._m_Width,this._m_Height,i,s,a,null);t.bindTexture(t.TEXTURE_2D,m),t.texImage2D(t.TEXTURE_2D,0,_,this._m_Width,this._m_Height,0,s,a,null),h?(t.generateMipmap(t.TEXTURE_2D),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_MIN_FILTER,t.LINEAR_MIPMAP_NEAREST),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_MAG_FILTER,t.LINEAR)):(t.texParameteri(t.TEXTURE_2D,t.TEXTURE_MIN_FILTER,t.NEAREST),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_MAG_FILTER,t.NEAREST)),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_WRAP_S,t.CLAMP_TO_EDGE),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_WRAP_T,t.CLAMP_TO_EDGE),t.framebufferTexture2D(t.FRAMEBUFFER,r,t.TEXTURE_2D,m,0),this._m_MapTextures[r]=l,this._m_Textures.push(l),this._m_NameTextures[e]=l,o&&this._m_DrawBuffers.push(r),t.bindFramebuffer(t.FRAMEBUFFER,null),t.bindTexture(t.TEXTURE_2D,null),this._rData("texture",{name:e,internalformat:_,border:i,format:s,type:a,attachId:r,toDrawBuffer:o,genMipmap:h})}getTextures(){return this._m_Textures}getTexture(t){return this._m_NameTextures[t]}resize(t,e,_){if(!this._m_FixedSize&&(this._m_RelativeSize&&(e*=this._m_RelativeWidth,_*=this._m_RelativeHeight),this._m_Width!=e||this._m_Height!=_)){this._m_Width=e,this._m_Height=_,t.deleteFramebuffer(this._m_Framebuffer),this._m_Framebuffer=t.createFramebuffer(),this._m_Textures=[],this._m_NameTextures={},this._m_MapTextures={},this._m_Buffers=[],this._m_MapBuffers={},this._m_DrawBuffers=[];let i=null;for(let e in this._m_RData)i=this._m_RData[e].values,"buffer"==e?i.forEach((e=>{this.addBuffer(t,e.name,e.format,e.attachId)})):"texture"==e&&i.forEach((e=>{this.addTexture(t,e.name,e.internalformat,e.border,e.format,e.type,e.attachId,e.toDrawBuffer,e.genMipmap)}));this.finish(t)}}finish(t,e,_){switch(t.bindFramebuffer(t.FRAMEBUFFER,this._m_Framebuffer),this._m_DrawBuffers.length>0&&t.drawBuffers(this._m_DrawBuffers),t.isFramebuffer(this._m_Framebuffer)||a.Z.error("[["+this._m_Name+"]]无效frameBuffer!"),t.checkFramebufferStatus(t.FRAMEBUFFER)){case t.FRAMEBUFFER_COMPLETE:a.Z.log("[["+this._m_Name+"]]帧缓冲区已准备好显示。");break;case t.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:a.Z.error("[["+this._m_Name+"]]附件类型不匹配或不是所有的帧缓冲附件点都已完成。");break;case t.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:a.Z.error("[["+this._m_Name+"]]没有附件。");break;case t.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:a.Z.error("[["+this._m_Name+"]]附件的高度和宽度不同。");break;case t.FRAMEBUFFER_UNSUPPORTED:a.Z.error("[["+this._m_Name+"]]不支持附件的格式，或者深度和模板附件的渲染缓冲区不同。")}t.bindFramebuffer(t.FRAMEBUFFER,null),_&&(this._m_FramePicture=new s.Z(e,{id:this._m_Name+"_picture"}))}}},9870:(t,e,_)=>{_.d(e,{Z:()=>n});var i=_(3286);class n{constructor(){this.m_LastMaterial=null,this.m_LastIDrawable=null,this.m_LastSubShader=null,this.m_LastSubShaderId=null,this.m_LastFrameBuffer=null,this.m_LastWidth=0,this.m_LastHeight=0,this.m_SM=0,this.m_SS=0,this._m_BatchLightLastIndex=0,this._m_DefaultFrameBuffer=null,this.m_Contexts={},this.m_CalcContexts={},this.m_RenderState=new i.Z(!0),this.m_FrameBuffers={},this.m_Shaders={},this._m_ContextBlocks={}}getBatchLightLastIndex(){return this._m_BatchLightLastIndex}set BatchLightLastIndex(t){this._m_BatchLightLastIndex=t}resize(t,e,_){for(let i in this.m_FrameBuffers)this.m_FrameBuffers[i].resize(t,e,_)}getContextBlock(t){return this._m_ContextBlocks[t]}addContextBlock(t,e){this._m_ContextBlocks[t]=e}getFrameBuffer(t){return this.m_FrameBuffers[t]}addFrameBuffer(t,e){this.m_FrameBuffers[t]=e}getRenderState(){return this.m_RenderState}addContext(t){this.m_Contexts[t]=!0}getContext(t){return this.m_Contexts[t]}getCalcContexts(){return this.m_CalcContexts}getCalcContext(t){return this.m_CalcContexts[t]}setCalcContext(t,e){this.m_CalcContexts[t]=e}reset(){this._m_BatchLightLastIndex=0,this.m_LastMaterial=null,this.m_LastSubShader=null,this.m_LastSubShaderId=null,this.m_LastFrameBuffer=null,this.m_SM=0,this.m_SS=0}}},1331:(t,e,_)=>{_.d(e,{Z:()=>r});var i=_(8274),n=_(9085),s=_(8803),a=_(3250);class r{static S_BARYCENTRICS="barycentrics";static S_POSITIONS="positions";static S_COLORS="colors";static S_NORMALS="normals";static S_INDICES="indices";static S_INDICES_32="indices32";static S_TANGENTS="tangents";static S_UV0="uv0";static S_UV1="uv1";static S_UV2="uv2";static S_UV3="uv3";static S_JOINTS_0="joints_0";static S_JOINTS_0_32="joints_0";static S_WEIGHTS_0="weights_0";static S_DATAS={barycentrics:"barycentrics",positions:"positions",colors:"colors",normals:"normals",indices:"indices",indices32:"indices",tangents:"tangents",uv0:"uv0",uv1:"uv1",uv2:"uv2",uv3:"uv3",joints_0:"joints_0",weights_0:"weights_0"};static S_PRIMITIVE_TRIANGLES="triangles";static S_PRIMITIVE_LINES="lines";constructor(){this._m_Datas={},this._m_Bufs={},this._m_VAO=null,this._m_GL=null,this._m_ElementCount=0,this._m_Primitive=r.S_PRIMITIVE_TRIANGLES,this._m_DrawPrimitive=null,this._m_DrawType=null,this._m_DrawTypeFlag=a.Z.S_UNSIGNED_SHORT,this._m_CurrentLod=0,this._m_DrawLod=0,this._m_LodLevels={},this._m_LodLevelCount=0}setPrimitive(t){if(this._m_Primitive=t,this._m_GL)switch(this._m_Primitive){case r.S_PRIMITIVE_TRIANGLES:this._m_DrawPrimitive=this._m_GL.TRIANGLES;break;case r.S_PRIMITIVE_LINES:this._m_DrawPrimitive=this._m_GL.LINES}}getPrimitive(){return this._m_Primitive}_checkDataType(t){return!!r.S_DATAS[t]||(console.error("type is undefined:"+t),!1)}setData(t,e,_){this._checkDataType(t)&&_&&null!=_.level?(this._m_Datas[t]||(this._m_Datas[t]={lod:!0,datas:[],count:0}),this._m_Datas[t].count+=e.length,this._m_Datas[t].datas.push({data:e,level:_.level,count:e.length})):this._m_Datas[t]=e}getData(t){return this._m_Datas[t]}_refreshBufLocal(t,e){let _=null;e.forEach((t=>{_=this._m_Bufs[t.name]}))}_updateBound(t){if(this._m_GL=t,this._m_Datas){this._m_VAO||(this._m_VAO=t.createVertexArray());for(let e in this._m_Datas)switch(e){case r.S_BARYCENTRICS:i.Z.setVertexBuf(t,this._m_VAO,t.ARRAY_BUFFER,new Float32Array(this._m_Datas[e]),t.STATIC_DRAW,n.Z.S_BARYCENTRIC,3,t.FLOAT,0,0);break;case r.S_POSITIONS:i.Z.setVertexBuf(t,this._m_VAO,t.ARRAY_BUFFER,new Float32Array(this._m_Datas[e]),t.STATIC_DRAW,n.Z.S_POSITION,3,t.FLOAT,0,0);break;case r.S_COLORS:i.Z.setVertexBuf(t,this._m_VAO,t.ARRAY_BUFFER,new Float32Array(this._m_Datas[e]),t.STATIC_DRAW,n.Z.S_COLOR,4,t.FLOAT,0,0);break;case r.S_NORMALS:i.Z.setVertexBuf(t,this._m_VAO,t.ARRAY_BUFFER,new Float32Array(this._m_Datas[e]),t.STATIC_DRAW,n.Z.S_NORMAL,3,t.FLOAT,0,0);break;case r.S_TANGENTS:i.Z.setVertexBuf(t,this._m_VAO,t.ARRAY_BUFFER,new Float32Array(this._m_Datas[e]),t.STATIC_DRAW,n.Z.S_TANGENT,4,t.FLOAT,0,0);break;case r.S_INDICES:if(this._m_DrawType=t.UNSIGNED_SHORT,this._m_DrawTypeFlag=a.Z.S_UNSIGNED_SHORT,this._m_Datas[e].lod){let _=this._m_Datas[e].datas,n=new Uint16Array(this._m_Datas[e].count),s=0,a=0;for(let t=0,e=0;t<_.length;t++){this._m_LodLevels[_[t].level]={lod:e,count:_[t].count},this._m_LodLevelCount++;for(let i=0,r=0==a?0:a+1;i<_[t].data.length;i++)n[e++]=_[t].data[i],s=Math.max(_[t].data[i]+r,s);a=s,s=0}this._m_CurrentLod=-1,this.lod(0),i.Z.setIndicesBuf(t,this._m_VAO,t.ELEMENT_ARRAY_BUFFER,n,t.STATIC_DRAW)}else this._m_ElementCount=this._m_Datas[e].length,i.Z.setIndicesBuf(t,this._m_VAO,t.ELEMENT_ARRAY_BUFFER,new Uint16Array(this._m_Datas[e]),t.STATIC_DRAW);break;case r.S_INDICES_32:if(this._m_DrawType=t.UNSIGNED_INT,this._m_DrawTypeFlag=a.Z.S_INT,this._m_Datas[e].lod){let _=this._m_Datas[e].datas,n=new Uint32Array(this._m_Datas[e].count),s=0,a=0;for(let t=0,e=0;t<_.length;t++){this._m_LodLevels[_[t].level]={lod:e,count:_[t].count},this._m_LodLevelCount++;for(let i=0,r=0==a?0:a+1;i<_[t].data.length;i++)n[e++]=_[t].data[i],s=Math.max(_[t].data[i]+r,s);a=s,s=0}this._m_CurrentLod=-1,this.lod(0),i.Z.setIndicesBuf(t,this._m_VAO,t.ELEMENT_ARRAY_BUFFER,n,t.STATIC_DRAW)}else this._m_ElementCount=this._m_Datas[e].length,i.Z.setIndicesBuf(t,this._m_VAO,t.ELEMENT_ARRAY_BUFFER,new Uint32Array(this._m_Datas[e]),t.STATIC_DRAW);break;case r.S_UV0:i.Z.setVertexBuf(t,this._m_VAO,t.ARRAY_BUFFER,new Float32Array(this._m_Datas[e]),t.STATIC_DRAW,n.Z.S_UV0,2,t.FLOAT,0,0);break;case r.S_UV1:i.Z.setVertexBuf(t,this._m_VAO,t.ARRAY_BUFFER,new Float32Array(this._m_Datas[e]),t.STATIC_DRAW,n.Z.S_UV1,2,t.FLOAT,0,0);break;case r.S_UV2:i.Z.setVertexBuf(t,this._m_VAO,t.ARRAY_BUFFER,new Float32Array(this._m_Datas[e]),t.STATIC_DRAW,n.Z.S_UV2,2,t.FLOAT,0,0);break;case r.S_UV3:i.Z.setVertexBuf(t,this._m_VAO,t.ARRAY_BUFFER,new Float32Array(this._m_Datas[e]),t.STATIC_DRAW,n.Z.S_UV3,2,t.FLOAT,0,0);break;case r.S_JOINTS_0:i.Z.setVertexBuf(t,this._m_VAO,t.ARRAY_BUFFER,new Uint16Array(this._m_Datas[e]),t.STATIC_DRAW,n.Z.S_JOINT_0,4,t.UNSIGNED_SHORT,0,0);break;case r.S_JOINTS_0_32:i.Z.setVertexBuf(t,this._m_VAO,t.ARRAY_BUFFER,new Uint32Array(this._m_Datas[e]),t.STATIC_DRAW,n.Z.S_JOINT_0,4,t.UNSIGNED_INT,0,0);break;case r.S_WEIGHTS_0:i.Z.setVertexBuf(t,this._m_VAO,t.ARRAY_BUFFER,new Float32Array(this._m_Datas[e]),t.STATIC_DRAW,n.Z.S_WEIGHT_0,4,t.FLOAT,0,0)}switch(this._m_Primitive){case r.S_PRIMITIVE_TRIANGLES:this._m_DrawPrimitive=this._m_GL.TRIANGLES;break;case r.S_PRIMITIVE_LINES:this._m_DrawPrimitive=this._m_GL.LINES}}}draw(t){t.bindVertexArray(this._m_VAO),t.drawElements(this._m_DrawPrimitive,this._m_ElementCount,this._m_DrawType,this._m_DrawLod)}lod(t){this._m_CurrentLod!=t&&(null!=this._m_LodLevels[t]?(this._m_CurrentLod=t,this._m_ElementCount=this._m_LodLevels[this._m_CurrentLod].count,this._m_DrawLod=this._m_LodLevels[this._m_CurrentLod].lod*a.Z.sizeof(this._m_DrawTypeFlag)):s.Z.error("lod level "+t+"对于当前Mesh无效!"))}getLodLevelCount(){return this._m_LodLevelCount}getLodPrimitiveCount(t){if(null!=this._m_LodLevels[t]){let e=this._m_LodLevels[t].count;switch(this._m_Primitive){case r.S_PRIMITIVE_TRIANGLES:return e/3;case r.S_PRIMITIVE_LINES:return e/2}}else s.Z.error("lod level "+t+"对于当前Mesh无效!");return 0}}},3286:(t,e,_)=>{_.d(e,{Z:()=>i});class i{static S_FACE_CULL_OFF="Off";static S_FACE_CULL_BACK="Back";static S_FACE_CULL_FRONT="Front";static S_FACE_CULL_FRONT_AND_BACK="FrontAndBack";static S_STATES=["FaceCull","DepthWrite","ColorWrite","DepthTest","Blend","BlendFactor","ScissorTest","PolygonOffsetFill","PolygonOffset"];constructor(t){this._m_State={},this._m_StoreState={_state:{},getState:function(){return this._state}},this._m_ResetState={_state:{},getState:function(){return this._state}},t&&this._init()}getState(){return this._m_State}getFlag(t){return this._m_State[t]}setFlag(t,e){this._m_State[t]=e}store(){for(let t in this._m_State)this._m_StoreState._state[t]=this._m_State[t]}restore(){return this._m_StoreState}_init(){this._m_State[i.S_STATES[0]]=i.S_FACE_CULL_BACK,this._m_State[i.S_STATES[1]]="On",this._m_State[i.S_STATES[2]]="On",this._m_State[i.S_STATES[3]]="On",this._m_State[i.S_STATES[4]]="Off",this._m_State[i.S_STATES[6]]="Off",this._m_State[i.S_STATES[7]]="Off",this._m_ResetState._state[i.S_STATES[0]]=i.S_FACE_CULL_BACK,this._m_ResetState._state[i.S_STATES[1]]="On",this._m_ResetState._state[i.S_STATES[2]]="On",this._m_ResetState._state[i.S_STATES[3]]="On",this._m_ResetState._state[i.S_STATES[4]]="Off",this._m_ResetState._state[i.S_STATES[6]]="Off",this._m_ResetState._state[i.S_STATES[7]]="Off"}reset(){return this._m_ResetState}}},3003:(t,e,_)=>{_.d(e,{Z:()=>i});class i{static S_TYPE={float:"float",mat4:"mat4"};static S_GLOBALS_MAT="layout (std140) uniform S_GLOBALS_MAT\n{\nmat4 Globals_ViewMatrix;\nmat4 Globals_ProjectMatrix;\nmat4 Globals_ViewProjectMatrix;\n};\n";static S_GLOBALS_PARAMS={viewMatrix:"Globals_ViewProjectMatrix",projectMatrix:"Globals_ProjectMatrix",viewProjectMatrix:"Globals_ViewProjectMatrix"};constructor(t,e,_){this._m_GL=t,this._m_Shader=t.createShader(e),t.shaderSource(this._m_Shader,_),t.compileShader(this._m_Shader),this.compile=t.getShaderParameter(this._m_Shader,t.COMPILE_STATUS),this.compile||(this.error=t.getShaderInfoLog(this._m_Shader),console.log("编译["+(e==t.VERTEX_SHADER?"vertex_shader":e==t.FRAGMENT_SHADER?"fragment_shader":"unknow_shader")+"]失败!原因:\n"+this.error))}getShader(){return this._m_Shader}deleteShader(){this._m_GL.deleteShader(this._m_Shader),this._m_Shader=null}}},8005:(t,e,_)=>{_.d(e,{Z:()=>a});var i=_(9085),n=_(3003),s=_(9881);class a{constructor(t,e,_,n,s){this._m_DefId=e,this._m_vs_s=_.get(i.Z.VERTEX_SHADER),this._m_fs_s=_.get(i.Z.FRAGMENT_SHADER),this._m_vsDefines=n?n[i.Z.VERTEX_SHADER]:null,this._m_fsDefines=n?n[i.Z.FRAGMENT_SHADER]:null,this._m_Hold=0,this._m_Holds={},s?this._m_needCompile=!0:this._compile(t)}canDestroy(){return this._m_Hold<=0}destroy(t,e){this._m_Program&&(t.deleteProgram(this._m_Program),e.m_Shaders[this._m_DefId]=null,this._m_Program=null)}addHold(t){this._m_Hold++,this._m_Holds[t._m_ObjId]=t}deleteHold(t){this._m_Hold--,this._m_Holds[t._m_ObjId]=null}needCompile(){return this._m_needCompile}_compile(t){if(this._m_needCompile=!1,this._m_vs_s&&(this._m_vsDefines&&(this._m_vs_s=s.Z.insertLine(this._m_vs_s,this._m_vsDefines,1)),this._m_vs=new n.Z(t,t.VERTEX_SHADER,this._m_vs_s)),this._m_fs_s&&(this._m_fsDefines&&(this._m_fs_s=s.Z.insertLine(this._m_fs_s,this._m_fsDefines,1)),this._m_fs=new n.Z(t,t.FRAGMENT_SHADER,this._m_fs_s)),this._m_Program=null,this._m_vs&&this._m_fs)if(this._m_vs.compile&&this._m_fs.compile){if(this._m_Program=t.createProgram(),t.attachShader(this._m_Program,this._m_vs.getShader()),t.attachShader(this._m_Program,this._m_fs.getShader()),t.linkProgram(this._m_Program),!t.getProgramParameter(this._m_Program,t.LINK_STATUS)){let e=t.getProgramInfoLog(this._m_Program);console.error("[["+name+"]]链接ShaderProgram异常:"+e),console.log("vs:\n"+this._m_vs_s),console.log("fs:\n"+this._m_fs_s)}this._m_vs.deleteShader(),this._m_fs.deleteShader()}else console.error("[["+name+"]]无法创建着色器程序,vs或fs编译失败!!"),console.log("vs:\n"+this._m_vs_s),console.log("fs:\n"+this._m_fs_s)}use(t){t.useProgram(this._m_Program)}getProgram(){return this._m_Program}}},9085:(t,e,_)=>{_.d(e,{Z:()=>i});class i{static VERTEX_SHADER="vertex_shader";static FRAGMENT_SHADER="fragment_shader";static SOURCE_ENUM={vertex_shader:"vertex_shader",fragment_shader:"fragment_shader"};static S_BARYCENTRIC=0;static S_POSITION=1;static S_COLOR=2;static S_NORMAL=3;static S_TANGENT=4;static S_UV0=5;static S_UV1=6;static S_UV2=7;static S_UV3=8;static S_JOINT_0=9;static S_WEIGHT_0=10;static S_MODEL_MATRIX=17;static S_VIEW_MATRIX=18;static S_PROJECT_MATRIX=19;static S_MVP=20;static S_MV=21;static S_VP=22;static S_NDP=23;static S_G_BUFFER0=0;static S_G_BUFFER1=1;static S_G_BUFFER2=2;static S_G_DEPTH=3;static S_BARYCENTRIC_SRC="_barycentric";static S_POSITION_SRC="_position";static S_COLOR_SRC="_color";static S_NORMAL_SRC="_normal";static S_TANGENT_SRC="_tangent";static S_UV0_SRC="_uv0";static S_UV1_SRC="_uv1";static S_UV2_SRC="_uv2";static S_UV3_SRC="_uv3";static S_JOINT_0_SRC="_joint_0";static S_WEIGHT_0_SRC="_weight_0";static S_JOINTS_SRC="_joints";static S_OUT_COLOR="_outColor";static S_OUT_POSITION="gl_Position";static S_MODEL_MATRIX_SRC="_model_matrix";static S_VIEW_MATRIX_SRC="_view_matrix";static S_PROJECT_MATRIX_SRC="_project_matrix";static S_MVP_SRC="_model_view_project_matrix";static S_MV_SRC="_model_view_matrix";static S_VP_SRC="_view_project_matrix";static S_NDP="";static S_UNIQUE_SHADING_SRC="_uniqueShading";static S_V_LIGHT_DATA_SRC="_vLightData";static S_W_LIGHT_DATA_SRC="_wLightData";static S_MULTI_ID_SRC="_multiId";static S_BLEND_GI_PROBES="_blend_gi_probes";static S_V_LIGHT_DATA0_SRC="_vLight_Data_0";static S_V_LIGHT_DATA1_SRC="_vLight_Data_1";static S_V_LIGHT_DATA2_SRC="_vLight_Data_2";static S_W_LIGHT_DATA0_SRC="_wLight_Data_0";static S_W_LIGHT_DATA1_SRC="_wLight_Data_1";static S_W_LIGHT_DATA2_SRC="_wLight_Data_2";static S_AMBIENT_LIGHT_COLOR="_ambientLightColor";static S_CUR_LIGHT_COUNT_SRC="_curLightCount";static S_NB_LIGHTS="_NB_LIGHTS";static S_BATCH_LIGHT_SIZE=12;static resizeBatchLightSize(t){t!=i.S_BATCH_LIGHT_SIZE&&(i.S_BATCH_LIGHT_SIZE=3*t,i.Context_Data["Context.VLightData"].modifier="["+i.S_BATCH_LIGHT_SIZE+"]",i.Context_Data["Context.WLightData"].modifier="["+i.S_BATCH_LIGHT_SIZE+"]")}static S_CAMERA_POSITION_SRC="_cameraPosition";static S_MAX_BONE=256;static S_SKINS_SRC="_C_SKINS";static S_SRGB_SRC="_C_SRGB";static S_GIPROBES_SRC="_C_GIPROBES";static S_PSSM_SRC="_C_PSSM";static S_POINTLIGHT_SHADOWS_SRC="_C_POINTLIGHT_SHADOWS";static S_SPOTLIGHT_SHADOWS_SRC="_C_SPOTLIGHT_SHADOWS";static S_FADE_SRC="_C_FADE";static S_G_BUFFER0_SRC="_gBuffer0";static S_G_BUFFER1_SRC="_gBuffer1";static S_G_BUFFER2_SRC="_gBuffer2";static S_G_DEPTH_SRC="_gDepth";static S_G_DEPTH_RENDER_BUFFER_SRC="_gDepthRenderBuffer";static S_SCREEN_SRC="_screen";static S_FORWARD_COLOR_MAP_SRC="_forwardColorMap";static S_IN_SCREEN_SRC="_inScreenMap";static S_IN_DEPTH_SRC="_inDepthMap";static S_LIGHT_NUM_SRC="_lightNum";static S_TILE_LIGHT_DECODE_SRC="_tileLightDecode";static S_TILE_LIGHT_INDEX_SRC="_tileLightIndex";static S_TILE_LIGHT_OFFSET_SIZE="_tileLightOffsetSize";static S_TILE_W_LIGHT_DATA_0="_tileWLightData0";static S_TILE_V_LIGHT_DATA_0="_tileVLightData0";static S_TILE_W_LIGHT_DATA_1="_tileWLightData1";static S_TILE_V_LIGHT_DATA_1="_tileVLightData1";static S_TILE_W_LIGHT_DATA_2="_tileWLightData2";static S_TILE_V_LIGHT_DATA_2="_tileVLightData2";static S_PREF_ENV_MAP_SRC="_prefEnvMap";static S_WGIPROBE_SRC="_wGIProbe";static S_SH_COEFFS_SRC="_ShCoeffs";static S_RESOLUTION_INVERSE="_ResolutionInverse";static S_SHADOW_MAP_ARRAY_SRC={0:"_shadowMap0",1:"_shadowMap1",2:"_shadowMap2",3:"_shadowMap3",4:"_shadowMap4",5:"_shadowMap5",6:"_shadowMap6"};static S_LIGHT_SHADOW_VP_ARRAY_SRC={0:"_lightViewProjectMatrix0",1:"_lightViewProjectMatrix1",2:"_lightViewProjectMatrix2",3:"_lightViewProjectMatrix3",4:"_lightViewProjectMatrix4",5:"_lightViewProjectMatrix5",6:"_lightViewProjectMatrix6"};static S_LIGHT_DIR="_lightDir";static S_LIGHT_POS="_lightPos";static S_SPLITS="_splits";static S_FADEINFO="_fadeInfo";static S_SHADOW_MAP_SIZE="_shadowMapSize";static S_SHADOW_MAP_SIZE_INVERSE="_sMapSizeInverse";static ContextBlocks={S_VIEW_MATRIX_SRC:!0,S_PROJECT_MATRIX_SRC:!0,S_VP_SRC:!0};static MAT="layout (std140) uniform MAT\n{\nmat4 "+i.S_VIEW_MATRIX_SRC+";\nmat4 "+i.S_PROJECT_MATRIX_SRC+";\nmat4 "+i.S_VP_SRC+";\n};\n";static VIEW="layout (std140) uniform VIEW\n{\nvec3 "+i.S_CAMERA_POSITION_SRC+";\n};\n";static VIEW_PORT="layout (std140) uniform VIEW_PORT\n{\nvec2 "+i.S_RESOLUTION_INVERSE+";\n};\n";static BLOCKS={MAT:{blockIndex:1,blockDef:i.MAT},VIEW:{blockIndex:2,blockDef:i.VIEW},VIEW_PORT:{blockIndex:3,blockDef:i.VIEW_PORT}};static Context_RenderDataRefFBs={_gBuffer0:"DefaultDeferredShadingFrameBuffer",_gBuffer1:"DefaultDeferredShadingFrameBuffer",_gBuffer2:"DefaultDeferredShadingFrameBuffer",_gDepth:"DefaultDeferredShadingFrameBuffer",_forwardColorMap:"DefaultForwardShadingFrameBuffer",_inScreenMap:"DefaultPostFilterShadingFrameBuffer",_inDepthMap:"DefaultPostFilterShadingFrameBuffer"};static S_TRY3D_LIGHTING_LIB="// 计算光照方向\n            // 对于DirLight,PointLight以及SpotLight,lightType依次为0.0,1.0,2.0\n            // 输出光照方向\n            // lightDir.w存储衰减率(对于DirLight,衰减值一直为1,对于Point或Spot,衰减值随着半径而变小,衰减值越小,表示衰减度越大)\n            void ComputeLightDir(in vec3 worldPos, in float lightType, in vec4 position, out vec4 lightDir, out vec3 lightVec){\n                // 只有lightType = 0.0时,posLight为0.0,否则posLight为1.0\n                float posLight = step(0.5f, lightType);\n\n                // 计算光照位置\n                // 对于DirLight,lightVec = position.xyz * sign(-0.5f) = position.xyz * -1.0f;其中position代表DirLight的方向\n                // 对于PointLight和SpotLight,lightVec = position.xyz * sign(1.0f - 0.5f) - (worldPos * 1.0f) = positions.xyz * 1.0f - worldPos;其中position代表Light的位置\n                lightVec = position.xyz * sign(posLight - 0.5f) - (worldPos * posLight);\n                float dist = length(lightVec);\n\n                // 对于DirLight,lightDir.w = 1.0f\n                //lightDir.w = clamp(1.0f - position.w * dist * posLight, 0.0f, 1.0f);\n\n                lightDir.w = (1.0f - position.w * dist) / (1.0f + position.w * dist * dist);\n                lightDir.w = clamp(lightDir.w, 1.0f - posLight, 1.0f);\n\n                // 归一化\n                lightDir.xyz = lightVec / vec3(dist);\n            }\n            // 基于BlinnPhong光照模型计算光照因子\n            // brdf.x保存漫反射部分;brdf.y保存镜面反射部分\n            void ComputeLighting(in vec3 normal, in vec3 viewDir, in vec3 lightDir, in float attenuation, in float shininess, out vec2 brdf){\n                // diffuse部分\n                float diffuseBRDF = max(0.0f, dot(normal, lightDir));\n                // specular部分\n                // 半角向量代替viewDir参与光照计算\n                vec3 H = normalize(viewDir + lightDir);\n                float HdotN = max(0.0f, dot(H, normal));\n                float specularBRDF = pow( HdotN, shininess );\n\n                // 衰减,对于PointLight和SpotLight来说有效,对于DirLight而言,attenuation一直为1\n                brdf.x = diffuseBRDF * attenuation;\n                brdf.y = specularBRDF * attenuation;\n            }\n            // 返回Spot范围衰减\n            float ComputeSpotFalloff(in vec4 spotDirection, in vec3 lightDir){\n                float curAngleCos = dot(lightDir, -spotDirection.xyz);\n                float innerAngleCos = floor(spotDirection.w) * 0.001f;\n                float outerAngleCos = fract(spotDirection.w);\n                float innerMinusOuter = innerAngleCos - outerAngleCos;\n                float falloff = clamp((curAngleCos - outerAngleCos) / innerMinusOuter, 0.0f, 1.0f);\n                //if(curAngleCos > innerMinusOuter)\n                //    falloff = 1.0f;\n                //else\n                //    falloff = 0.0f;\n\n                #ifdef SRGB\n                    // Use quadratic falloff (notice the ^4)\n                    return pow(clamp((curAngleCos - outerAngleCos) / innerMinusOuter, 0.0, 1.0), 4.0);\n                #else\n                    // Use linear falloff\n                    return falloff;\n                #endif\n            }\n";static S_TRY3D_PRINCIPLED_LIGHTING_LIB="// 计算光照方向\n            // 对于DirLight,PointLight以及SpotLight,lightType依次为0.0,1.0,2.0\n            // 输出光照方向\n            // lightDir.w存储衰减率(对于DirLight,衰减值一直为1,对于Point或Spot,衰减值随着半径而变小,衰减值越小,表示衰减度越大)\n            void ComputeLightDir(in vec3 worldPos, in float lightType, in vec4 position, out vec4 lightDir, out vec3 lightVec){\n                // 只有lightType = 0.0时,posLight为0.0,否则posLight为1.0\n                float posLight = step(0.5f, lightType);\n\n                // 计算光照位置\n                // 对于DirLight,lightVec = position.xyz * sign(-0.5f) = position.xyz * -1.0f;其中position代表DirLight的方向\n                // 对于PointLight和SpotLight,lightVec = position.xyz * sign(1.0f - 0.5f) - (worldPos * 1.0f) = positions.xyz * 1.0f - worldPos;其中position代表Light的位置\n                lightVec = position.xyz * sign(posLight - 0.5f) - (worldPos * posLight);\n                float dist = length(lightVec);\n\n                #ifndef Context.Srgb\n                    lightDir.w = (1.0f - position.w * dist) / (1.0f + position.w * dist * dist);\n                    lightDir.w = clamp(lightDir.w, 1.0f - posLight, 1.0f);\n                #else\n                    // 对于DirLight,lightDir.w = 1.0f\n                    lightDir.w = clamp(1.0f - position.w * dist * posLight, 0.0f, 1.0f);\n                #endif\n\n                // 归一化\n                lightDir.xyz = lightVec / vec3(dist);\n            }\n            #define PI 3.14159265358979323846264\n            // 镜面反射菲涅尔计算\n            vec3 F_Shlick(float vh,\tvec3 F0){\n            \tfloat fresnelFact = pow(2.0f, (-5.55473f * vh - 6.98316f) * vh);\n            \treturn mix(F0, vec3(1.0f, 1.0f, 1.0f), fresnelFact);\n            }\n            vec3 F_Schlick2(float cosTheta, vec3 F0)\n            {\n                return F0 + (1.0f - F0) * pow(1.0f - cosTheta, 5.0f);\n            }\n            // 计算直接光照\n            void ComputeDirectLighting(in vec3 normal, in vec3 viewDir, in vec3 lightDir, in vec3 lightColor, in vec3 diffuseColor, in vec3 fZero, in float roughness, in float ndotv, out vec3 directLighting){\n                vec3 h = normalize(lightDir + viewDir);\n                float ndotl = max( dot( normal, lightDir ), 0.0f );\n                float ndoth = max( dot( normal, h), 0.0f );\n                float hdotv = max( dot( h, viewDir ), 0.0f );\n\n                // 这里,不使用c/Π计算diffuse fr(x, wi, wo)\n                // 而假设恒定\n                vec3 diffuse = vec3( ndotl ) * lightColor * diffuseColor;\n\n                // cook-torrence,BRDF : http://blog.selfshadow.com/publications/s2013-shading-course/karis/s2013_pbs_epic_notes_v2.pdf\n                float alpha = roughness * roughness;\n\n                // D, GGX 法线分布函数\n                float alpha2 = alpha * alpha;\n                float sum = (( ndoth * ndoth ) * ( alpha2 - 1.0f ) + 1.0f);\n                float denom = PI * sum * sum;\n                float D = alpha2 / denom;\n\n                // F, 菲涅尔项\n                vec3 F = F_Shlick( hdotv, fZero );\n\n                // G, 几何遮挡项\n                float k = alpha * 0.5f;\n                float G_V = ndotv + sqrt( ( ndotv - ndotv * k ) * ndotv + k );\n                float G_L = ndotl + sqrt( ( ndotl - ndotl * k ) * ndotl + k );\n                float G = 1.0f / max( G_V * G_L ,0.01f );\n\n                // specularBRDF\n                float t = D * G * ndotl;\n                vec3 specular =  vec3( t ) * F * lightColor;\n\n                directLighting = diffuse + specular;\n            }\n            // 返回Spot范围衰减\n            float ComputeSpotFalloff(in vec4 spotDirection, in vec3 lightDir){\n                float curAngleCos = dot(lightDir, -spotDirection.xyz);\n                float innerAngleCos = floor(spotDirection.w) * 0.001f;\n                float outerAngleCos = fract(spotDirection.w);\n                float innerMinusOuter = innerAngleCos - outerAngleCos;\n\n                #ifndef Context.Srgb\n                    // 使用二次衰减（请注意^ 4）\n                    return pow(clamp((curAngleCos - outerAngleCos) / innerMinusOuter, 0.0f, 1.0f), 4.0f);\n                #else\n                    // 线性空间衰减\n                    return clamp((curAngleCos - outerAngleCos) / innerMinusOuter, step(spotDirection.w, 0.001f), 1.0f);\n                #endif\n            }\n            // 球谐函数\n            vec3 sphericalHarmonics( const in vec3 normal, const vec3 sph[9] ){\n                float x = normal.x;\n                float y = normal.y;\n                float z = normal.z;\n\n                vec3 result = (\n                    sph[0] +\n\n                    sph[1] * y +\n                    sph[2] * z +\n                    sph[3] * x +\n\n                    sph[4] * y * x +\n                    sph[5] * y * z +\n                    sph[6] * (3.0f * z * z - 1.0f) +\n                    sph[7] * (z * x) +\n                    sph[8] * (x*x - y*y)\n                );\n\n                return max(result, vec3(0.0f));\n            }\n            // 镜面反射趋势朝向\n            vec3 getSpecularDominantDir(const in vec3 N, const in vec3 R, const in float realRoughness){\n\n                float smoothness = 1.0f - realRoughness;\n                float lerpFactor = smoothness * (sqrt(smoothness) + realRoughness);\n                // 当我们在立方体贴图中获取时，结果未规范化\n                vec3 dominant = mix(N, R, lerpFactor);\n\n                return dominant;\n            }\n            // 拟合方程\n            // 关于镜面部分，有很多优化地方，除了常见的优化，还有很多可以替代方案，几乎可以在保证画质的前提下，在移动端35帧率提升到60帧率，详细可参考我的笔记:https://www.cnblogs.com/JhonKkk/p/14313882.html\n            vec3 integrateBRDFApprox( const in vec3 specular, in float roughness, in float NoV ){\n                const vec4 c0 = vec4( -1.0f, -0.0275f, -0.572f, 0.022f );\n                const vec4 c1 = vec4( 1.0f, 0.0425f, 1.04f, -0.04f );\n                vec4 r = roughness * c0 + c1;\n                float a004 = min( r.x * r.x, exp2( -9.28f * NoV ) ) * r.x + r.y;\n                vec2 ab = vec2( -1.04f, 1.04f ) * a004 + r.zw;\n                return specular * ab.x + ab.y;\n            }\n            // 近似镜面IBL多项式\n            vec3 approximateSpecularIBLPolynomial(in samplerCube envMap, in vec3 specularColor , in float roughness, in float ndotv, in vec3 refVec, in float mipMaps){\n                float lod = sqrt( roughness ) * (mipMaps - 1.0f);\n                vec3 prefilteredColor = textureLod(envMap, refVec.xyz, lod).rgb;\n                return prefilteredColor * integrateBRDFApprox(specularColor, roughness, ndotv);\n            }\n";static S_TYR3D_SHADOW_LIB="//#extension GL_ARB_gpu_shader5 : enable\n            float shadowBorderScale = 1.0f;\n            #ifdef HARDWARE_SHADOWS\n                #define SHADOWMAP sampler2DShadow\n                #define SHADOWCOMPAREOFFSET(tex,coord,offset) textureProjOffset(tex, coord, offset)\n                #define SHADOWCOMPARE(tex,coord) textureProj(tex, coord)\n                #define SHADOWGATHER(tex,coord) textureGather(tex, coord.xy, coord.z)\n            #else\n                #define SHADOWMAP sampler2D\n                #define SHADOWCOMPAREOFFSET(tex,coord,offset) step(coord.z, textureProjOffset(tex, coord, offset).r)\n                #define SHADOWCOMPARE(tex,coord) step(coord.z, textureProj(tex, coord).r)\n                #define SHADOWGATHER(tex,coord) step(coord.z, textureGather(tex, coord.xy))\n            #endif\n\n            #define FILTER_MODE 1\n\n            #if FILTER_MODE == 10\n                #define GETSHADOW Shadow_Nearest\n                #define KERNEL 1.0\n            #elif FILTER_MODE == 1\n                #ifdef HARDWARE_SHADOWS\n                    #define GETSHADOW Shadow_Nearest\n                #else\n                    #define GETSHADOW Shadow_DoBilinear_2x2\n                #endif\n                #define KERNEL 1.0\n            #endif\n\n            #if (FILTER_MODE == 2)\n                #define GETSHADOW Shadow_DoDither_2x2\n                #define KERNEL 1.0\n            #elif FILTER_MODE == 3\n                #define GETSHADOW Shadow_DoPCF\n                #define KERNEL 4.0\n            #elif FILTER_MODE == 4\n                #define GETSHADOW Shadow_DoPCFPoisson\n                #define KERNEL 4.0\n            #elif FILTER_MODE == 5\n                #define GETSHADOW Shadow_DoPCF\n                #define KERNEL 8.0\n            #endif\n\n            float Shadow_DoShadowCompare(in SHADOWMAP tex,in vec4 projCoord){\n                return SHADOWCOMPARE(tex, projCoord);\n            }\n\n            float Shadow_BorderCheck(in vec2 coord){\n                // 最快的“hack”方法（使用 4-5 条指令）\n                vec4 t = vec4(coord.xy, 0.0f, 1.0f);\n                t = step(t.wwxy, t.xyzz);\n                return dot(t,t);\n            }\n\n            float Shadow_Nearest(in SHADOWMAP tex,in vec4 projCoord){\n                float border = Shadow_BorderCheck(projCoord.xy);\n                if (border > 0.0f){\n                    return 1.0f;\n                }\n                return SHADOWCOMPARE(tex, projCoord);\n            }\n\n            //----------------------------------ShadowFilter--------------------------------------\n            float Shadow_DoShadowCompareOffset(in SHADOWMAP tex,in vec4 projCoord,in vec2 offset){\n                vec4 coord = vec4(projCoord.xy + offset.xy * Context.SMapSizeInverse * shadowBorderScale, projCoord.zw);\n                return SHADOWCOMPARE(tex, coord);\n            }\n\n\n            float Shadow_DoDither_2x2(in SHADOWMAP tex, in vec4 projCoord){\n                float border = Shadow_BorderCheck(projCoord.xy);\n                if (border > 0.0f)\n                    return 1.0f;\n\n                float shadow = 0.0f;\n                vec2 o = vec2(ivec2(mod(floor(gl_FragCoord.xy), 2.0f))); //Strict type checking in GLSL ES\n                shadow += Shadow_DoShadowCompareOffset(tex, projCoord, (vec2(-1.5f, 1.5f)+o));\n                shadow += Shadow_DoShadowCompareOffset(tex, projCoord, (vec2( 0.5f, 1.5f)+o));\n                shadow += Shadow_DoShadowCompareOffset(tex, projCoord, (vec2(-1.5f, -0.5f)+o));\n                shadow += Shadow_DoShadowCompareOffset(tex, projCoord, (vec2( 0.5f, -0.5f)+o));\n                shadow *= 0.25f;\n                return shadow;\n            }\n\n            float Shadow_DoBilinear_2x2(in SHADOWMAP tex, in vec4 projCoord){\n                float border = Shadow_BorderCheck(projCoord.xy);\n                if (border > 0.0f){\n                    return 1.0f;\n                }\n\n                vec4 gather = vec4(0.0f);\n                #if defined GL_ARB_gpu_shader5 || defined GL_OES_gpu_shader5\n                    vec4 coord = vec4(projCoord.xyz / projCoord.www, 0.0f);\n                    gather = SHADOWGATHER(tex, coord);\n                #else\n                    gather.x = SHADOWCOMPAREOFFSET(tex, projCoord, ivec2(0, 1));\n                    gather.y = SHADOWCOMPAREOFFSET(tex, projCoord, ivec2(1, 1));\n                    gather.z = SHADOWCOMPAREOFFSET(tex, projCoord, ivec2(1, 0));\n                    gather.w = SHADOWCOMPAREOFFSET(tex, projCoord, ivec2(0, 0));\n                #endif\n\n               vec2 f = fract( projCoord.xy * Context.ShadowMapSize );\n               vec2 mx = mix( gather.wx, gather.zy, f.x );\n               return mix( mx.x, mx.y, f.y );\n            }\n\n            float Shadow_DoPCF(in SHADOWMAP tex,in vec4 projCoord){\n\n                float shadow = 0.0f;\n                float border = Shadow_BorderCheck(projCoord.xy);\n                if (border > 0.0f)\n                    return 1.0f;\n\n                float bound = KERNEL * 0.5f - 0.5f;\n                bound *= Params.pcfEdge;\n                for (float y = -bound; y <= bound; y += Params.pcfEdge){\n                    for (float x = -bound; x <= bound; x += Params.pcfEdge){\n                        shadow += Shadow_DoShadowCompareOffset(tex, projCoord, vec2(x,y));\n                    }\n                }\n\n                shadow = shadow / (KERNEL * KERNEL);\n                return shadow;\n            }\n\n            //12 tap poisson disk\n            const vec2 poissonDisk0 =  vec2(-0.1711046f, -0.425016f);\n            const vec2 poissonDisk1 =  vec2(-0.7829809f, 0.2162201f);\n            const vec2 poissonDisk2 =  vec2(-0.2380269f, -0.8835521f);\n            const vec2 poissonDisk3 =  vec2(0.4198045f, 0.1687819f);\n            const vec2 poissonDisk4 =  vec2(-0.684418f, -0.3186957f);\n            const vec2 poissonDisk5 =  vec2(0.6026866f, -0.2587841f);\n            const vec2 poissonDisk6 =  vec2(-0.2412762f, 0.3913516f);\n            const vec2 poissonDisk7 =  vec2(0.4720655f, -0.7664126f);\n            const vec2 poissonDisk8 =  vec2(0.9571564f, 0.2680693f);\n            const vec2 poissonDisk9 =  vec2(-0.5238616f, 0.802707f);\n            const vec2 poissonDisk10 = vec2(0.5653144f, 0.60262f);\n            const vec2 poissonDisk11 = vec2(0.0123658f, 0.8627419f);\n\n\n            float Shadow_DoPCFPoisson(in SHADOWMAP tex, in vec4 projCoord){\n                float shadow = 0.0f;\n                float border = Shadow_BorderCheck(projCoord.xy);\n                if (border > 0.0f){\n                    return 1.0f;\n                }\n\n                vec2 texelSize = Context.SMapSizeInverse * 4.0f * Params.pcfEdge * shadowBorderScale;\n\n                shadow += SHADOWCOMPARE(tex, vec4(projCoord.xy + poissonDisk0 * texelSize, projCoord.zw));\n                shadow += SHADOWCOMPARE(tex, vec4(projCoord.xy + poissonDisk1 * texelSize, projCoord.zw));\n                shadow += SHADOWCOMPARE(tex, vec4(projCoord.xy + poissonDisk2 * texelSize, projCoord.zw));\n                shadow += SHADOWCOMPARE(tex, vec4(projCoord.xy + poissonDisk3 * texelSize, projCoord.zw));\n                shadow += SHADOWCOMPARE(tex, vec4(projCoord.xy + poissonDisk4 * texelSize, projCoord.zw));\n                shadow += SHADOWCOMPARE(tex, vec4(projCoord.xy + poissonDisk5 * texelSize, projCoord.zw));\n                shadow += SHADOWCOMPARE(tex, vec4(projCoord.xy + poissonDisk6 * texelSize, projCoord.zw));\n                shadow += SHADOWCOMPARE(tex, vec4(projCoord.xy + poissonDisk7 * texelSize, projCoord.zw));\n                shadow += SHADOWCOMPARE(tex, vec4(projCoord.xy + poissonDisk8 * texelSize, projCoord.zw));\n                shadow += SHADOWCOMPARE(tex, vec4(projCoord.xy + poissonDisk9 * texelSize, projCoord.zw));\n                shadow += SHADOWCOMPARE(tex, vec4(projCoord.xy + poissonDisk10 * texelSize, projCoord.zw));\n                shadow += SHADOWCOMPARE(tex, vec4(projCoord.xy + poissonDisk11 * texelSize, projCoord.zw));\n\n                // 除以 12\n                return shadow * 0.08333333333f;\n            }\n            //----------------------------------ShadowFilter--------------------------------------\n\n\n            #ifdef Context.Pssm\n                // 基于PSSM实现的DirectionalLightShadows\n                float getDirectionalLightShadows(in vec4 splits,in float shadowPosition, in SHADOWMAP shadowMap0, in SHADOWMAP shadowMap1, in SHADOWMAP shadowMap2,in SHADOWMAP shadowMap3, in vec4 projCoord0,in vec4 projCoord1,in vec4 projCoord2,in vec4 projCoord3){\n                    float shadow = 1.0f;\n                    if(shadowPosition < splits.x){\n                        shadow = GETSHADOW(shadowMap0, projCoord0 );\n                    }\n                    else if( shadowPosition <  splits.y){\n                        shadowBorderScale = 0.5f;\n                        shadow = GETSHADOW(shadowMap1, projCoord1);\n                    }\n                    else if( shadowPosition <  splits.z){\n                        shadowBorderScale = 0.25f;\n                        shadow = GETSHADOW(shadowMap2, projCoord2);\n                    }\n                    else if( shadowPosition <  splits.w){\n                        shadowBorderScale = 0.125f;\n                        shadow = GETSHADOW(shadowMap3, projCoord3);\n                    }\n                    return shadow;\n                }\n            #endif\n            #ifdef Context.PointLightShadows\n                float getPointLightShadows(in vec4 worldPos,in vec3 lightPos, in SHADOWMAP shadowMap0, in SHADOWMAP shadowMap1, in SHADOWMAP shadowMap2, in SHADOWMAP shadowMap3, in SHADOWMAP shadowMap4, in SHADOWMAP shadowMap5, in vec4 projCoord0,in vec4 projCoord1,in vec4 projCoord2,in vec4 projCoord3,in vec4 projCoord4,in vec4 projCoord5){\n                    float shadow = 1.0f;\n                    vec3 vect = worldPos.xyz - lightPos;\n                    vec3 absv = abs(vect);\n                    float maxComp = max(absv.x,max(absv.y,absv.z));\n                    if(maxComp == absv.y){\n                       if(vect.y < 0.0f){\n                           shadow = GETSHADOW(shadowMap0, projCoord0 / projCoord0.w);\n                       }\n                       else{\n                           shadow = GETSHADOW(shadowMap1, projCoord1 / projCoord1.w);\n                       }\n                    }\n                    else if(maxComp == absv.z){\n                       if(vect.z < 0.0f){\n                           shadow = GETSHADOW(shadowMap2, projCoord2 / projCoord2.w);\n                       }\n                       else{\n                           shadow = GETSHADOW(shadowMap3, projCoord3 / projCoord3.w);\n                       }\n                    }\n                    else if(maxComp == absv.x){\n                       if(vect.x < 0.0f){\n                           shadow = GETSHADOW(shadowMap4, projCoord4 / projCoord4.w);\n                       }\n                       else{\n                           shadow = GETSHADOW(shadowMap5, projCoord5 / projCoord5.w);\n                       }\n                    }\n                    return shadow;\n                }\n            #endif\n            #ifdef Context.SpotLightShadows\n                float getSpotLightShadows(in SHADOWMAP shadowMap, in  vec4 projCoord){\n                    float shadow = 1.0f;\n                    projCoord /= projCoord.w;\n                    shadow = GETSHADOW(shadowMap, projCoord);\n\n                    // 一个小的衰减，使阴影很好地融入暗部，将纹理坐标值转换为 -1,1 范围，因此纹理坐标向量的长度实际上是地面上变亮区域的半径\n                    projCoord = projCoord * 2.0f - 1.0f;\n                    float fallOff = ( length(projCoord.xy) - 0.9f ) / 0.1f;\n                    return mix(shadow, 1.0f, clamp(fallOff, 0.0f, 1.0f));\n                }\n            #endif\n            const mat4 biasMat = mat4(0.5f, 0.0f, 0.0f, 0.0f,\n                                      0.0f, 0.5f, 0.0f, 0.0f,\n                                      0.0f, 0.0f, 0.5f, 0.0f,\n                                      0.5f, 0.5f, 0.5f, 1.0f);\n";static S_TRY3D_COMMON_LIB="// 获取世界坐标\nvec4 getWorldPosition(){\n    #ifdef Context.Skins\n        mat4 skinMat =\n                Context.InWeight0.x * Context.Joints[int(Context.InJoint0.x)] +\n                Context.InWeight0.y * Context.Joints[int(Context.InJoint0.y)] +\n                Context.InWeight0.z * Context.Joints[int(Context.InJoint0.z)] +\n                Context.InWeight0.w * Context.Joints[int(Context.InJoint0.w)];\n        // vec4 pos = Context.ModelMatrix * skinMat * vec4(Context.InPosition, 1.0f);\n        return skinMat * vec4(Context.InPosition, 1.0f);\n    #else\n        return Context.ModelMatrix * vec4(Context.InPosition, 1.0f);\n    #endif\n}\n// 获取变换顶点\nvec4 getTransformPosition(){\n    return Context.ProjectViewMatrix * getWorldPosition();\n}\n// 深度重建positions\nvec3 getPosition(in mat4 pvInverse, in float depth, in vec2 newTexCoord){\n\n                vec4 pos;\n                pos.xy = (newTexCoord * vec2(2.0)) - vec2(1.0);\n                pos.z  = depth * 2.0 - 1.0;\n                pos.w  = 1.0;\n                pos    = pvInverse * pos;\n                pos.xyz /= pos.w;\n                return pos.xyz;\n            }\n// 近似法线\nvec3 approximateNormal(in vec4 worldPos,in vec2 texCoord, in sampler2D depthMap, in vec2 resolutionInverse, in mat4 pvInverse){\n                float step = resolutionInverse.x;\n                float stepy = resolutionInverse.y;\n                float depth2 = texture(depthMap, texCoord + vec2(step, -stepy)).r;\n                float depth3 = texture(depthMap, texCoord + vec2(-step, -stepy)).r;\n                vec4 worldPos2 = vec4(getPosition(pvInverse, depth2, texCoord + vec2(step, -stepy)),1.0f);\n                vec4 worldPos3 = vec4(getPosition(pvInverse, depth3, texCoord + vec2(-step, -stepy)),1.0f);\n\n                vec3 v1 = (worldPos - worldPos2).xyz;\n                vec3 v2 = (worldPos3 - worldPos2).xyz;\n                return normalize(cross(v1, v2));\n            }\n";static Context_Data={"Context.InPosition":{src:i.S_POSITION_SRC,loc:i.S_POSITION,pattern:/Context.InPosition/,pattern2:/Context.InPosition[\s+-;.,\*\\]{1,}/,tagPattern:/Context.InPosition/g,tag:i.S_POSITION_SRC,type:"vec3"},"Context.InBarycentric":{src:i.S_BARYCENTRIC_SRC,loc:i.S_BARYCENTRIC,pattern:/Context.InBarycentric/,pattern2:/Context.InBarycentric[\s+-;.,\*\\]{1,}/,tagPattern:/Context.InBarycentric/g,tag:i.S_BARYCENTRIC_SRC,type:"vec3"},"Context.InNormal":{src:i.S_NORMAL_SRC,loc:i.S_NORMAL,pattern:/Context.InNormal/,pattern2:/Context.InNormal[\s+-;.,\*\\]{1,}/,tagPattern:/Context.InNormal/g,tag:i.S_NORMAL_SRC,type:"vec3"},"Context.InTangent":{src:i.S_TANGENT_SRC,loc:i.S_TANGENT,pattern:/Context.InTangent/,pattern2:/Context.InTangent[\s+-;.,\*\\]{1,}/,tagPattern:/Context.InTangent/g,tag:i.S_TANGENT_SRC,type:"vec4"},"Context.InUv0":{src:i.S_UV0_SRC,loc:i.S_UV0,pattern:/Context.InUv0/,pattern2:/Context.InUv0[\s+-;.,\*\\]{1,}/,tagPattern:/Context.InUv0/g,tag:i.S_UV0_SRC,type:"vec2"},"Context.InJoint0":{src:i.S_JOINT_0_SRC,loc:i.S_JOINT_0,pattern:/Context.InJoint0/,pattern2:/Context.InJoint0[\s+-;.,\*\\]{1,}/,tagPattern:/Context.InJoint0/g,tag:i.S_JOINT_0_SRC,type:"vec4"},"Context.InWeight0":{src:i.S_WEIGHT_0_SRC,loc:i.S_WEIGHT_0,pattern:/Context.InWeight0/,pattern2:/Context.InWeight0[\s+-;.,\*\\]{1,}/,tagPattern:/Context.InWeight0/g,tag:i.S_WEIGHT_0_SRC,type:"vec4"},"Context.OutPosition":{src:i.S_OUT_POSITION,pattern:/Context.OutPosition/,pattern2:/Context.OutPosition[\s+-;.,\*\\]{1,}/,tagPattern:/Context.OutPosition/g,tag:"gl_Position"},"Context.ProjectViewModelMatrix":{src:i.S_MVP_SRC,pattern:/Context.ProjectViewModelMatrix/,pattern2:/Context.ProjectViewModelMatrix[\s+-;.,\*\\]{1,}/,tagPattern:/Context.ProjectViewModelMatrix/g,tag:"_model_view_project_matrix",type:"mat4",utype:"uniform mat4"},"Context.ViewMatrix":{src:i.S_VIEW_MATRIX_SRC,pattern:/Context.ViewMatrix/,pattern2:/Context.ViewMatrix[\s+-;.,\*\\]{1,}/,tagPattern:/Context.ViewMatrix/g,tag:i.S_VIEW_MATRIX_SRC,def:"MAT"},"Context.ProjectMatrix":{src:i.S_PROJECT_MATRIX_SRC,pattern:/Context.ProjectMatrix/,pattern2:/Context.ProjectMatrix[\s+-;.,\*\\]{1,}/,tagPattern:/Context.ProjectMatrix/g,tag:i.S_PROJECT_MATRIX_SRC,def:"MAT"},"Context.ModelMatrix":{src:i.S_MODEL_MATRIX_SRC,pattern:/Context.ModelMatrix/,pattern2:/Context.ModelMatrix[\s+-;.,\*\\]{1,}/,tagPattern:/Context.ModelMatrix/g,tag:i.S_MODEL_MATRIX_SRC,type:"mat4",utype:"uniform mat4"},"Context.ProjectViewMatrix":{src:i.S_VP_SRC,pattern:/Context.ProjectViewMatrix/,pattern2:/Context.ProjectViewMatrix[\s+-;.,\*\\]{1,}/,tagPattern:/Context.ProjectViewMatrix/g,tag:i.S_VP_SRC,def:"MAT"},"Context.OutColor":{src:i.S_OUT_COLOR,pattern:/Context.OutColor/,pattern2:/Context.OutColor[\s+-;.,\*\\]{1,}/,tagPattern:/Context.OutColor/g,tag:"_outColor",type:"out vec4"},"Context.Joints":{src:i.S_JOINTS_SRC,pattern:/Context.Joints/,pattern2:/Context.Joints[\s+-;.,\*\\]{1,}/,tagPattern:/Context.Joints/g,tag:i.S_JOINTS_SRC,type:"vec4",utype:"uniform mat4",modifier:"["+i.S_MAX_BONE+"]"},"Context.VLightData":{src:i.S_V_LIGHT_DATA_SRC,pattern:/Context.VLightData/,pattern2:/Context.VLightData[\s+-;.,\*\\]{1,}/,tagPattern:/Context.VLightData/g,tag:i.S_V_LIGHT_DATA_SRC,type:"vec4",utype:"uniform vec4",modifier:"["+i.S_BATCH_LIGHT_SIZE+"]"},"Context.MultiId":{src:i.S_MULTI_ID_SRC,pattern:/Context.MultiId/,pattern2:/Context.MultiId[\s+-;.,\*\\]{1,}/,tagPattern:/Context.MultiId/g,tag:i.S_MULTI_ID_SRC,type:"int",utype:"uniform int"},"Context.TileLightNum":{src:i.S_LIGHT_NUM_SRC,pattern:/Context.TileLightNum/,pattern2:/Context.TileLightNum[\s+-;.,\*\\]{1,}/,tagPattern:/Context.TileLightNum/g,tag:i.S_LIGHT_NUM_SRC,type:"int",utype:"uniform int"},"Context.TileLightOffsetSize":{src:i.S_TILE_LIGHT_OFFSET_SIZE,pattern:/Context.TileLightOffsetSize/,pattern2:/Context.TileLightOffsetSize[\s+-;.,\*\\]{1,}/,tagPattern:/Context.TileLightOffsetSize/g,tag:i.S_TILE_LIGHT_OFFSET_SIZE,type:"float",utype:"uniform float"},"Context.BlendGiProbes":{src:i.S_BLEND_GI_PROBES,pattern:/Context.BlendGiProbes/,pattern2:/Context.BlendGiProbes[\s+-;.,\*\\]{1,}/,tagPattern:/Context.BlendGiProbes/g,tag:i.S_BLEND_GI_PROBES,type:"bool",utype:"uniform bool"},"Context.UniqueShading":{src:i.S_UNIQUE_SHADING_SRC,pattern:/Context.UniqueShading/,pattern2:/Context.UniqueShading[\s+-;.,\*\\]{1,}/,tagPattern:/Context.UniqueShading/g,tag:i.S_UNIQUE_SHADING_SRC,type:"bool",utype:"uniform bool"},"Context.VLight_Data_0":{src:i.S_V_LIGHT_DATA0_SRC,pattern:/Context.VLight_Data_0/,pattern2:/Context.VLight_Data_0[\s+-;.,\*\\]{1,}/,tagPattern:/Context.VLight_Data_0/g,tag:i.S_V_LIGHT_DATA0_SRC,type:"vec4",utype:"uniform vec4"},"Context.VLight_Data_1":{src:i.S_V_LIGHT_DATA1_SRC,pattern:/Context.VLight_Data_1/,pattern2:/Context.VLight_Data_1[\s+-;.,\*\\]{1,}/,tagPattern:/Context.VLight_Data_1/g,tag:i.S_V_LIGHT_DATA1_SRC,type:"vec4",utype:"uniform vec4"},"Context.VLight_Data_2":{src:i.S_V_LIGHT_DATA2_SRC,pattern:/Context.VLight_Data_2/,pattern2:/Context.VLight_Data_2[\s+-;.,\*\\]{1,}/,tagPattern:/Context.VLight_Data_2/g,tag:i.S_V_LIGHT_DATA2_SRC,type:"vec4",utype:"uniform vec4"},"Context.WLightData":{src:i.S_W_LIGHT_DATA_SRC,pattern:/Context.WLightData/,pattern2:/Context.WLightData[\s+-;.,\*\\]{1,}/,tagPattern:/Context.WLightData/g,tag:i.S_W_LIGHT_DATA_SRC,type:"vec4",utype:"uniform vec4",modifier:"["+i.S_BATCH_LIGHT_SIZE+"]"},"Context.WLight_Data_0":{src:i.S_W_LIGHT_DATA0_SRC,pattern:/Context.WLight_Data_0/,pattern2:/Context.WLight_Data_0[\s+-;.,\*\\]{1,}/,tagPattern:/Context.WLight_Data_0/g,tag:i.S_W_LIGHT_DATA0_SRC,type:"vec4",utype:"uniform vec4"},"Context.WLight_Data_1":{src:i.S_W_LIGHT_DATA1_SRC,pattern:/Context.WLight_Data_1/,pattern2:/Context.WLight_Data_1[\s+-;.,\*\\]{1,}/,tagPattern:/Context.WLight_Data_1/g,tag:i.S_W_LIGHT_DATA1_SRC,type:"vec4",utype:"uniform vec4"},"Context.WLight_Data_2":{src:i.S_W_LIGHT_DATA2_SRC,pattern:/Context.WLight_Data_2/,pattern2:/Context.WLight_Data_2[\s+-;.,\*\\]{1,}/,tagPattern:/Context.WLight_Data_2/g,tag:i.S_W_LIGHT_DATA2_SRC,type:"vec4",utype:"uniform vec4"},"Context.AmbientLightColor":{src:i.S_AMBIENT_LIGHT_COLOR,pattern:/Context.AmbientLightColor/,pattern2:/Context.AmbientLightColor[\s+-;.,\*\\]{1,}/,tagPattern:/Context.AmbientLightColor/g,tag:i.S_AMBIENT_LIGHT_COLOR,type:"vec3",utype:"uniform vec3"},"Context.CurLightCount":{src:i.S_CUR_LIGHT_COUNT_SRC,pattern:/Context.CurLightCount/,pattern2:/Context.CurLightCount[\s+-;.,\*\\]{1,}/,tagPattern:/Context.CurLightCount/g,tag:i.S_CUR_LIGHT_COUNT_SRC,type:"int",utype:"uniform int"},"Context.CameraPosition":{src:i.S_CAMERA_POSITION_SRC,pattern:/Context.CameraPosition/,pattern2:/Context.CameraPosition[\s+-;.,\*\\]{1,}/,tagPattern:/Context.CameraPosition/g,tag:i.S_CAMERA_POSITION_SRC,def:"VIEW"},"Context.WGIProbe":{src:i.S_WGIPROBE_SRC,pattern:/Context.WGIProbe/,pattern2:/Context.WGIProbe[\s+-;.,\*\\]{1,}/,tagPattern:/Context.WGIProbe/g,tag:i.S_WGIPROBE_SRC,type:"vec4",utype:"uniform vec4"},"Context.ShCoeffs":{src:i.S_SH_COEFFS_SRC,pattern:/Context.ShCoeffs/,pattern2:/Context.ShCoeffs[\s+-;.,\*\\]{1,}/,tagPattern:/Context.ShCoeffs/g,tag:i.S_SH_COEFFS_SRC,type:"vec3",utype:"uniform vec3",modifier:"[9]"},"Context.InGBuffer0":{src:i.S_G_BUFFER0_SRC,pattern:/Context.InGBuffer0/,pattern2:/Context.InGBuffer0[\s+-;.,\*\\]{1,}/,tagPattern:/Context.InGBuffer0/g,tag:i.S_G_BUFFER0_SRC,type:"sampler2D",utype:"uniform sampler2D",flag:"renderData"},"Context.InGBuffer1":{src:i.S_G_BUFFER1_SRC,pattern:/Context.InGBuffer1/,pattern2:/Context.InGBuffer1[\s+-;.,\*\\]{1,}/,tagPattern:/Context.InGBuffer1/g,tag:i.S_G_BUFFER1_SRC,type:"sampler2D",utype:"uniform sampler2D",flag:"renderData"},"Context.InGBuffer2":{src:i.S_G_BUFFER2_SRC,pattern:/Context.InGBuffer2/,pattern2:/Context.InGBuffer2[\s+-;.,\*\\]{1,}/,tagPattern:/Context.InGBuffer2/g,tag:i.S_G_BUFFER2_SRC,type:"sampler2D",utype:"uniform sampler2D",flag:"renderData"},"Context.InGDepth":{src:i.S_G_DEPTH_SRC,pattern:/Context.InGDepth/,pattern2:/Context.InGDepth[\s+-;.,\*\\]{1,}/,tagPattern:/Context.InGDepth/g,tag:i.S_G_DEPTH_SRC,type:"sampler2D",utype:"uniform sampler2D",flag:"renderData"},"Context.InScreen":{src:i.S_IN_SCREEN_SRC,pattern:/Context.InScreen/,pattern2:/Context.InScreen[\s+-;.,\*\\]{1,}/,tagPattern:/Context.InScreen/g,tag:i.S_IN_SCREEN_SRC,type:"sampler2D",utype:"uniform sampler2D",flag:"renderData"},"Context.InDepth":{src:i.S_IN_DEPTH_SRC,pattern:/Context.InDepth/,pattern2:/Context.InDepth[\s+-;.,\*\\]{1,}/,tagPattern:/Context.InDepth/g,tag:i.S_IN_DEPTH_SRC,type:"sampler2D",utype:"uniform sampler2D",flag:"renderData"},"Context.InForwardColorMap":{src:i.S_FORWARD_COLOR_MAP_SRC,pattern:/Context.InForwardColorMap/,pattern2:/Context.InForwardColorMap[\s+-;.,\*\\]{1,}/,tagPattern:/Context.InForwardColorMap/g,tag:i.S_FORWARD_COLOR_MAP_SRC,type:"sampler2D",utype:"uniform sampler2D",flag:"renderData"},"Context.InPrefEnvMap":{src:i.S_PREF_ENV_MAP_SRC,pattern:/Context.InPrefEnvMap/,pattern2:/Context.InPrefEnvMap[\s+-;.,\*\\]{1,}/,tagPattern:/Context.InPrefEnvMap/g,tag:i.S_PREF_ENV_MAP_SRC,type:"samplerCube",utype:"uniform samplerCube"},"Context.InTileLightDecode":{src:i.S_TILE_LIGHT_DECODE_SRC,pattern:/Context.InTileLightDecode/,pattern2:/Context.InTileLightDecode[\s+-;.,\*\\]{1,}/,tagPattern:/Context.InTileLightDecode/g,tag:i.S_TILE_LIGHT_DECODE_SRC,type:"sampler2D",utype:"uniform sampler2D"},"Context.InTileLightIndex":{src:i.S_TILE_LIGHT_INDEX_SRC,pattern:/Context.InTileLightIndex/,pattern2:/Context.InTileLightIndex[\s+-;.,\*\\]{1,}/,tagPattern:/Context.InTileLightIndex/g,tag:i.S_TILE_LIGHT_INDEX_SRC,type:"sampler2D",utype:"uniform sampler2D"},"Context.InTileWLightData0":{src:i.S_TILE_W_LIGHT_DATA_0,pattern:/Context.InTileWLightData0/,pattern2:/Context.InTileWLightData0[\s+-;.,\*\\]{1,}/,tagPattern:/Context.InTileWLightData0/g,tag:i.S_TILE_W_LIGHT_DATA_0,type:"sampler2D",utype:"uniform sampler2D"},"Context.InTileVLightData0":{src:i.S_TILE_V_LIGHT_DATA_0,pattern:/Context.InTileVLightData0/,pattern2:/Context.InTileVLightData0[\s+-;.,\*\\]{1,}/,tagPattern:/Context.InTileVLightData0/g,tag:i.S_TILE_V_LIGHT_DATA_0,type:"sampler2D",utype:"uniform sampler2D"},"Context.InTileWLightData1":{src:i.S_TILE_W_LIGHT_DATA_1,pattern:/Context.InTileWLightData1/,pattern2:/Context.InTileWLightData1[\s+-;.,\*\\]{1,}/,tagPattern:/Context.InTileWLightData1/g,tag:i.S_TILE_W_LIGHT_DATA_1,type:"sampler2D",utype:"uniform sampler2D"},"Context.InTileVLightData1":{src:i.S_TILE_V_LIGHT_DATA_1,pattern:/Context.InTileVLightData1/,pattern2:/Context.InTileVLightData1[\s+-;.,\*\\]{1,}/,tagPattern:/Context.InTileVLightData1/g,tag:i.S_TILE_V_LIGHT_DATA_1,type:"sampler2D",utype:"uniform sampler2D"},"Context.InTileWLightData2":{src:i.S_TILE_W_LIGHT_DATA_2,pattern:/Context.InTileWLightData2/,pattern2:/Context.InTileWLightData2[\s+-;.,\*\\]{1,}/,tagPattern:/Context.InTileWLightData2/g,tag:i.S_TILE_W_LIGHT_DATA_2,type:"sampler2D",utype:"uniform sampler2D"},"Context.InTileVLightData2":{src:i.S_TILE_V_LIGHT_DATA_2,pattern:/Context.InTileVLightData2/,pattern2:/Context.InTileVLightData2[\s+-;.,\*\\]{1,}/,tagPattern:/Context.InTileVLightData2/g,tag:i.S_TILE_V_LIGHT_DATA_2,type:"sampler2D",utype:"uniform sampler2D"},"Context.InShadowMap0":{src:i.S_SHADOW_MAP_ARRAY_SRC[0],pattern:/Context.InShadowMap0/,pattern2:/Context.InShadowMap0[\s+-;.,\*\\]{1,}/,tagPattern:/Context.InShadowMap0/g,tag:i.S_SHADOW_MAP_ARRAY_SRC[0],type:"sampler2D",utype:"uniform sampler2D"},"Context.InShadowMap1":{src:i.S_SHADOW_MAP_ARRAY_SRC[1],pattern:/Context.InShadowMap1/,pattern2:/Context.InShadowMap1[\s+-;.,\*\\]{1,}/,tagPattern:/Context.InShadowMap1/g,tag:i.S_SHADOW_MAP_ARRAY_SRC[1],type:"sampler2D",utype:"uniform sampler2D"},"Context.InShadowMap2":{src:i.S_SHADOW_MAP_ARRAY_SRC[2],pattern:/Context.InShadowMap2/,pattern2:/Context.InShadowMap2[\s+-;.,\*\\]{1,}/,tagPattern:/Context.InShadowMap2/g,tag:i.S_SHADOW_MAP_ARRAY_SRC[2],type:"sampler2D",utype:"uniform sampler2D"},"Context.InShadowMap3":{src:i.S_SHADOW_MAP_ARRAY_SRC[3],pattern:/Context.InShadowMap3/,pattern2:/Context.InShadowMap3[\s+-;.,\*\\]{1,}/,tagPattern:/Context.InShadowMap3/g,tag:i.S_SHADOW_MAP_ARRAY_SRC[3],type:"sampler2D",utype:"uniform sampler2D"},"Context.InShadowMap4":{src:i.S_SHADOW_MAP_ARRAY_SRC[4],pattern:/Context.InShadowMap4/,pattern2:/Context.InShadowMap4[\s+-;.,\*\\]{1,}/,tagPattern:/Context.InShadowMap4/g,tag:i.S_SHADOW_MAP_ARRAY_SRC[4],type:"sampler2D",utype:"uniform sampler2D"},"Context.InShadowMap5":{src:i.S_SHADOW_MAP_ARRAY_SRC[5],pattern:/Context.InShadowMap5/,pattern2:/Context.InShadowMap5[\s+-;.,\*\\]{1,}/,tagPattern:/Context.InShadowMap5/g,tag:i.S_SHADOW_MAP_ARRAY_SRC[5],type:"sampler2D",utype:"uniform sampler2D"},"Context.InShadowMap6":{src:i.S_SHADOW_MAP_ARRAY_SRC[6],pattern:/Context.InShadowMap6/,pattern2:/Context.InShadowMap6[\s+-;.,\*\\]{1,}/,tagPattern:/Context.InShadowMap6/g,tag:i.S_SHADOW_MAP_ARRAY_SRC[6],type:"sampler2D",utype:"uniform sampler2D"},"Context.LightViewProjectMatrix0":{src:i.S_LIGHT_SHADOW_VP_ARRAY_SRC[0],pattern:/Context.LightViewProjectMatrix0/,pattern2:/Context.LightViewProjectMatrix0[\s+-;.,\*\\]{1,}/,tagPattern:/Context.LightViewProjectMatrix0/g,tag:i.S_LIGHT_SHADOW_VP_ARRAY_SRC[0],type:"mat4",utype:"uniform mat4"},"Context.LightViewProjectMatrix1":{src:i.S_LIGHT_SHADOW_VP_ARRAY_SRC[1],pattern:/Context.LightViewProjectMatrix1/,pattern2:/Context.LightViewProjectMatrix1[\s+-;.,\*\\]{1,}/,tagPattern:/Context.LightViewProjectMatrix1/g,tag:i.S_LIGHT_SHADOW_VP_ARRAY_SRC[1],type:"mat4",utype:"uniform mat4"},"Context.LightViewProjectMatrix2":{src:i.S_LIGHT_SHADOW_VP_ARRAY_SRC[2],pattern:/Context.LightViewProjectMatrix2/,pattern2:/Context.LightViewProjectMatrix2[\s+-;.,\*\\]{1,}/,tagPattern:/Context.LightViewProjectMatrix2/g,tag:i.S_LIGHT_SHADOW_VP_ARRAY_SRC[2],type:"mat4",utype:"uniform mat4"},"Context.LightViewProjectMatrix3":{src:i.S_LIGHT_SHADOW_VP_ARRAY_SRC[3],pattern:/Context.LightViewProjectMatrix3/,pattern2:/Context.LightViewProjectMatrix3[\s+-;.,\*\\]{1,}/,tagPattern:/Context.LightViewProjectMatrix3/g,tag:i.S_LIGHT_SHADOW_VP_ARRAY_SRC[3],type:"mat4",utype:"uniform mat4"},"Context.LightViewProjectMatrix4":{src:i.S_LIGHT_SHADOW_VP_ARRAY_SRC[4],pattern:/Context.LightViewProjectMatrix4/,pattern2:/Context.LightViewProjectMatrix4[\s+-;.,\*\\]{1,}/,tagPattern:/Context.LightViewProjectMatrix4/g,tag:i.S_LIGHT_SHADOW_VP_ARRAY_SRC[4],type:"mat4",utype:"uniform mat4"},"Context.LightViewProjectMatrix5":{src:i.S_LIGHT_SHADOW_VP_ARRAY_SRC[5],pattern:/Context.LightViewProjectMatrix5/,pattern2:/Context.LightViewProjectMatrix5[\s+-;.,\*\\]{1,}/,tagPattern:/Context.LightViewProjectMatrix5/g,tag:i.S_LIGHT_SHADOW_VP_ARRAY_SRC[5],type:"mat4",utype:"uniform mat4"},"Context.LightViewProjectMatrix6":{src:i.S_LIGHT_SHADOW_VP_ARRAY_SRC[6],pattern:/Context.LightViewProjectMatrix6/,pattern2:/Context.LightViewProjectMatrix6[\s+-;.,\*\\]{1,}/,tagPattern:/Context.LightViewProjectMatrix6/g,tag:i.S_LIGHT_SHADOW_VP_ARRAY_SRC[6],type:"mat4",utype:"uniform mat4"},"Context.LightDir":{src:i.S_LIGHT_DIR,pattern:/Context.LightDir/,pattern2:/Context.LightDir[\s+-;.,\*\\]{1,}/,tagPattern:/Context.LightDir/g,tag:i.S_LIGHT_DIR,type:"vec3",utype:"uniform vec3"},"Context.LightPos":{src:i.S_LIGHT_POS,pattern:/Context.LightPos/,pattern2:/Context.LightPos[\s+-;.,\*\\]{1,}/,tagPattern:/Context.LightPos/g,tag:i.S_LIGHT_POS,type:"vec3",utype:"uniform vec3"},"Context.Splits":{src:i.S_SPLITS,pattern:/Context.Splits/,pattern2:/Context.Splits[\s+-;.,\*\\]{1,}/,tagPattern:/Context.Splits/g,tag:i.S_SPLITS,type:"vec4",utype:"uniform vec4"},"Context.Fadeinfo":{src:i.S_FADEINFO,pattern:/Context.Fadeinfo/,pattern2:/Context.Fadeinfo[\s+-;.,\*\\]{1,}/,tagPattern:/Context.Fadeinfo/g,tag:i.S_FADEINFO,type:"vec2",utype:"uniform vec2"},"Context.ResolutionInverse":{src:i.S_RESOLUTION_INVERSE,pattern:/Context.ResolutionInverse/,pattern2:/Context.ResolutionInverse[\s+-;.,\*\\]{1,}/,tagPattern:/Context.ResolutionInverse/g,tag:i.S_RESOLUTION_INVERSE,def:"VIEW_PORT"},"Context.ShadowMapSize":{src:i.S_SHADOW_MAP_SIZE,pattern:/Context.ShadowMapSize/,pattern2:/Context.ShadowMapSize[\s+-;.,\*\\]{1,}/,tagPattern:/Context.ShadowMapSize/g,tag:i.S_SHADOW_MAP_SIZE,type:"float",utype:"uniform float"},"Context.SMapSizeInverse":{src:i.S_SHADOW_MAP_SIZE_INVERSE,pattern:/Context.SMapSizeInverse/,pattern2:/Context.SMapSizeInverse[\s+-;.,\*\\]{1,}/,tagPattern:/Context.SMapSizeInverse/g,tag:i.S_SHADOW_MAP_SIZE_INVERSE,type:"vec2",utype:"uniform vec2"},"Context.OutGBuffer0":{src:i.S_G_BUFFER0_SRC,loc:i.S_G_BUFFER0,pattern:/Context.OutGBuffer0/,pattern2:/Context.OutGBuffer0[\s+-;.,\*\\]{1,}/,tagPattern:/Context.OutGBuffer0/g,tag:i.S_G_BUFFER0_SRC,type:"vec4"},"Context.OutGBuffer1":{src:i.S_G_BUFFER1_SRC,loc:i.S_G_BUFFER1,pattern:/Context.OutGBuffer1/,pattern2:/Context.OutGBuffer1[\s+-;.,\*\\]{1,}/,tagPattern:/Context.OutGBuffer1/g,tag:i.S_G_BUFFER1_SRC,type:"vec4"},"Context.OutGBuffer2":{src:i.S_G_BUFFER2_SRC,loc:i.S_G_BUFFER2,pattern:/Context.OutGBuffer2/,pattern2:/Context.OutGBuffer2[\s+-;.,\*\\]{1,}/,tagPattern:/Context.OutGBuffer2/g,tag:i.S_G_BUFFER2_SRC,type:"vec4"},"Context.OutGDepth":{src:i.S_G_DEPTH_SRC,loc:i.S_G_DEPTH,pattern:/Context.OutGDepth/,pattern2:/Context.OutGDepth[\s+-;.,\*\\]{1,}/,tagPattern:/Context.OutGDepth/g,tag:i.S_G_DEPTH_SRC,type:"vec4"},"Context.Skins":{src:i.S_SKINS_SRC,pattern:/Context.Skins/,pattern2:/Context.Skins[\s+-;.,\*\\]{1,}/,tagPattern:/Context.Skins/g,tag:i.S_SKINS_SRC,isFlagVariable:!0},"Context.Srgb":{src:i.S_SRGB_SRC,pattern:/Context.Srgb/,pattern2:/Context.Srgb[\s+-;.,\*\\]{1,}/,tagPattern:/Context.Srgb/g,tag:i.S_SRGB_SRC,isFlagVariable:!0},"Context.GIProbes":{src:i.S_GIPROBES_SRC,pattern:/Context.GIProbes/,pattern2:/Context.GIProbes[\s+-;.,\*\\]{1,}/,tagPattern:/Context.GIProbes/g,tag:i.S_GIPROBES_SRC,isFlagVariable:!0},"Context.Pssm":{src:i.S_PSSM_SRC,pattern:/Context.Pssm/,pattern2:/Context.Pssm[\s+-;.,\*\\]{1,}/,tagPattern:/Context.Pssm/g,tag:i.S_PSSM_SRC,isFlagVariable:!0},"Context.PointLightShadows":{src:i.S_POINTLIGHT_SHADOWS_SRC,pattern:/Context.PointLightShadows/,pattern2:/Context.PointLightShadows[\s+-;.,\*\\]{1,}/,tagPattern:/Context.PointLightShadows/g,tag:i.S_POINTLIGHT_SHADOWS_SRC,isFlagVariable:!0},"Context.SpotLightShadows":{src:i.S_SPOTLIGHT_SHADOWS_SRC,pattern:/Context.SpotLightShadows/,pattern2:/Context.SpotLightShadows[\s+-;.,\*\\]{1,}/,tagPattern:/Context.SpotLightShadows/g,tag:i.S_SPOTLIGHT_SHADOWS_SRC,isFlagVariable:!0},"Context.Fade":{src:i.S_FADE_SRC,pattern:/Context.Fade/,pattern2:/Context.Fade[\s+-;.,\*\\]{1,}/,tagPattern:/Context.Fade/g,tag:i.S_FADE_SRC,isFlagVariable:!0},_C_SKINS:"#define "+i.S_SKINS_SRC+" "+i.S_SKINS_SRC,_C_SRGB:"#define "+i.S_SRGB_SRC+" "+i.S_SRGB_SRC,_C_GIPROBES:"#define "+i.S_GIPROBES_SRC+" "+i.S_GIPROBES_SRC,_C_PSSM:"#define "+i.S_PSSM_SRC+" "+i.S_PSSM_SRC,_C_POINTLIGHT_SHADOWS:"#define "+i.S_POINTLIGHT_SHADOWS_SRC+" "+i.S_POINTLIGHT_SHADOWS_SRC,_C_SPOTLIGHT_SHADOWS:"#define "+i.S_SPOTLIGHT_SHADOWS_SRC+" "+i.S_SPOTLIGHT_SHADOWS_SRC,_FADE:"#define "+i.S_FADE_SRC+" "+i.S_FADE_SRC,Try3dLightingLib:i.S_TRY3D_LIGHTING_LIB,Try3dPrincipledLightingLib:i.S_TRY3D_PRINCIPLED_LIGHTING_LIB,Try3dShadowLib:i.S_TYR3D_SHADOW_LIB,Try3dCommonLib:i.S_TRY3D_COMMON_LIB};constructor(){this._m_Source={}}set(t,e){i.SOURCE_ENUM[t]?this._m_Source[t]=e:console.error("未知着色器类型:"+t)}get(t){return i.SOURCE_ENUM[t]?this._m_Source[t]:(console.error("未知着色器类型:"+t),null)}}},3250:(t,e,_)=>{_.d(e,{Z:()=>i});class i{static S_UNSIGNED_SHORT=1;static S_INT=2;static sizeof(t){switch(t){case i.S_UNSIGNED_SHORT:return 2;case i.S_INT:return 4}return-1}}},1135:(t,e,_)=>{_.d(e,{Z:()=>i});class i{constructor(t,e,_,i,n,s,a,r,o){this._m_Name=t,this._m_Loc=e,this._m_InternalFormat=_,this._m_Widht=i,this._m_Height=n,this._m_Border=s,this._m_Format=a,this._m_Type=r,this._m_Data=o}setName(t){this._m_Name=t}getName(){return this._m_Name}setLoc(t){this._m_Loc=t}getLoc(){return this._m_Loc}setInternalFormat(t){this._m_InternalFormat=t}getInternalFormat(){return this._m_InternalFormat}setWidth(t){this._m_Widht=t}getWidth(){return this._m_Widht}setHeihgt(t){this._m_Height=t}getHeight(){return this._m_Height}setBorder(t){this._m_Border=t}getBorder(){return this._m_Border}setFormat(t){this._m_Format=t}getFormat(){return this._m_Format}setType(t){this._m_Type=t}getType(){return this._m_Type}setData(t){this._m_Data=t}getData(){return this._m_Data}}},2860:(t,e,_)=>{_.d(e,{Z:()=>i});class i{constructor(t){this._m_Buffer=new Float32Array(t),this._m_Array=new Array(t).fill(0)}getArray(){return this._m_Array}getBufferData(){return this._m_Buffer.set(this._m_Array),this._m_Buffer}}},1143:(t,e,_)=>{_.d(e,{Z:()=>i});class i{constructor(t){this._m_Buffer=new Uint8Array(t),this._m_Array=new Array(t).fill(0)}getArray(){return this._m_Array}getBufferData(){return this._m_Buffer.set(this._m_Array),this._m_Buffer}}},8948:(t,e,_)=>{_.d(e,{Z:()=>n});var i=_(1940);class n extends i.Z{constructor(t){super(t),this._m_Bool=!1}valueOf(t){return this._m_Bool=t,this}compare(t){return!1}_upload(t,e,_){t.uniform1i(e,this._m_Bool)}}},9374:(t,e,_)=>{_.d(e,{Z:()=>n});var i=_(1940);class n extends i.Z{constructor(t){super(t),this._m_Float=0}valueOf(t){return this._m_Float=t,this}compare(t){return!1}_upload(t,e,_){t.uniform1f(e,this._m_Float)}}},6953:(t,e,_)=>{_.d(e,{Z:()=>s});var i=_(1940),n=_(2860);class s extends i.Z{static _S_TEMP_COLOR=new n.Z(4);static S_FILTERS={S_NEAREST:1,S_LINEAR:2,S_LINEAR_MIPMAP_NEAREST:3,S_NEAREST_MIPMAP_LINEAR:4,S_LINEAR_MIPMAP_LINEAR:5,S_NEAREST_MIPMAP_NEAREST:6};static S_WRAPS={S_REPEAT:1,S_CLAMP:2,S_CLAMP_TO_EDGE:3,S_CLAMP_TO_BORDER:4};static S_TEXTURE_FORMAT={};_m_Target;constructor(t){super(t),this._m_Scene=t;const e=t.getCanvas().getGLContext();s.S_TEXTURE_FORMAT={S_RGB:e.RGB,S_RGBA:e.RGBA,S_RGB16F:e.RGB16F,S_RGB32F:e.RGB32F,S_RGBA16F:e.RGBA16F,S_RGBA32F:e.RGBA32F,S_RGBE5:e.RGB9_E5,S_SRGB:e.SRGB,S_SRGB8:e.SRGB8,S_SRGBA:e.SRGB8_ALPHA8,S_DEPTH_COMPONENT24:e.DEPTH_COMPONENT24,S_DEPTH_COMPONENT:e.DEPTH_COMPONENT,S_SHORT:e.SHORT,S_INT:e.INT,S_BYTE:e.BYTE,S_UNSIGNED_BYTE:e.UNSIGNED_BYTE,S_FLOAT:e.FLOAT},this._m_Texture=e.createTexture(),this._setFilter(t,e.TEXTURE_MIN_FILTER,e.NEAREST),this._setFilter(t,e.TEXTURE_MAG_FILTER,e.LINEAR),this._m_Internalformat=e.RGBA16F,this._m_Format=e.RGBA,this._m_Type=e.FLOAT,this._m_UpdateImage=!1,this._m_Image=null,this._m_Rgbe=!1,this._m_Width=this._m_Scene.getCanvas().getWidth(),this._m_Height=this._m_Scene.getCanvas().getHeight(),this._m_FlipY=!1,this._m_Alignment=4,this._m_WrapS=null,this._m_WrapT=null,this._m_MinFilter=s.S_FILTERS.S_LINEAR_MIPMAP_NEAREST,this._m_MagFilter=s.S_FILTERS.S_LINEAR}target(t){this._m_Target=t}setTextureFormat(t,e,_){this._m_Internalformat=t,this._m_Format=e,this._m_Type=_}setAlignment(t){this._m_Alignment!=t&&(this._m_Alignment=t)}updateTextureFilter(){const t=this._m_Scene.getCanvas().getGLContext();this._m_WrapS&&this._setWrap(this._m_Scene,t.TEXTURE_WRAP_S,this._parseWrap(t,this._m_WrapS)),this._m_WrapT&&this._setWrap(this._m_Scene,t.TEXTURE_WRAP_T,this._parseWrap(t,this._m_WrapT)),this._m_MinFilter&&this._setFilter(this._m_Scene,t.TEXTURE_MIN_FILTER,this._parseFilter(t,this._m_MinFilter)),this._m_MagFilter&&this._setFilter(this._m_Scene,t.TEXTURE_MAG_FILTER,this._parseFilter(t,this._m_MagFilter))}uploadArrayData(t,e,_,i){const n=this._m_Scene.getCanvas().getGLContext();n.activeTexture(n.TEXTURE0+t),n.bindTexture(n.TEXTURE_2D,this._m_Texture),n.pixelStorei(n.UNPACK_FLIP_Y_WEBGL,this._m_FlipY),n.pixelStorei(n.UNPACK_ALIGNMENT,this._m_Alignment),n.texImage2D(n.TEXTURE_2D,0,this._m_Internalformat,e,_,0,this._m_Format,this._m_Type,i)}setFlipY(t){this._m_FlipY=t}genMipmap(t){const e=t.getCanvas().getGLContext();e.bindTexture(e.TEXTURE_2D,this._m_Texture),e.generateMipmap(e.TEXTURE_2D),e.bindTexture(e.TEXTURE_2D,null)}setFilter(t,e,_){this._m_MinFilter=e,this._m_MagFilter=_}_parseFilter(t,e){switch(e){case s.S_FILTERS.S_LINEAR:return t.LINEAR;case s.S_FILTERS.S_NEAREST:return t.NEAREST;case s.S_FILTERS.S_LINEAR_MIPMAP_NEAREST:return t.LINEAR_MIPMAP_NEAREST;case s.S_FILTERS.S_LINEAR_MIPMAP_LINEAR:return t.LINEAR_MIPMAP_LINEAR;case s.S_FILTERS.S_NEAREST_MIPMAP_LINEAR:return t.NEAREST_MIPMAP_LINEAR;case s.S_FILTERS.S_NEAREST_MIPMAP_NEAREST:return t.NEAREST_MIPMAP_NEAREST}return null}_setFilter(t,e,_){const i=t.getCanvas().getGLContext();i.bindTexture(i.TEXTURE_2D,this._m_Texture),i.texParameteri(i.TEXTURE_2D,e,_),i.bindTexture(i.TEXTURE_2D,null)}setWrap(t,e,_){this._m_WrapS=e,this._m_WrapT=_}_parseWrap(t,e){switch(e){case s.S_WRAPS.S_CLAMP:return t.CLAMP;case s.S_WRAPS.S_REPEAT:return t.REPEAT;case s.S_WRAPS.S_CLAMP_TO_EDGE:return t.CLAMP_TO_EDGE;case s.S_WRAPS.S_CLAMP_TO_BORDER:return t.CLAMP_TO_BORDER}return null}_setWrap(t,e,_){const i=t.getCanvas().getGLContext();i.bindTexture(i.TEXTURE_2D,this._m_Texture),i.texParameteri(i.TEXTURE_2D,e,_),i.bindTexture(i.TEXTURE_2D,null)}setPreloadColor(t,e){let _=s._S_TEMP_COLOR.getArray();e?(_[0]=Math.floor(255*e._m_X),_[1]=Math.floor(255*e._m_Y),_[2]=Math.floor(255*e._m_Z),_[3]=Math.floor(255*e._m_W)):(_[0]=0,_[1]=0,_[2]=0,_[3]=255);const i=t.getCanvas().getGLContext();i.bindTexture(i.TEXTURE_2D,this._m_Texture),i.texImage2D(i.TEXTURE_2D,0,this._m_Internalformat,1,1,0,this._m_Format,this._m_Type,s._S_TEMP_COLOR.getBufferData()),i.bindTexture(i.TEXTURE_2D,null)}setImageSrc(t,e,_){let i=_&&_.rgbe?RadianceLoader.rgbeImg():new Image;i.onload=()=>{this._m_Image=_&&_.rgbe?_.linearFloat?i.dataFloat:i.dataRGBE:i,_&&_.rgbe&&(this._m_Rgbe=!0),this._m_Width=i.width,this._m_Height=i.height,this._m_UpdateImage=!0;for(let t in this._m_OwnerFlags)this._m_OwnerFlags[t].owner.setParam(this._m_OwnerFlags[t].flag,this)},i.src=e}setImage(t,e,_){this._m_Image=_&&_.rgbe?_.linearFloat?e.dataFloat:e.dataRGBE:e,_&&_.rgbe&&(this._m_Rgbe=!0),this._m_Width=_&&null!=_.width?_.width:e.width,this._m_Height=_&&null!=_.height?_.height:e.height,this._m_UpdateImage=!0;for(let t in this._m_OwnerFlags)this._m_OwnerFlags[t].owner.setParam(this._m_OwnerFlags[t].flag,this)}_setImage(t,e,_){const i=t.getCanvas().getGLContext();i.bindTexture(i.TEXTURE_2D,this._m_Texture),i.pixelStorei(i.UNPACK_FLIP_Y_WEBGL,this._m_FlipY),this._m_Rgbe,i.texImage2D(i.TEXTURE_2D,0,this._m_Internalformat,this._m_Width,this._m_Height,0,this._m_Format,this._m_Type,e),i.bindTexture(i.TEXTURE_2D,null)}_upload(t,e,_){if(t.activeTexture(t.TEXTURE0+e),t.bindTexture(t.TEXTURE_2D,this._m_Texture),this._m_Target){let e=this._m_Scene.getRender().getFrameContext();t.bindFramebuffer(t.READ_FRAMEBUFFER,this._m_Target.getFrameBuffer()),t.copyTexImage2D(t.TEXTURE_2D,0,this._m_Internalformat,0,0,this._m_Target._m_Width,this._m_Target._m_Height,0),this._m_MinFilter!=s.S_FILTERS.S_NEAREST&&(this._m_MinFilter,s.S_FILTERS.S_LINEAR),t.bindFramebuffer(t.FRAMEBUFFER,e.m_LastFrameBuffer)}}compare(t){return!1}}},3245:(t,e,_)=>{_.d(e,{Z:()=>a});var i=_(1940),n=_(1143),s=(_(9881),_(8534));class a extends i.Z{static _S_TEMP_COLOR=new n.Z(4);static S_FILTERS={S_NEAREST:1,S_LINEAR:2,S_LINEAR_MIPMAP_NEAREST:3,S_NEAREST_MIPMAP_LINEAR:4,S_LINEAR_MIPMAP_LINEAR:5,S_NEAREST_MIPMAP_NEAREST:6};static S_WRAPS={S_REPEAT:1,S_CLAMP:2,S_CLAMP_TO_EDGE:3,S_CLAMP_TO_BORDER:4};static S_TEXTURE_FORMAT={};constructor(t){super(t),this._m_Scene=t;const e=t.getCanvas().getGLContext();a.S_TEXTURE_FORMAT={S_RGB:e.RGB,S_RGBA:e.RGBA,S_RGB16F:e.RGB16F,S_RGB32F:e.RGB32F,S_RGBA16F:e.RGBA16F,S_RGBA32F:e.RGBA32F,S_RGBE5:e.RGB9_E5,S_SRGB:e.SRGB,S_SRGB8:e.SRGB8,S_SRGBA:e.SRGB8_ALPHA8,S_SHORT:e.SHORT,S_INT:e.INT,S_BYTE:e.BYTE,S_UNSIGNED_BYTE:e.UNSIGNED_BYTE,S_FLOAT:e.FLOAT},this._m_Texture=e.createTexture(),this._setFilter(t,e.TEXTURE_MIN_FILTER,e.NEAREST),this._setFilter(t,e.TEXTURE_MAG_FILTER,e.LINEAR),this._m_Internalformat=e.RGBA,this._m_Format=e.RGBA,this._m_Type=e.UNSIGNED_BYTE,this._m_UpdateImage=!1,this._m_Image=null,this._m_Rgbe=!1,this._m_Width=-1,this._m_Height=-1,this._m_FlipY=!1,this._m_Alignment=4,this._m_WrapS=null,this._m_WrapT=null,this._m_MinFilter=a.S_FILTERS.S_LINEAR_MIPMAP_NEAREST,this._m_MagFilter=a.S_FILTERS.S_LINEAR}setTextureFormat(t,e,_){this._m_Internalformat=t,this._m_Format=e,this._m_Type=_}setAlignment(t){this._m_Alignment!=t&&(this._m_Alignment=t)}updateTextureFilter(){const t=this._m_Scene.getCanvas().getGLContext();this._m_WrapS&&this._setWrap(this._m_Scene,t.TEXTURE_WRAP_S,this._parseWrap(t,this._m_WrapS)),this._m_WrapT&&this._setWrap(this._m_Scene,t.TEXTURE_WRAP_T,this._parseWrap(t,this._m_WrapT)),this._m_MinFilter&&this._setFilter(this._m_Scene,t.TEXTURE_MIN_FILTER,this._parseFilter(t,this._m_MinFilter)),this._m_MagFilter&&this._setFilter(this._m_Scene,t.TEXTURE_MAG_FILTER,this._parseFilter(t,this._m_MagFilter))}uploadArrayData(t,e,_,i){const n=this._m_Scene.getCanvas().getGLContext();n.activeTexture(n.TEXTURE0+t),n.bindTexture(n.TEXTURE_2D,this._m_Texture),n.pixelStorei(n.UNPACK_FLIP_Y_WEBGL,this._m_FlipY),n.pixelStorei(n.UNPACK_ALIGNMENT,this._m_Alignment),n.texImage2D(n.TEXTURE_2D,0,this._m_Internalformat,e,_,0,this._m_Format,this._m_Type,i)}setFlipY(t){this._m_FlipY=t}genMipmap(t){const e=t.getCanvas().getGLContext();e.bindTexture(e.TEXTURE_2D,this._m_Texture),e.generateMipmap(e.TEXTURE_2D),e.bindTexture(e.TEXTURE_2D,null)}setFilter(t,e,_){this._m_MinFilter=e,this._m_MagFilter=_}_parseFilter(t,e){switch(e){case a.S_FILTERS.S_LINEAR:return t.LINEAR;case a.S_FILTERS.S_NEAREST:return t.NEAREST;case a.S_FILTERS.S_LINEAR_MIPMAP_NEAREST:return t.LINEAR_MIPMAP_NEAREST;case a.S_FILTERS.S_LINEAR_MIPMAP_LINEAR:return t.LINEAR_MIPMAP_LINEAR;case a.S_FILTERS.S_NEAREST_MIPMAP_LINEAR:return t.NEAREST_MIPMAP_LINEAR;case a.S_FILTERS.S_NEAREST_MIPMAP_NEAREST:return t.NEAREST_MIPMAP_NEAREST}return null}_setFilter(t,e,_){const i=t.getCanvas().getGLContext();i.bindTexture(i.TEXTURE_2D,this._m_Texture),i.texParameteri(i.TEXTURE_2D,e,_),i.bindTexture(i.TEXTURE_2D,null)}setWrap(t,e,_){this._m_WrapS=e,this._m_WrapT=_}_parseWrap(t,e){switch(e){case a.S_WRAPS.S_CLAMP:return t.CLAMP;case a.S_WRAPS.S_REPEAT:return t.REPEAT;case a.S_WRAPS.S_CLAMP_TO_EDGE:return t.CLAMP_TO_EDGE;case a.S_WRAPS.S_CLAMP_TO_BORDER:return t.CLAMP_TO_BORDER}return null}_setWrap(t,e,_){const i=t.getCanvas().getGLContext();i.bindTexture(i.TEXTURE_2D,this._m_Texture),i.texParameteri(i.TEXTURE_2D,e,_),i.bindTexture(i.TEXTURE_2D,null)}setPreloadColor(t,e){let _=a._S_TEMP_COLOR.getArray();e?(_[0]=Math.floor(255*e._m_X),_[1]=Math.floor(255*e._m_Y),_[2]=Math.floor(255*e._m_Z),_[3]=Math.floor(255*e._m_W)):(_[0]=0,_[1]=0,_[2]=0,_[3]=255);const i=t.getCanvas().getGLContext();i.bindTexture(i.TEXTURE_2D,this._m_Texture),i.texImage2D(i.TEXTURE_2D,0,this._m_Internalformat,1,1,0,this._m_Format,this._m_Type,a._S_TEMP_COLOR.getBufferData()),i.bindTexture(i.TEXTURE_2D,null)}setImageSrc(t,e,_){let i=_&&_.rgbe?s.Z.rgbeImg():new Image;i.onload=()=>{this._m_Image=_&&_.rgbe?_.linearFloat?i.dataFloat:i.dataRGBE:i,_&&_.rgbe&&(this._m_Rgbe=!0),this._m_Width=i.width,this._m_Height=i.height,this._m_UpdateImage=!0;for(let t in this._m_OwnerFlags)this._m_OwnerFlags[t].owner.setParam(this._m_OwnerFlags[t].flag,this)},i.src=e}setImage(t,e,_){this._m_Image=_&&_.rgbe?_.linearFloat?e.dataFloat:e.dataRGBE:e,_&&_.rgbe&&(this._m_Rgbe=!0),this._m_Width=_&&null!=_.width?_.width:e.width,this._m_Height=_&&null!=_.height?_.height:e.height,this._m_UpdateImage=!0;for(let t in this._m_OwnerFlags)this._m_OwnerFlags[t].owner.setParam(this._m_OwnerFlags[t].flag,this)}_setImage(t,e,_){const i=t.getCanvas().getGLContext();i.bindTexture(i.TEXTURE_2D,this._m_Texture),i.pixelStorei(i.UNPACK_FLIP_Y_WEBGL,this._m_FlipY),this._m_Rgbe,i.texImage2D(i.TEXTURE_2D,0,this._m_Internalformat,this._m_Width,this._m_Height,0,this._m_Format,this._m_Type,e),i.bindTexture(i.TEXTURE_2D,null)}_upload(t,e,_){t.activeTexture(t.TEXTURE0+e),this._m_UpdateImage&&(this._setImage(this._m_Scene,this._m_Image),this._m_MinFilter!=a.S_FILTERS.S_NEAREST&&this._m_MinFilter!=a.S_FILTERS.S_LINEAR&&this.genMipmap(this._m_Scene),this.updateTextureFilter(),this._m_UpdateImage=!1,this._m_Image=null,this._m_Width=this._m_Height=-1,this._m_Rgbe=!1),t.bindTexture(t.TEXTURE_2D,this._m_Texture)}compare(t){return!1}}},1940:(t,e,_)=>{_.d(e,{Z:()=>i});class i{constructor(t){this._m_OwnerFlags={}}compare(t){return!1}_upload(t,e,_){}owner(t,e){this._m_OwnerFlags[t.getId()]||(this._m_OwnerFlags[t.getId()]={owner:t,flag:e})}unowner(t){this._m_OwnerFlags[t.getId()]&&delete this._m_OwnerFlags[t.getId()]}}},1753:(t,e,_)=>{_.d(e,{Z:()=>n});var i=_(1940);class n extends i.Z{constructor(t){super(t),this._m_X=0,this._m_Y=0}valueFromXY(t,e){return this._m_X=t,this._m_Y=e,this}compare(t){return!1}_upload(t,e,_){t.uniform2f(e,this._m_X,this._m_Y)}}},8534:(t,e,_)=>{_.d(e,{Z:()=>n});var i=_(4933);class n{static rgbeImg(){return(new i.Z).HDRImage()}loadHDR(t,e){let _=n.rgbeImg();_.onload=()=>{e(_)},_.src=t}}},4933:(t,_,i)=>{function n(){var t,e,_=document.createElement("canvas"),i="t",n=1,m=2.2,l=null;return _.__defineGetter__("exposure",(function(){return n})),_.__defineSetter__("exposure",(function(_){n=_,l&&(h(l,n,m,e.data),t.putImageData(e,0,0))})),_.__defineGetter__("gamma",(function(){return m})),_.__defineSetter__("gamma",(function(_){m=_,l&&(h(l,n,m,e.data),t.putImageData(e,0,0))})),_.__defineGetter__("dataFloat",(function(){return o(l)})),_.__defineGetter__("dataRGBE",(function(){return l})),_.toHDRBlob=function(t,e,_){function i(t,e,_){var i=t.createShader(_);return t.shaderSource(i,e),t.compileShader(i),i}var n=e&&e.match(/rgb9_e5/i)?new Uint8Array(s(o(l)).buffer):new Uint8Array(l.buffer),a=this.width,r=this.height;if(a*r*4<n.byteLength)return console.error("not big enough.");var h=document.createElement("canvas");h.width=a,h.height=r;var m=h.getContext("webgl",{antialias:!1,alpha:!0,premultipliedAlpha:!1,preserveDrawingBuffer:!0}),u=m.createTexture();m.activeTexture(m.TEXTURE0),m.bindTexture(m.TEXTURE_2D,u),m.pixelStorei(m.UNPACK_FLIP_Y_WEBGL,!0),m.texParameteri(m.TEXTURE_2D,m.TEXTURE_MAG_FILTER,m.NEAREST),m.texParameteri(m.TEXTURE_2D,m.TEXTURE_MIN_FILTER,m.NEAREST),m.texParameteri(m.TEXTURE_2D,m.TEXTURE_WRAP_S,m.CLAMP_TO_EDGE),m.texParameteri(m.TEXTURE_2D,m.TEXTURE_WRAP_T,m.CLAMP_TO_EDGE),m.texImage2D(m.TEXTURE_2D,0,m.RGBA,a,r,0,m.RGBA,m.UNSIGNED_BYTE,new Uint8Array(n.buffer));var f=function(t,e,_){var n,s,a=t.createProgram();return t.attachShader(a,n=i(t,"precision highp float;\nattribute vec3 position;\nvarying vec2 tex;\nvoid main() { tex = position.xy/2.0+0.5; gl_Position = vec4(position, 1.0); }",t.VERTEX_SHADER)),t.attachShader(a,s=i(t,"precision highp float;\nprecision highp sampler2D;\nuniform sampler2D tx;\nvarying vec2 tex;\nvoid main() { gl_FragColor = texture2D(tx,tex); }",t.FRAGMENT_SHADER)),t.linkProgram(a),t.deleteShader(n),t.deleteShader(s),a}(m),c=m.getUniformLocation(f,"tx"),g=new Float32Array([-1,-1,0,1,-1,0,1,1,0,1,1,0,-1,1,0,-1,-1,0]),d=m.createBuffer();return m.enableVertexAttribArray(0),m.bindBuffer(m.ARRAY_BUFFER,d),m.bufferData(m.ARRAY_BUFFER,g,m.STATIC_DRAW),m.vertexAttribPointer(0,3,m.FLOAT,!1,0,0),m.useProgram(f),m.uniform1i(c,0),m.drawArrays(m.TRIANGLES,0,6),m.deleteTexture(u),m.deleteProgram(f),t?h.toBlob(t):void 0},_.__defineGetter__("src",(function(){return i})),_.__defineSetter__("src",(function(s){if(i=s,t&&t.clearRect(0,0,this.width,this.height),s.match(/\.hdr$/i))u=s,f=function(_,i,s){l=_,this.width=this.style.width=i,this.height=this.style.height=s,t=this.getContext("2d"),e=t.getImageData(0,0,i,s),h(_,n,m,e.data),t.putImageData(e,0,0),this.onload&&this.onload()}.bind(_),c=function(t,e){for(var _ in e)t[_]=e[_];return t}(new XMLHttpRequest,{responseType:"arraybuffer"}),c.onerror=f.bind(c,!1),c.onload=function(){if(this.status>=400)return this.onerror();for(var t,e="",_=0,i=new Uint8Array(this.response);!e.match(/\n\n[^\n]+\n/g);)e+=String.fromCharCode(i[_++]);if("32-bit_rle_rgbe"!=(t=e.match(/FORMAT=(.*)$/m)[1]))return console.warn("unknown format : "+t),this.onerror();for(var n=e.split(/\n/).reverse()[1].split(" "),s=1*n[3],a=1*n[1],r=new Uint8Array(s*a*4),o=0,h=0;h<a;h++){var m=i.slice(_,_+=4),l=[];if(2!=m[0]||2!=m[1]||128&m[2]){var u=s;for(_-=4;u>0;)if(r.set(i.slice(_,_+=4),o),1==r[o]&&1==r[o+1]&&1==r[o+2])for(r[o+3];c>0;c--)r.set(r.slice(o-4,o),o),o+=4,u--;else u--,o+=4}else{if((m[2]<<8)+m[3]!=s)return console.warn("HDR line mismatch .."),this.onerror();for(var c=0;c<4;c++)for(var g,d,S=c*s,p=(c+1)*s;S<p;)if((g=i.slice(_,_+=2))[0]>128)for(d=g[0]-128;d-- >0;)l[S++]=g[1];else for(d=g[0]-1,l[S++]=g[1];d-- >0;)l[S++]=i[_++];for(c=0;c<s;c++)r[o++]=l[c],r[o++]=l[c+s],r[o++]=l[c+2*s],r[o++]=l[c+3*s]}}f&&f(r,s,a)},c.open("GET",u,!0),c.send(null);else if(s.match(/\.rgb9_e5\.png$/i))(o=new Image).src=s,o.onload=function(){var _=document.createElement("canvas"),i=this.width=this.style.width=_.width=o.width,s=this.height=this.style.height=_.height=o.height,u=_.getContext("webgl"),f=u.createTexture();u.bindTexture(u.TEXTURE_2D,f),u.texImage2D(u.TEXTURE_2D,0,u.RGBA,u.RGBA,u.UNSIGNED_BYTE,o),fb=u.createFramebuffer(),u.bindFramebuffer(u.FRAMEBUFFER,fb),u.framebufferTexture2D(u.FRAMEBUFFER,u.COLOR_ATTACHMENT0,u.TEXTURE_2D,f,0);var c=new Uint8Array(i*s*4);u.readPixels(0,0,i,s,u.RGBA,u.UNSIGNED_BYTE,c),u.deleteTexture(f),u.deleteFramebuffer(fb),this.dataRAW=new Uint32Array(c.buffer),l=r(a(this.dataRAW)),t=this.getContext("2d"),e=t.getImageData(0,0,i,s),h(l,n,m,e.data),t.putImageData(e,0,0),this.onload&&this.onload()}.bind(_);else if(s.match(/\.hdr\.png$|\.rgbe\.png/i)){var o;(o=new Image).src=s,o.onload=function(){var _=document.createElement("canvas"),i=this.width=this.style.width=_.width=o.width,s=this.height=this.style.height=_.height=o.height,a=_.getContext("webgl"),r=a.createTexture();a.bindTexture(a.TEXTURE_2D,r),a.texImage2D(a.TEXTURE_2D,0,a.RGBA,a.RGBA,a.UNSIGNED_BYTE,o),fb=a.createFramebuffer(),a.bindFramebuffer(a.FRAMEBUFFER,fb),a.framebufferTexture2D(a.FRAMEBUFFER,a.COLOR_ATTACHMENT0,a.TEXTURE_2D,r,0);var u=new Uint8Array(i*s*4);a.readPixels(0,0,i,s,a.RGBA,a.UNSIGNED_BYTE,u),a.deleteTexture(r),a.deleteFramebuffer(fb),l=u,t=this.getContext("2d"),e=t.getImageData(0,0,i,s),h(l,n,m,e.data),t.putImageData(e,0,0),this.onload&&this.onload()}.bind(_)}var u,f,c})),_}function s(t,e){for(var _,i,n,s,a,r,o=t.byteLength/12|0,h=(e=e||new Uint32Array(o),0);h<o;h++)_=Math.min(32768,t[3*h]),i=Math.min(32768,t[3*h+1]),n=Math.min(32768,t[3*h+2]),s=Math.max(Math.max(_,i),n),a=Math.max(-16,Math.floor(Math.log2(s)))+16,r=Math.pow(2,a-24),511==Math.floor(s/r+.5)&&(r*=2,a+=1),e[h]=(Math.floor(_/r+.5)<<23)+(Math.floor(i/r+.5)<<14)+(Math.floor(n/r+.5)<<5)+(0|a);return e}function a(t,e){for(var _,i,n=t.byteLength>>2,s=(e=e||new Float32Array(3*n),0);s<n;s++)_=t[s],i=Math.pow(2,(31&_)-24),e[3*s]=(_>>>23)*i,e[3*s+1]=(_>>>14&511)*i,e[3*s+2]=(_>>>5&511)*i;return e}function r(t,_){for(var i,n,s,a,r,o=t.byteLength/12|0,h=(_=_||new Uint8Array(4*o),0);h<o;h++)i=t[3*h],n=t[3*h+1],s=t[3*h+2],a=Math.max(Math.max(i,n),s),e=Math.ceil(Math.log2(a)),r=Math.pow(2,e-8),_[4*h]=i/r|0,_[4*h+1]=n/r|0,_[4*h+2]=s/r|0,_[4*h+3]=e+128;return _}function o(t,e){for(var _,i=t.byteLength>>2,n=(e=e||new Float32Array(3*i),0);n<i;n++)_=Math.pow(2,t[4*n+3]-136),e[3*n]=t[4*n]*_,e[3*n+1]=t[4*n+1]*_,e[3*n+2]=t[4*n+2]*_;return e}function h(t,e,_,i){e=Math.pow(2,void 0===e?1:e)/2,void 0===_&&(_=2.2);for(var n,s=1/_,a=t.byteLength>>2,r=(i=i||new Uint8ClampedArray(4*a),0);r<a;r++)n=e*Math.pow(2,t[4*r+3]-136),i[4*r]=255*Math.pow(t[4*r]*n,s),i[4*r+1]=255*Math.pow(t[4*r+1]*n,s),i[4*r+2]=255*Math.pow(t[4*r+2]*n,s),i[4*r+3]=255;return i}i.d(_,{Z:()=>m}),n.floatToRgbe=r,n.rgbeToFloat=o,n.floatToRgb9_e5=s,n.rgb9_e5ToFloat=a,n.rgbeToLDR=h,n.floatToLDR=function(t,e,_,i){e=Math.pow(2,void 0===e?1:e)/2,void 0===_&&(_=2.2);for(var n=1/_,s=t.byteLength/12|0,a=(i=i||new Uint8ClampedArray(4*s),0);a<s;a++)i[4*a]=255*Math.pow(t[3*a]*e,n),i[4*a+1]=255*Math.pow(t[3*a+1]*e,n),i[4*a+2]=255*Math.pow(t[3*a+2]*e,n),i[4*a+3]=255;return i};class m{constructor(t){this.HDRImage=n}}}},__webpack_module_cache__={};function __webpack_require__(t){var e=__webpack_module_cache__[t];if(void 0!==e)return e.exports;var _=__webpack_module_cache__[t]={exports:{}};return __webpack_modules__[t](_,_.exports,__webpack_require__),_.exports}__webpack_require__.d=(t,e)=>{for(var _ in e)__webpack_require__.o(e,_)&&!__webpack_require__.o(t,_)&&Object.defineProperty(t,_,{enumerable:!0,get:e[_]})},__webpack_require__.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e);var __webpack_exports__={};return(()=>{__webpack_require__.d(__webpack_exports__,{default:()=>le});var e=__webpack_require__(3815),_=__webpack_require__(2432),i=__webpack_require__(8803);class n extends e.Z{constructor(t,e){if(super(t,e),e.version=e.version||"webgl2",this._m_Canvas=e.canvas,this._m_Canvas){if(this._m_GL=this._m_Canvas.getContext(e.version,{antialias:!!e.antialias||!0,depth:!0,powerPreference:!!e.powerPreference||"high-performance",alpha:!!e.alpha||!1}),this._m_GL){if(this._m_GL.getExtension("OES_texture_float_linear"),"webgl2"==e.version)this._m_GL.getExtension("EXT_color_buffer_float");else if(this._m_GL.getExtension("OES_texture_float"),this._m_GL.getExtension("OES_texture_half_float"),this._m_GL.getExtension("OES_texture_half_float_linear"),e.mobile&&this._m_GL.getExtension("WEBGL_color_buffer_float"),!this._m_GL.getExtension("WEBGL_depth_texture"))return console.log("Extension Depth texture is not working"),void alert(":( Sorry, Your browser doesn't support depth texture extension. Please browse to webglreport.com to see more information.");let t=this._m_GL.getExtension("EXT_texture_filter_anisotropic");if(t||console.log("不支持各向异性拓展!"),t){let e=this._m_GL.getParameter(t.MAX_TEXTURE_MAX_ANISOTROPY_EXT);console.log("maxAnisotropy:"+e)}this._init()}else i.Z.error("浏览器不支持"+e.version+"!");this._sizeCanvas(this._m_Canvas.parentNode,this._m_Canvas)}}_sizeCanvas(t,e){let _=this,n=window.devicePixelRatio;console.log("dpr:"+n);let s=function(){t?(e.width=t.clientWidth*n,e.height=t.clientHeight*n,e.style.width=t.clientWidth+"px",e.style.height=t.clientHeight+"px"):(e.width=document.documentElement.clientWidth*n,e.height=document.documentElement.clientHeight*n,e.style.width=document.documentElement.clientWidth+"px",e.style.height=document.documentElement.clientWidth+"px"),i.Z.debug("改变大小:"+e.width+","+e.height),_.fire("resize",[e.width,e.height])};window.onresize=s,s()}getCanvasElement(){return this._m_Canvas}_init(){let t=this._m_GL;t.clearColor(.3,.3,.3,1),t.enable(t.DEPTH_TEST),t.enable(t.CULL_FACE),t.disable(t.BLEND),t.cullFace(t.BACK),t.depthFunc(t.LEQUAL)}setClearColor(t,e,_,i){this._m_GL.clearColor(t,e,_,i)}getWidth(){return this._m_Canvas.width}getDPRWidth(){return this._m_Canvas.width/(1/window.devicePixelRatio)}getHeight(){return this._m_Canvas.height}getDPRHeight(){return this._m_Canvas.height/(1/window.devicePixelRatio)}getGLContext(){return this._m_GL}}var s=__webpack_require__(4607);class a{constructor(){this._head=[],this._headLength=0,this._tail=[],this._index=0,this._length=0}get length(){return this._length}shift(){if(this._index>=this._headLength){const t=this._head;if(t.length=0,this._head=this._tail,this._tail=t,this._index=0,this._headLength=this._head.length,!this._headLength)return}const t=this._head[this._index];return this._index<0?delete this._head[this._index++]:this._head[this._index++]=void 0,this._length--,t}push(t){return this._length++,this._tail.push(t),this}unshift(t){return this._head[--this._index]=t,this._length++,this}}var r=__webpack_require__(1760),o=__webpack_require__(2245),h=__webpack_require__(4963),m=__webpack_require__(3792);class l extends r.Z{getType(){return"Probe"}getTypeId(){return 100}constructor(t,e){super(t,e),this._m_Position=new m.Z}setPositionFromXYZ(t,e,_){this._m_Position.setToInXYZ(t,e,_)}getPosition(){return this._m_Position}}var u=__webpack_require__(8333),f=__webpack_require__(73);class c extends u.Z{static _S_RADIUS_EPSILON=1.00001;constructor(t){super(t),this._m_Radius=0}setRaiuds(t){this._m_Radius=t}getRadius(){return this._m_Radius}getType(){return u.Z.S_TYPE_SPHERE}whichSide(t){let e=t.distance(this._m_Center);return e>this._m_Radius?f.Z.S_SIDE_POSITIVE:e<-this._m_Radius?f.Z.S_SIDE_NEGATIVE:f.Z.S_SIDE_NONE}}var g=__webpack_require__(2860);class d extends l{getType(){return"GIProbe"}getTypeId(){return 4}constructor(t,e){super(t,e),this._m_ShCoeffs=null,this._m_ShCoeffsBufferData=null,this._m_PrefilterEnvMap=null,this._m_PrefilterMipmap=0,this._m_Bounding=new c}setPrefilterMipmap(t){this._m_PrefilterMipmap=t}getPrefilterMipmap(){return this._m_PrefilterMipmap}setRadius(t){this._m_Bounding.setRaiuds(t)}getRadius(){return this._m_Bounding.getRadius()}setShCoeffs(t){this._m_ShCoeffs=t,this._m_ShCoeffsBufferData=new g.Z(27);let e=this._m_ShCoeffsBufferData.getArray();for(let _=0,i=0;_<t.length;_++)e[i++]=t[_]._m_X,e[i++]=t[_]._m_Y,e[i++]=t[_]._m_Z}getShCoeffs(){return this._m_ShCoeffs}getShCoeffsBufferData(){return this._m_ShCoeffsBufferData}setPrefilterEnvMap(t){this._m_PrefilterEnvMap=t}getPrefilterEnvMap(){return this._m_PrefilterEnvMap}}class S extends e.Z{getType(){return"Scene"}constructor(t){super(null,t),this._m_TaskQueue=new a,this._m_Canvas=new n(this,{id:"default_canvas",canvas:t.cavnas}),this._m_Render=new _.Z(this,{id:"default_render"}),this._m_MainCamera=new s.Z(this,{id:"mainCamera"}),this._m_FrustumCullingCamera=this._m_MainCamera,this._m_MainCamera.setIsRenderingCamera(!0),this._m_Nodes=[],this._m_NodeIds={},this._m_Lights=[],this._m_AmbientLightColor=new m.Z(1,1,1),this._m_EnableLights=[],this._m_VisLights=[],this._m_LightIds={},this._m_EnableLightIds={},this._m_GIProbes=[],this._m_GIProbeIds={},this._m_RefProbes=[],this._m_RefProbeIds={},this._m_Render.startUp()}get AmbientLightColor(){return this._m_AmbientLightColor}setAmbientLightColor(t,e,_){this._m_AmbientLightColor.setToInXYZ(t,e,_)}getLights(){return this._m_Lights}getEnableLights(){return this._m_EnableLights}enableLight(t){this._m_EnableLightIds[t.getId()]||(this._m_EnableLightIds[t.getId()]=t,t.enable(),this._m_EnableLights.push(t))}disableLight(t){if(this._m_EnableLightIds[t.getId()]){this._m_EnableLightIds[t.getId()]=null,t.disable();let e=this._m_EnableLights.indexOf(t);e>-1&&this._m_EnableLights.splice(e,1)}}getVisLights(){return this._m_VisLights}getLight(t){return this._m_LightIds[t]}getGIProbes(){return this._m_GIProbes}enableGIProbes(){return this._m_GIProbes.length>0&&this._m_GIProbes[0].isEnable()}getGIProbe(t){return this._m_GIProbeIds[t]}scheduleTask(t,e){this._m_TaskQueue.push(t),this._m_TaskQueue.push(e)}runTasks(t=-1){let e,_,i=t>0?(new Date).getTime():0,n=0,s=this._m_TaskQueue.length;for(;s>0&&(t<0||i<t);)e=this._m_TaskQueue.shift(),_=this._m_TaskQueue.shift(),s-=2,_?e.call(_):e(),t>0&&(i=(new Date).getTime()),n++;return n}getMainCamera(){return this._m_MainCamera}setMainCamera(t){this._m_MainCamera!=t&&this._m_MainCamera&&this._m_MainCamera.setIsRenderingCamera(!1),this._m_MainCamera=t,this._m_MainCamera.setIsRenderingCamera(!0)}setFrustumCullingCamera(t){this._m_FrustumCullingCamera=t}getFrustumCullingCamera(){return this._m_FrustumCullingCamera}getRender(){return this._m_Render}getCanvas(){return this._m_Canvas}setSky(t){null!=t&&"SkyBox"!=t.getType()||this._m_Render.setSky(t)}getSky(){return this._m_Render.getSky()}addSceneNode(t){t instanceof o.Z&&!(t instanceof h.Z)&&(this._m_NodeIds[t.getId()]||(this._m_Nodes.push(t),this._m_NodeIds[t.getId()]=t))}getSceneNode(t){return this._m_Nodes[t]}getSceneNodes(){return this._m_Nodes}addComponentInScene(t){t instanceof e.Z?this._m_ComponentIDs[t.getId()]?console.warn("组件[["+t.getId()+"]]已存在!!"):("Scene"!=t.getType()&&(this._m_ComponentIDs[t.getId()]=t,this._m_Components.push(t)),t.isDrawable&&t.isDrawable()&&this._m_Render.addDrawable(t),t instanceof r.Z&&(t instanceof d?this._m_GIProbeIds[t.getId()]||(this._m_GIProbes.push(t),this._m_GIProbeIds[t.getId()]=t):this._m_LightIds[t.getId()]||(this._m_Lights.push(t),this._m_LightIds[t.getId()]=t))):console.error("component必须是一个Component对象!!")}removeComponentInScene(t){t instanceof e.Z&&this._m_ComponentIDs[t.getId()]&&(this._m_ComponentIDs[t.getId()]=null,this._m_Components.remove(t),t.isDrawable&&t.isDrawable()&&this._m_Render.removeDrawable(t))}_gatherVisDrawable(t,e){t.isDrawable&&t.isDrawable()?e.push(t):t.getChildren().length>0&&t.getChildren().forEach((t=>{this._gatherVisDrawable(t,e)}))}_frustumCulling(t,e){if(t.inFrustum(this._m_FrustumCullingCamera))if(t.isDrawable&&t.isDrawable())e.push(t);else if(t.getChildren().length>0){let _=this._m_FrustumCullingCamera.getFrustumMask();t.getChildren().forEach((t=>{t instanceof r.Z||(t.getFilterFlag()==o.Z.S_DYNAMIC?t.getCullingFlags()&o.Z.S_DEFAULT_FRUSTUM_CULLING&&(this._m_FrustumCullingCamera.setFrustumMask(_),this._frustumCulling(t,e)):t.getFilterFlag()==o.Z.S_NEVER&&this._gatherVisDrawable(t,e))}))}}update(t){this.runTasks(),this.fire("update",[t])}render(t){let e=this._m_Render.getVisDrawables();if(e.length=0,this.fire("render",[t]),this._m_Nodes.forEach((t=>{t.getFilterFlag()==o.Z.S_DYNAMIC?t.getCullingFlags()&o.Z.S_DEFAULT_FRUSTUM_CULLING&&(this._m_FrustumCullingCamera.setFrustumMask(0),this._frustumCulling(t,e)):t.getFilterFlag()==o.Z.S_NEVER&&this._gatherVisDrawable(t,e)})),this._m_VisLights.length=0,this._m_EnableLights.length>0){let t=this._m_FrustumCullingCamera.getFrustumMask();this._m_FrustumCullingCamera.setFrustumMask(0),this._m_EnableLights.forEach((t=>{"GIProbe"!=t.getType()&&"RefProbe"!=t.getType()&&(t._m_Mark^=r.Z.S_VISIBLE_LIGHT,t.getFilterFlag()==o.Z.S_DYNAMIC?t.inFrustum(this._m_FrustumCullingCamera)&&(t._m_Mark|=r.Z.S_VISIBLE_LIGHT,this._m_VisLights.push(t)):t.getFilterFlag()==o.Z.S_NEVER&&(t._m_Mark|=r.Z.S_VISIBLE_LIGHT,this._m_VisLights.push(t)))})),this._m_FrustumCullingCamera.setFrustumMask(t)}this._m_Render.render(t)}}class p extends o.Z{getType(){return"Bone"}constructor(t,e){super(t,e),this._m_Bind=null}bind(t){this._m_Bind=t}getBind(){return this._m_Bind}_updateLocalMatrix(){super._updateLocalMatrix(),this._m_Bind&&this._m_Bind.actived()}}class C extends e.Z{getType(){return"AnimationProcessor"}constructor(t,e){super(t,e),this._m_AnimationActions=[],this._m_AnimationActionMaps={},this._m_ActiveAnimationActions=[];let _=-1;this._m_Scene.on("update",(t=>{if(_=this._m_ActiveAnimationActions.length,_>0)for(let e=0;e<_;e++)this._m_ActiveAnimationActions[e].update(t)}))}_activeAnimationAction(t){this._m_ActiveAnimationActions.push(t)}_disableAnimationAction(t){let e=this._m_ActiveAnimationActions.indexOf(t);e>-1&&this._m_ActiveAnimationActions.splice(e,1)}addAnimationAction(t){this._m_AnimationActionMaps[t.getName()]||(this._m_AnimationActionMaps[t.getName()]=t,this._m_AnimationActions.push(t),t._setProcessor(this))}getAnimationAction(t){return this._m_AnimationActionMaps[t]}getAnimationActionAtIndex(t){return t>=this._m_AnimationActions.length?null:this._m_AnimationActions[t]}getAnimationActions(){return this._m_AnimationActions}}class T{static S_LOOP=1;static S_DONT_LOOP=2;static S_BACK_AND_FORTH=3;static S_PLAY=1;static S_PAUSE=2;static S_STOP=4;constructor(t){this._m_Name=t,this._m_Time=0,this._m_TimeLength=0,this._m_Mode=T.S_LOOP,this._m_TimeMode=1,this._m_Processor=null,this._m_TrackMixer=null,this._m_State=T.S_STOP}setAnimationMode(t){}_setProcessor(t){this._m_Processor=t}getName(){return this._m_Name}getAnimationLength(){return this._m_TimeLength}setTrackMixer(t){this._m_TrackMixer=t,this._m_Time=0,this._m_TimeLength=-Number.MAX_VALUE,t.getClips().forEach((t=>{this._m_TimeLength=Math.max(t.getLength(),this._m_TimeLength)})),this._m_TimeLength==-Number.MAX_VALUE&&(this._m_TimeLength=0),i.Z.log("[["+this.getName()+"]]动画时长:"+this._m_TimeLength+"s")}play(){this._m_State!=T.S_PLAY&&(this._m_Processor._activeAnimationAction(this),this._m_State=T.S_PLAY)}pause(){this._m_State!=T.S_PAUSE&&(this._m_State==T.S_PLAY&&this._m_Processor._disableAnimationAction(this),this._m_State=T.S_PAUSE)}stop(){this._m_State!=T.S_STOP&&(this._m_State==T.S_PLAY&&this._m_Processor._disableAnimationAction(this),this._m_State=T.S_STOP,this._m_Time=0)}setTime(t){this._m_Time=t,this.update(.1)}update(t){if(this._m_Time>=this._m_TimeLength){if(this._m_Mode==T.S_DONT_LOOP)return void(this._m_TimeMode=1);this._m_Mode==T.S_LOOP&&(this._m_Time=0,this._m_TimeMode=1),this._m_Mode==T.S_BACK_AND_FORTH&&(this._m_Time=this._m_TimeLength,this._m_TimeMode=-1)}this._m_Time+=t*this._m_TimeMode,this._m_TrackMixer.update(this._m_Time)}}class E{constructor(t){this._m_PathName=t,this._m_Keyframes=[],this._m_ActionTrack=null}getLength(){let t=-Number.MAX_VALUE;return this._m_Keyframes.forEach((e=>{t=Math.max(t,e.getTime())})),t==-Number.MAX_VALUE?0:t}addKeyframe(t){this._m_Keyframes.push(t)}getPathName(){return this._m_PathName}setActionTrack(t){this._m_ActionTrack=t}update(t){let e=0,_=null,i=this._m_Keyframes.length;for(;e<i&&this._m_Keyframes[e].getTime()<t;)e++;if(0==e)_=this._m_Keyframes[e],this._m_ActionTrack.setValue(_.getValue());else if(e==i)e-=1,_=this._m_Keyframes[e],this._m_ActionTrack.setValue(_.getValue());else{let i=this._m_Keyframes[e-1],n=this._m_Keyframes[e],s=1/(n.getTime()-i.getTime());_=i.interpolation(i.getValue(),n.getValue(),(t-i.getTime())*s),this._m_ActionTrack.setValue(_)}}}var D=__webpack_require__(3121),P=__webpack_require__(9085),M=__webpack_require__(1441),x=__webpack_require__(5657);class A extends D.Z{constructor(t,e){super(t,e),this._m_Skeleton=null}setSkeleton(t){this._m_Skeleton=t}draw(t){let e=this._m_Scene.getCanvas().getGLContext();if(this._m_Skeleton){if(!this._m_Skeleton.isFinished())return;this._m_Skeleton.owner(e,t)||i.Z.log("错误持有!"),this._m_Skeleton.updateJoints(e,t)}let _=t.m_LastSubShader.getContextVars(),n=null,s=null;for(let i in _)switch(i){case P.Z.S_MODEL_MATRIX_SRC:e[_[i].fun](_[i].loc,!1,this.getWorldMatrix().getBufferData());break;case P.Z.S_MV_SRC:n=t.getCalcContext(P.Z.S_VIEW_MATRIX_SRC),M.Z.multiplyMM(x.Z.S_TEMP_MAT4,0,n,0,this.getWorldMatrix(),0),_[i].fun(_[i].loc,!1,x.Z.S_TEMP_MAT4.getBufferData());break;case P.Z.S_MVP_SRC:n=t.getCalcContext(P.Z.S_VIEW_MATRIX_SRC),s=t.getCalcContext(P.Z.S_PROJECT_MATRIX_SRC),M.Z.multiplyMM(x.Z.S_TEMP_MAT4,0,n,0,this.getWorldMatrix(),0),M.Z.multiplyMM(x.Z.S_TEMP_MAT4_1,0,s,0,n,0),e[_[i].fun](_[i].loc,!1,x.Z.S_TEMP_MAT4_1.getBufferData())}this._m_Mesh.draw(e)}}class L{constructor(t){this._m_Name=t,this._m_Joints=[],this._m_ActiveJoints=[],this._m_IsReady=!1,this._m_Finished=!0,this._m_OwnerShaders={}}init(t,e){this._m_IsReady||(this._m_IsReady=!0,this._m_Joints.forEach((_=>{_.setRef(e.m_LastSubShader.getRef(t,P.Z.S_JOINTS_SRC+"["+_.getNum()+"]")),_.init(t)})))}isReady(){return this._m_IsReady}owner(t,e){return this._m_OwnerShaders[e.m_LastSubShader.getSId()]||(this._m_Joints.forEach((_=>{_.addRef(e.m_LastSubShader.getSId(),e.m_LastSubShader.getRef(t,P.Z.S_JOINTS_SRC+"["+_.getNum()+"]")),_.init(t,e.m_LastSubShader.getSId())})),this._m_OwnerShaders[e.m_LastSubShader.getSId()]=!0,i.Z.log("持有!")),!0}isFinished(){return this._m_Finished}finished(){this._m_Finished=!0}getActiveJoints(){return this._m_ActiveJoints}addActiveJoint(t){this._m_ActiveJoints.push(t)}setJoints(t){this._m_Joints.length=0,t.forEach((t=>{this._m_Joints.push(t),t.setOwnerSkeleton(this)}))}getJoints(){return this._m_Joints}addJointAtIndex(t,e){this._m_Joints[t]=e,e.setOwnerSkeleton(this)}addJoint(t){this._m_Joints.push(t),t.setOwnerSkeleton(this)}updateJoints(t,e){this._m_ActiveJoints.length>0&&(this._m_ActiveJoints.forEach((_=>{_.update(t,e.m_LastSubShader.getSId()),_.disable()})),this._m_ActiveJoints.length=0)}}var R=__webpack_require__(6834),I=__webpack_require__(7014),v=__webpack_require__(9881);class w{constructor(t,e){this._m_OwnerSkeleton=null,this._m_Bone=null,this._m_Refs={},this._m_Id=t,this._m_Num=e,this._m_RelMat4=new M.Z,this._m_JointMat4=new M.Z,this._m_IsActive=!1}actived(){this._m_IsActive||(this._m_IsActive=!0,this._m_OwnerSkeleton.addActiveJoint(this))}disable(){this._m_IsActive=!1}addRef(t,e){this._m_Refs[t]?this._m_Refs[t]!=e&&i.Z.warn("ref不等于最新ref:"+e):this._m_Refs[t]=e}init(t,e){this.update(t,e)}getId(){return this._m_Id}getNum(){return this._m_Num}setOwnerSkeleton(t){this._m_OwnerSkeleton=t}link(t){t!=this._m_Bone&&t&&(this._m_Bone=t,this._m_Bone.bind(this))}setJointSpace(t){this._m_RelMat4.setArray(t)}getJointMat4(){return this._m_JointMat4}update(t,e){this._m_Bone?(M.Z.multiplyMM(this._m_JointMat4,0,this._m_Bone.getWorldMatrix(),0,this._m_RelMat4,0),t.uniformMatrix4fv(this._m_Refs[e],!1,this._m_JointMat4.getBufferData())):i.Z.log("joint_"+this.getNum()+";id:"+this.getId()+"未关联Bone!")}}class F{constructor(t,e){switch(this._m_Node=t,this._m_Node||i.Z.warn("node为null:"),this.setValue=null,this.getValue=null,e){case"rotation":this.setValue=e=>{t.setLocalRotation(e)},this.getValue=()=>t.getLocalRotation();break;case"translation":this.setValue=e=>{t.setLocalTranslation(e)},this.getValue=()=>t.getLocalTranslation();break;case"scale":this.setValue=e=>{t.setLocalScale(e)},this.getValue=()=>t.getLocalScale()}}static bind(t,e){return new F(t,e)}static createTrack(t,e){t.setActionTrack(F.bind(e,t.getPathName()))}}class b{constructor(){this._m_Clips=[]}addClip(t){this._m_Clips.push(t)}getClip(t){return this._m_Clips[t]}getClips(){return this._m_Clips}update(t){this._m_Clips.forEach((e=>{e.update(t)}))}}class O{static S_INTERPOLATION_MODE={LINEAR:0};static S_LINEAR="LINEAR";constructor(t){this._m_Time=t,this._m_Value=null,this._m_InterpolationMode=O.S_INTERPOLATION_MODE[O.S_LINEAR],this.interpolation=null}getTime(){return this._m_Time}getValue(){return this._m_Value}setInterpolationMode(t){this._m_InterpolationMode=O.S_INTERPOLATION_MODE[t]}}class Z extends O{constructor(t,e,_,i){super(t),this._m_Value=new m.Z(e,_,i)}setInterpolationMode(t){super.setInterpolationMode(t),t==O.S_LINEAR&&(this.interpolation=m.Z.inter)}}class B extends O{constructor(t,e,_,i,n){super(t),this._m_Value=new R.Z(e,_,i,n)}setInterpolationMode(t){super.setInterpolationMode(t),t==O.S_LINEAR&&(this.interpolation=R.Z.slerp)}}class y{static S_KEY_FRAME={scale:Z,rotation:B,translation:Z}}var N=__webpack_require__(9692),V=__webpack_require__(1575);class G{static CHASECAM_DOWN="ChaseCamDown";static CHASECAM_UP="ChaseCamUp";static CHASECAM_ZOOMIN="ChaseCamZoomIn";static CHASECAM_ZOOMOUT="ChaseCamZoomOut";static CHASECAM_MOVELEFT="ChaseCamMoveLeft";static CHASECAM_MOVERIGHT="ChaseCamMoveRight";static CHASECAM_TOGGLEROTATE="ChaseCamToggleRotate";static CAMERA_MOVELEFT="CameraMoveLeft";static CAMERA_MOVERIGHT="CameraMoveRight";static CAMERA_MOVEFRONT="CameraMoveFront";static CAMERA_MOVEBACK="CameraMoveBack";static FLYCAM_LEFT="FLYCAM_Left";static FLYCAM_RIGHT="FLYCAM_Right";static FLYCAM_UP="FLYCAM_Up";static FLYCAM_DOWN="FLYCAM_Down";static FLYCAM_STRAFELEFT="FLYCAM_StrafeLeft";static FLYCAM_STRAFERIGHT="FLYCAM_StrafeRight";static FLYCAM_FORWARD="FLYCAM_Forward";static FLYCAM_BACKWARD="FLYCAM_Backward";static FLYCAM_ZOOMIN="FLYCAM_ZoomIn";static FLYCAM_ZOOMOUT="FLYCAM_ZoomOut";static FLYCAM_ROTATEDRAG="FLYCAM_RotateDrag";static FLYCAM_RISE="FLYCAM_Rise";static FLYCAM_LOWER="FLYCAM_Lower";static FLYCAM_INVERTY="FLYCAM_InvertY"}class U extends e.Z{static s_Inputs={};static S_KEY_0=0;static S_KEY_1=1;static S_KEY_2=2;static S_KEY_3=3;static S_KEY_4=4;static S_KEY_5=5;static S_KEY_6=6;static S_KEY_7=7;static S_KEY_8=8;static S_KEY_9=9;static S_KEY_A=10;static S_KEY_B=11;static S_KEY_C=12;static S_KEY_D=13;static S_KEY_E=14;static S_KEY_F=15;static S_KEY_G=16;static S_KEY_H=17;static S_KEY_I=18;static S_KEY_J=19;static S_KEY_K=20;static S_KEY_L=21;static S_KEY_M=22;static S_KEY_N=23;static S_KEY_O=24;static S_KEY_P=25;static S_KEY_Q=26;static S_KEY_R=27;static S_KEY_S=28;static S_KEY_T=29;static S_KEY_U=30;static S_KEY_V=31;static S_KEY_W=32;static S_KEY_X=33;static S_KEY_Y=34;static S_KEY_Z=35;static S_KEYS={0:U.S_KEY_0,1:U.S_KEY_1,2:U.S_KEY_2,3:U.S_KEY_3,4:U.S_KEY_4,5:U.S_KEY_5,6:U.S_KEY_6,7:U.S_KEY_7,8:U.S_KEY_8,9:U.S_KEY_9,a:U.S_KEY_A,b:U.S_KEY_B,c:U.S_KEY_C,d:U.S_KEY_D,e:U.S_KEY_E,f:U.S_KEY_F,g:U.S_KEY_G,h:U.S_KEY_H,i:U.S_KEY_I,j:U.S_KEY_J,k:U.S_KEY_K,l:U.S_KEY_L,m:U.S_KEY_M,n:U.S_KEY_N,o:U.S_KEY_O,p:U.S_KEY_P,q:U.S_KEY_Q,r:U.S_KEY_R,s:U.S_KEY_S,t:U.S_KEY_T,u:U.S_KEY_U,v:U.S_KEY_V,w:U.S_KEY_W,x:U.S_KEY_X,y:U.S_KEY_Y,z:U.S_KEY_Z};static S_MOUSE_BUTTON0_DOWN=36;static S_MOUSE_BUTTON1_DOWN=37;static S_MOUSE_BUTTON2_DOWN=38;static S_MOUSE_BUTTON0_UP=39;static S_MOUSE_BUTTON1_UP=40;static S_MOUSE_BUTTON2_UP=41;static S_MOUSE_BUTTON0=42;static S_MOUSE_BUTTON1=43;static S_MOUSE_BUTTON2=44;static S_INPUTS={};static getInput(t,e){if(U.S_INPUTS[e.id])return U.S_INPUTS[e.id];{let _=new U(t,e);return U.S_INPUTS[e.id]=_,_}}constructor(t,e){super(t,e);let _=this._m_Scene.getCanvas().getCanvasElement();this._keys={},this._mouseButtons={},this._mouseCoords=null,this._wheelDelta=0,this._amountX=0,this._amountY=0,this._mouseStartDownCoords=null,_.oncontextmenu=function(){return!1},_.onkeydown=t=>{this._keys[U.S_KEYS[t.key]]=!0,this.fire("keydown",[U.S_KEYS[t.key]])},_.onkeyup=t=>{this._keys[U.S_KEYS[t.key]]=!1,this.fire("keyup",[U.S_KEYS[t.key]])},_.onkeypress=t=>{this.fire("keypress",[U.S_KEYS[t.key]])};let i=!1;_.onmousedown=t=>{i=!0,this._wheelDelta=0,this._amountX=0,this._amountY=0,this._mouseCoords=this._getClickCoordsWithinElement(t),this._mouseStartDownCoords=this._mouseCoords;let e=null;switch(t.which||t.button+1){case 1:this._mouseButtons[U.S_MOUSE_BUTTON0]=!0,e=U.S_MOUSE_BUTTON0_DOWN;break;case 2:this._mouseButtons[U.S_MOUSE_BUTTON1]=!0,e=U.S_MOUSE_BUTTON1_DOWN;break;case 3:this._mouseButtons[U.S_MOUSE_BUTTON2]=!0,e=U.S_MOUSE_BUTTON2_DOWN}this.fire("mousedown",[e])},_.onmouseup=t=>{i=!1,this._wheelDelta=0,this._amountX=0,this._amountY=0,this._mouseCoords=this._getClickCoordsWithinElement(t),this._mouseStartDownCoords=this._mouseCoords;let e=null;switch(t.which||t.button+1){case 1:this._mouseButtons[U.S_MOUSE_BUTTON0]=!1,e=U.S_MOUSE_BUTTON0_UP;break;case 2:this._mouseButtons[U.S_MOUSE_BUTTON1]=!1,e=U.S_MOUSE_BUTTON1_UP;break;case 3:this._mouseButtons[U.S_MOUSE_BUTTON2]=!1,e=U.S_MOUSE_BUTTON2_UP}this.fire("mouseup",[e])};let n=!1;_.onmouseenter=t=>{this._wheelDelta=0,this._amountX=0,this._amountY=0,n=!0,this._mouseCoords=this._getClickCoordsWithinElement(t)},_.onmouseout=t=>{this._wheelDelta=0,this._amountX=0,this._amountY=0,n=!1,this._mouseCoords=this._getClickCoordsWithinElement(t)},_.onmousemove=t=>{n&&(this._wheelDelta=0,this._mouseCoords=this._getClickCoordsWithinElement(t),i&&(this._amountX=this._mouseCoords[0]-this._mouseStartDownCoords[0],this._amountY=this._mouseCoords[1]-this._mouseStartDownCoords[1],this._mouseStartDownCoords[0]=this._mouseCoords[0],this._mouseStartDownCoords[1]=this._mouseCoords[1]),this.fire("mousemove",[this._mouseCoords]))},_.onmousewheel=t=>{this._amountX=0,this._amountY=0,this._mouseCoords=this._getClickCoordsWithinElement(t),t.wheelDelta?(this._wheelDelta=t.wheelDelta/120,window.opera&&(this._wheelDelta=-this._wheelDelta)):t.detail&&(this._wheelDelta=-t.detail/3),this.fire("mousewheel",[this._wheelDelta])}}getMouseButtonDown(t){return this._mouseButtons[t]}getKeyDown(t){return this._keys[t]}getKeyUp(t){return!this._keys[t]}getAmountX(){return this._amountX}getAmountY(){return-this._amountY}getMouseCoords(){return this._mouseCoords}getWheelDelta(){return this._wheelDelta}_getClickCoordsWithinElement(t){const e=[0,0];if(t){let _=t.target,i=0,n=0;for(;_.offsetParent;)i+=_.offsetLeft,n+=_.offsetTop,_=_.offsetParent;e[0]=t.pageX-i,e[1]=t.pageY-n}else t=window.event,e.x=t.x,e.y=t.y;return e}}class W extends e.Z{static FORWARD=1;static BACKWARD=W.FORWARD<<1;static LEFT=W.BACKWARD<<1;static RIGHT=W.LEFT<<1;static YAW=-90;static PITCH=0;static SPEED=10.5;static SENSITIVITY=.1;static ZOOM=45;constructor(t,e){super(t,e),this._m_LastExTime=0,this._m_Camera=null,this._m_CameraList=(t,e,_)=>{this.refresh()},this.setCamera(e.camera||this._m_Scene.getMainCamera()),this._m_Position=new m.Z,e.position=e.position||this._m_Camera.getEye(),e.position&&this._m_Position.setTo(e.position),this._m_Front=new m.Z(0,0,-1),e.front=e.front||this._m_Camera.getAt().subRetNew(e.position).normal(),e.front&&this._m_Front.setTo(e.front),this._m_Up=new m.Z,this._m_Right=new m.Z,this._m_WorldUp=new m.Z(0,1,0),e.up&&this._m_WorldUp.setTo(e.up),this._m_Yaw=e.yaw||W.YAW,this._m_Pitch=e.pitch||W.PITCH,this._m_MovementSpeed=e.movementSpeed||W.SPEED,this._m_MouseSensitivity=e.mouseSensitivity||W.SENSITIVITY,this._m_Zoom=e.zoom||W.ZOOM,this._m_ViewMatrix=new M.Z,this._m_ViewMatrix.identity(),this.synYawPitch(),this.updateCameraVectors(),this._updateViewMatrix();let _=U.getInput(this._m_Scene,{id:this._m_Scene.getId()});this._m_Scene.on("update",(t=>{this._m_LastExTime=t;let e=!1;_.getMouseButtonDown(U.S_MOUSE_BUTTON0)&&(this.processMouseMovement(_.getAmountX(),_.getAmountY(),!0),this.updateCameraVectors(),e=!0);let i=null;_.getKeyDown(U.S_KEY_W)?i=W.FORWARD:_.getKeyDown(U.S_KEY_S)&&(i=W.BACKWARD),_.getKeyDown(U.S_KEY_A)?i=W.LEFT:_.getKeyDown(U.S_KEY_D)&&(i=W.RIGHT),null!=i&&(e=!0,this.processKeyboard(i,this._m_LastExTime)),e&&this._doUpdate(!0)})),_.on("mousewheel",(t=>{t&&(this.processMouseScroll(t),this._m_Camera.scroll(this._m_Zoom))}))}setMovementSpeed(t){this._m_MovementSpeed=t}setMouseSensitivity(t){this._m_MouseSensitivity=t}refresh(){this._m_Position.setTo(this._m_Camera.getEye()),this._m_Front.setTo(this._m_Camera.getAt().subRetNew(this._m_Position).normal()),this.synYawPitch()}setCamera(t){null!=t&&this._m_Camera!=t&&(this._m_Camera&&this._m_Camera.off(s.Z.S_CAMERA_UPDATE_EVENT,this._m_CameraList),this._m_Camera=t,this._m_Camera.on(s.Z.S_CAMERA_UPDATE_EVENT,this._m_CameraList))}synYawPitch(){this._m_Pitch=I.Z.toAngle(Math.asin(this._m_Front._m_Y));let t=Math.cos(I.Z.toRadians(this._m_Pitch)),e=this._m_Front._m_Z/t;e>=1?e=1:e<=-1&&(e=-1),this._m_Yaw=I.Z.toAngle(Math.asin(e)),Math.cos(I.Z.toRadians(this._m_Yaw))*t*this._m_Front._m_X<0&&(this._m_Yaw=180-this._m_Yaw)}processKeyboard(t,e){let _=this._m_MovementSpeed*e;t==W.FORWARD?(this._m_Front.multLength(_,x.Z.S_TEMP_VEC3),this._m_Position.add(x.Z.S_TEMP_VEC3)):t==W.BACKWARD?(this._m_Front.multLength(-1*_,x.Z.S_TEMP_VEC3),this._m_Position.add(x.Z.S_TEMP_VEC3)):t==W.LEFT?(this._m_Right.multLength(-1*_,x.Z.S_TEMP_VEC3),this._m_Position.add(x.Z.S_TEMP_VEC3)):t==W.RIGHT&&(this._m_Right.multLength(_,x.Z.S_TEMP_VEC3),this._m_Position.add(x.Z.S_TEMP_VEC3))}processMouseMovement(t,e,_){_=null==_||null==_||_,t*=this._m_MouseSensitivity,e*=this._m_MouseSensitivity,this._m_Yaw+=t,this._m_Pitch+=e,_&&(this._m_Pitch>89?this._m_Pitch=89:this._m_Pitch<-89&&(this._m_Pitch=-89))}processMouseScroll(t){this._m_Zoom-=t,this._m_Zoom<1&&(this._m_Zoom=1),this._m_Zoom>45&&(this._m_Zoom=45)}_updateViewMatrix(){this._m_Position.add(this._m_Front,x.Z.S_TEMP_VEC3),this._m_ViewMatrix.lookAt(this._m_Position,x.Z.S_TEMP_VEC3,this._m_Up)}getViewMatrix(){return this._m_ViewMatrix}getViewMatrixArray(){return this.getViewMatrix().m}updateCameraVectors(){x.Z.S_TEMP_VEC3._m_X=Math.cos(I.Z.toRadians(this._m_Yaw))*Math.cos(I.Z.toRadians(this._m_Pitch)),x.Z.S_TEMP_VEC3._m_Y=Math.sin(I.Z.toRadians(this._m_Pitch)),x.Z.S_TEMP_VEC3._m_Z=Math.sin(I.Z.toRadians(this._m_Yaw))*Math.cos(I.Z.toRadians(this._m_Pitch)),this._m_Front.setTo(x.Z.S_TEMP_VEC3),this._m_Front.normal(),this._m_Front.cross(this._m_WorldUp,this._m_Right),this._m_Right.normal(),this._m_Right.cross(this._m_Front,this._m_Up),this._m_Up.normal()}_update(){this._updateViewMatrix(),this._m_Camera.lookAt(this._m_Position,this._m_Position.add(this._m_Front,x.Z.S_TEMP_VEC3),this._m_Up)}}class H extends e.Z{_m_Enabled=!0;_m_Rotating=!0;_m_VRotating=!0;_m_CanRotate=!0;_m_Rotation=0;_m_VRotation=Math.PI/6;_m_PreviousTargetRotation=0;_m_TargetRotation=this._m_Rotation;_m_TargetVRotation=this._m_VRotation;_m_RotationSpeed=.3;_m_ZoomSensitivity=2;_m_ZoomSpeed=1;_m_VeryCloseRotation=!0;_m_MaxRotation=null;_m_MinRotation=null;_m_MaxVerticalRotation=Math.PI/2;_m_MinVerticalRotation=-Math.PI/2;_m_Distance=1;_m_TargetDistance=this._m_Distance;_m_MinDistance=1;_m_MaxDistance=10;_m_Chasing=!0;_m_Zooming=!0;_m_Zoomin=!1;_m_TrailingRotationInertia=.05;_m_DistanceLerpFactor=0;_m_TrailingLerpFactor=0;_m_TrailingSensitivity=5;_m_RotationSensitivity=5;_m_TrailingEnabled=!0;_m_SmoothMotion=!0;_m_TargetLocation=new m.Z;_m_TargetDir=new m.Z;_m_OffsetDistance=.002;_m_Target=new m.Z;_m_LookAtOffset=new m.Z;_m_PrevPos=new m.Z;temp=new m.Z;temp2=new m.Z;_m_Pos=new m.Z;_m_InitialUpVec=(new m.Z).setTo(m.Z.S_UNIT_AXIS_Y);_m_Cam;_m_ChasingSensitivity=5;_m_Input;_m_TargetMoves=!1;constructor(t,e){super(t,e),this._m_Cam=e.camera||this._m_Scene.getMainCamera(),this._m_Input=U.getInput(this._m_Scene,{id:this._m_Scene.getId()});let _=0;this._m_Scene.on("update",(t=>{_=t,this.updateCamera(t)})),this._m_Input.on("mousewheel",(t=>{t&&this.analog(t>0?G.CHASECAM_ZOOMIN:G.CHASECAM_ZOOMOUT,(t>0?t:-t)*this._m_ZoomSpeed,_)}))}setRotationSpeed(t){this._m_RotationSpeed=t}getRotationSpeed(){return this._m_RotationSpeed}setZoomSpeed(t){this._m_ZoomSpeed=t}getZoomSpeed(){return this._m_ZoomSpeed}setTargetDistance(t){this._m_TargetDistance=t}setTargetVerticalAngle(t){this._m_VRotation=t,this._m_TargetVRotation=this._m_VRotation}setTargetAngle(t){this._m_Rotation=t,this._m_TargetRotation=this._m_Rotation}focusCamera(){this._m_TargetLocation.setTo(this._m_Target).add(this._m_LookAtOffset),this._m_Distance=this._m_TargetDistance,this.computePosition(),this._m_Cam.lookAt(this._m_Pos,this._m_TargetLocation,this._m_InitialUpVec)}getDistance(){return this._m_Distance}lookScene(t){if(t){let e=t.getBoundingVolume(),_=2*e.getXHalf(),i=2*e.getYHalf(),n=2*e.getZHalf(),s=5*Math.sqrt(Math.pow(_,2)+Math.pow(i,2)+Math.pow(n,2)),a=s/5e3,r=s-a,o=2*Math.max(_,i,n);this.setTargetDistance(.5*(o-a)+a),this.setMaxDistance(o),this.setMinDistance(a),this.setZoomSpeed(.2*r);let h=new m.Z;e.getCenter(h),this.setTarget(h)}}setTarget(t){this._m_Target.setTo(t)}syncNavDir(t,e){this._m_TargetDir.setToInXYZ(t[0],t[1],t[2]),this._m_TargetDir.normal(),this._m_TargetVRotation=Math.asin(this._m_TargetDir.y);let _=Math.cos(this._m_TargetVRotation),i=this._m_TargetDir.z/_;i>=1?i=1:i<=-1&&(i=-1),this._m_TargetRotation=Math.asin(i),Math.cos(this._m_TargetRotation)*_*this._m_TargetDir.x<0&&(this._m_TargetRotation=Math.PI+-this._m_TargetRotation),this._m_Rotating=!0,this._m_VRotating=!0,e&&(this._m_Zooming=!0,this.setTargetDistance(this._m_MaxDistance))}rotate(t,e){let _=this._m_RotationSpeed;this._m_RotationSpeed=Math.PI/100,this._rotate1(t),this._rotate2(e),this._m_RotationSpeed=_}_rotate1(t){if(!this._m_CanRotate||!this._m_Enabled)return;this._m_Rotating=!0;let e=this._m_TargetRotation;this._m_TargetRotation+=t*this._m_RotationSpeed,null!=this._m_MaxRotation&&null!=this._m_MinRotation&&(this._m_TargetRotation>this._m_MaxRotation&&(this._m_TargetRotation=e),this._m_VeryCloseRotation?this._m_TargetRotation<this._m_MinRotation&&this._m_TargetDistance>this._m_MinDistance+1?this._m_TargetRotation=this._m_MinRotation:this._m_TargetRotation<90*-I.Z.S_DEG_TO_RAD&&(this._m_TargetRotation=e):this._m_TargetRotation<this._m_MinRotation&&(this._m_TargetRotation=e))}_rotate2(t){if(!this._m_CanRotate||!this._m_Enabled)return;this._m_VRotating=!0;let e=this._m_TargetVRotation;this._m_TargetVRotation+=t*this._m_RotationSpeed,this._m_TargetVRotation>this._m_MaxVerticalRotation&&(this._m_TargetVRotation=e),this._m_VeryCloseRotation?this._m_TargetVRotation<this._m_MinVerticalRotation&&this._m_TargetDistance>this._m_MinDistance+1?this._m_TargetVRotation=this._m_MinVerticalRotation:this._m_TargetVRotation<90*-I.Z.S_DEG_TO_RAD&&(this._m_TargetVRotation=e):this._m_TargetVRotation<this._m_MinVerticalRotation&&(this._m_TargetVRotation=e)}setMinRotation(t){this._m_MinRotation=t}setMaxRotation(t){this._m_MaxRotation=t}setMinVerticalRotation(t){this._m_MinVerticalRotation=t}setMaxVerticalRotation(t){this._m_MaxVerticalRotation=t}setVeryCloseRotation(t){this._m_VeryCloseRotation=t}_zoomCamera(t){this._m_Enabled&&(this._m_Zooming=!0,this._m_TargetDistance+=t*this._m_ZoomSensitivity,this._m_TargetDistance>this._m_MaxDistance&&(this._m_TargetDistance=this._m_MaxDistance),this._m_TargetDistance<this._m_MinDistance&&(this._m_TargetDistance=this._m_MinDistance),this._m_VeryCloseRotation&&this._m_TargetVRotation<this._m_MinVerticalRotation&&this._m_TargetDistance>this._m_MinDistance+1&&(this._m_TargetVRotation=this._m_MinVerticalRotation))}_checkInput(t){if(this._m_Input.getMouseButtonDown(U.S_MOUSE_BUTTON0)){let e=this._m_Input.getAmountX(),_=this._m_Input.getAmountY();0!=e&&this.analog(e>0?G.CHASECAM_MOVERIGHT:G.CHASECAM_MOVELEFT,e>0?e:-e,t),0!=_&&this.analog(_>0?G.CHASECAM_DOWN:G.CHASECAM_UP,_>0?_:-_,t)}}updateCamera(t){this._m_Enabled&&(this._checkInput(t),this._updateCamera(t))}_updateCamera(t){if(this._m_Enabled){this._m_TargetLocation.setTo(this._m_Target).add(this._m_LookAtOffset);let e=!1;if(this._m_SmoothMotion){this._m_TargetDir.setTo(this._m_TargetLocation).sub(this._m_PrevPos);let _=this._m_TargetDir.length();if(this._m_OffsetDistance<_?(this._m_Chasing=!0,this._m_TrailingEnabled&&(this._m_Trailing=!0),this._m_TargetMoves=!0):(this._m_TargetMoves&&!this._m_CanRotate&&(this._m_TargetRotation-this._m_Rotation>this._m_TrailingRotationInertia?this._m_TargetRotation=this._m_Rotation+this._m_TrailingRotationInertia:this._m_TargetRotation-this._m_Rotation<-this._m_TrailingRotationInertia&&(this._m_TargetRotation=this._m_Rotation-this._m_TrailingRotationInertia)),this._m_TargetMoves=!1),this._m_CanRotate&&(this._m_TrailingLerpFactor=0,this._m_Trailing=!1),this._m_TrailingEnabled&&this._m_Trailing){if(this._m_TargetMoves){let t=this._m_TargetDir.negate().normal(),e=m.Z.S_UNIT_AXIS_X;t.y=0,this._m_TargetDir.z>0?this._m_TargetRotation=I.Z.S_TWO_PI-Math.acos(t.dot(e)):this._m_TargetRotation=Math.acos(t.dot(e)),(this._m_TargetRotation-this._m_Rotation>Math.PI||this._m_TargetRotation-this._m_Rotation<-Math.PI)&&(this._m_TargetRotation-=I.Z.S_TWO_PI),this._m_TargetRotation!=this._m_PreviousTargetRotation&&Math.abs(this._m_TargetRotation-this._m_PreviousTargetRotation)>Math.PI/8&&(this._m_TrailingLerpFactor=0),this._m_PreviousTargetRotation=this._m_TargetRotation}this._m_TrailingLerpFactor=Math.min(this._m_TrailingLerpFactor+t*t*this._m_TrailingSensitivity,1),this._m_Rotation=I.Z.interpolateLinear(this._m_TrailingLerpFactor,this._m_Rotation,this._m_TargetRotation),this._m_TargetRotation+.01>=this._m_Rotation&&this._m_TargetRotation-.01<=this._m_Rotation&&(this._m_Trailing=!1,this._m_TrailingLerpFactor=0)}this._m_Chasing&&(this.temp2.setTo(this._m_Cam.getEye()),this._m_Distance=this.temp.setTo(this._m_TargetLocation).sub(this.temp2).length(),this._m_DistanceLerpFactor=Math.min(this._m_DistanceLerpFactor+t*t*this._m_ChasingSensitivity*.05,1),this._m_Distance=I.Z.interpolateLinear(this._m_DistanceLerpFactor,this._m_Distance,this._m_TargetDistance),this._m_TargetDistance+.01>=this._m_Distance&&this._m_TargetDistance-.01<=this._m_Distance&&(this._m_DistanceLerpFactor=0,this._m_Chasing=!1)),this._m_Zooming&&(this._m_DistanceLerpFactor=Math.min(this._m_DistanceLerpFactor+t*t*this._m_ZoomSensitivity,1),this._m_Distance=I.Z.interpolateLinear(this._m_DistanceLerpFactor,this._m_Distance,this._m_TargetDistance),this._m_TargetDistance+.1>=this._m_Distance&&this._m_TargetDistance-.1<=this._m_Distance&&(this._m_Zooming=!1,this._m_DistanceLerpFactor=0)),this._m_Rotating&&(this._m_RotationLerpFactor=Math.min(this._m_RotationLerpFactor+t*t*this._m_RotationSensitivity,1),this._m_Rotation=I.Z.interpolateLinear(this._m_RotationLerpFactor,this._m_Rotation,this._m_TargetRotation),this._m_TargetRotation+.01>=this._m_Rotation&&this._m_TargetRotation-.01<=this._m_Rotation&&(this._m_Rotating=!1,this._m_RotationLerpFactor=0)),this._m_VRotating&&(this._m_VRotationLerpFactor=Math.min(this._m_VRotationLerpFactor+t*t*this._m_RotationSensitivity,1),this._m_VRotation=I.Z.interpolateLinear(this._m_VRotationLerpFactor,this._m_VRotation,this._m_TargetVRotation),this._m_TargetVRotation+.01>=this._m_VRotation&&this._m_TargetVRotation-.01<=this._m_VRotation&&(this._m_VRotating=!1,this._m_VRotationLerpFactor=0)),this.computePosition(),this._m_Pos.add(this._m_LookAtOffset),e=!0}else this._m_VRotation=this._m_TargetVRotation,this._m_Rotation=this._m_TargetRotation,this._m_Distance=this._m_TargetDistance,this.computePosition(),this._m_Pos.add(this._m_LookAtOffset),e=!0;this._m_PrevPos.setTo(this._m_TargetLocation),this._m_Cam.lookAt(this._m_Pos,this._m_TargetLocation,this._m_InitialUpVec)}}computePosition(){let t=this._m_Distance*Math.sin(Math.PI/2-this._m_VRotation);this._m_Pos.setToInXYZ(t*Math.cos(this._m_Rotation),this._m_Distance*Math.sin(this._m_VRotation),t*Math.sin(this._m_Rotation)),this._m_Pos.add(this._m_Target)}analog(t,e,_){t==G.CHASECAM_MOVELEFT?this._rotate1(-e*_):t==G.CHASECAM_MOVERIGHT?this._rotate1(e*_):t==G.CHASECAM_UP?this._rotate2(e*_):t==G.CHASECAM_DOWN?this._rotate2(-e*_):t==G.CHASECAM_ZOOMIN?(this._zoomCamera(-e*_),0==this._m_Zoomin&&(this._m_DistanceLerpFactor=0),this._m_Zoomin=!0):t==G.CHASECAM_ZOOMOUT&&(this._zoomCamera(+e*_),1==this._m_Zoomin&&(this._m_DistanceLerpFactor=0),this._m_Zoomin=!1)}isEnabled(){return this._m_Enabled}setEnabled(t){this._m_Enabled=t,this._m_CanRotate=t}getMaxDistance(){return this._m_MaxDistance}setMaxDistance(t){this._m_MaxDistance=t,t<this._m_Distance&&this._zoomCamera(t-this._m_Distance)}getMinDistance(){return this._m_MinDistance}setMinDistance(t){this._m_MinDistance=t,t>this._m_Distance&&this._zoomCamera(this._m_Distance-t)}}var X=__webpack_require__(1189),Y=__webpack_require__(7150),k=__webpack_require__(1940),z=__webpack_require__(1143);class j extends k.Z{static _S_TEMP_COLOR=new z.Z(4);static _S_TEMP_COLORF=new g.Z(4);static S_FACE={PositiveX:"1",NegativeX:"2",PositiveY:"3",NegativeY:"4",PositiveZ:"5",NegativeZ:"6"};static S_FILTERS={S_NEAREST:1,S_LINEAR:2,S_LINEAR_MIPMAP_NEAREST:3};static S_WRAPS={S_REPEAT:1,S_CLAMP:2,S_CLAMP_TO_EDGE:3,S_CLAMP_TO_BORDER:4};static S_TEXTURE_FORMAT={};constructor(t){super(t),this._m_Scene=t;const e=t.getCanvas().getGLContext();j.S_TEXTURE_FORMAT={S_RGB:e.RGB,S_RGBA:e.RGBA,S_RGB16F:e.RGB16F,S_RGB32F:e.RGB32F,S_RGBA16F:e.RGBA16F,S_RGBA32F:e.RGBA32F,S_RGBE5:e.RGB9_E5,S_SHORT:e.SHORT,S_SRGB:e.SRGB,S_SRGB8:e.SRGB8,S_SRGBA:e.SRGB8_ALPHA8,S_INT:e.INT,S_BYTE:e.BYTE,S_UNSIGNED_BYTE:e.UNSIGNED_BYTE,S_FLOAT:e.FLOAT},this._m_Texture=e.createTexture(),this._setFilter(t,e.TEXTURE_MIN_FILTER,e.NEAREST),this._setFilter(t,e.TEXTURE_MAG_FILTER,e.LINEAR),this._m_Internalformat=e.RGBA,this._m_Format=e.RGBA,this._m_Type=e.UNSIGNED_BYTE,this._m_CubeMaps={},this._m_UpdateImage=!1,this._m_FlipY=!1,this._m_WrapS=null,this._m_WrapT=null,this._m_WrapR=null,this._m_MinFilter=j.S_FILTERS.S_LINEAR,this._m_MagFilter=j.S_FILTERS.S_LINEAR}setTextureFormat(t,e,_){this._m_Internalformat=t,this._m_Format=e,this._m_Type=_}setFlipY(t){this._m_FlipY=t}genMipmap(t){const e=t.getCanvas().getGLContext();e.bindTexture(e.TEXTURE_CUBE_MAP,this._m_Texture),e.generateMipmap(e.TEXTURE_CUBE_MAP),e.bindTexture(e.TEXTURE_CUBE_MAP,null)}setFilter(t,e,_){this._m_MinFilter=e,this._m_MagFilter=_}_parseFilter(t,e){switch(e){case j.S_FILTERS.S_LINEAR:return t.LINEAR;case j.S_FILTERS.S_NEAREST:return t.NEAREST;case j.S_FILTERS.S_LINEAR_MIPMAP_NEAREST:return t.LINEAR_MIPMAP_NEAREST}return null}_setFilter(t,e,_){const i=t.getCanvas().getGLContext();i.bindTexture(i.TEXTURE_CUBE_MAP,this._m_Texture),i.texParameteri(i.TEXTURE_CUBE_MAP,e,_),i.bindTexture(i.TEXTURE_CUBE_MAP,null)}setWrap(t,e,_,i){this._m_WrapS=e,this._m_WrapT=_,this._m_WrapR=i}_parseWrap(t,e){switch(e){case j.S_WRAPS.S_CLAMP:return t.CLAMP;case j.S_WRAPS.S_REPEAT:return t.REPEAT;case j.S_WRAPS.S_CLAMP_TO_EDGE:return t.CLAMP_TO_EDGE;case j.S_WRAPS.S_CLAMP_TO_BORDER:return t.CLAMP_TO_BORDER}return null}_setWrap(t,e,_){const i=t.getCanvas().getGLContext();i.bindTexture(i.TEXTURE_CUBE_MAP,this._m_Texture),i.texParameteri(i.TEXTURE_CUBE_MAP,e,_),i.bindTexture(i.TEXTURE_CUBE_MAP,null)}setPreloadColor(t,e){let _=this._m_Type!=j.S_TEXTURE_FORMAT.S_FLOAT?j._S_TEMP_COLOR:j._S_TEMP_COLORF,i=_.getArray();e?(i[0]=Math.floor(255*e._m_X),i[1]=Math.floor(255*e._m_Y),i[2]=Math.floor(255*e._m_Z),i[3]=Math.floor(255*e._m_W)):(i[0]=0,i[1]=0,i[2]=0,i[3]=255);const n=t.getCanvas().getGLContext();n.bindTexture(n.TEXTURE_CUBE_MAP,this._m_Texture);for(let t=0;t<6;t++)n.texImage2D(n.TEXTURE_CUBE_MAP_POSITIVE_X+t,0,this._m_Internalformat,1,1,0,this._m_Format,this._m_Type,_.getBufferData());n.bindTexture(n.TEXTURE_CUBE_MAP,null)}setImageSrc(t,e,_,i){let n=i&&i.rgbe?RadianceLoader.rgbeImg():new Image;n.onload=()=>{this._m_UpdateImage=!0,this._m_CubeMaps[e]={imgData:i&&i.rgbe?n.dataRGBE:n},i&&i.rgbe&&(this._m_CubeMaps[e].rgbe=!0),this._m_CubeMaps[e].width=n.width,this._m_CubeMaps[e].height=n.height,this._m_CubeMaps[e].updateImage=!0;for(let t in this._m_OwnerFlags)this._m_OwnerFlags[t].owner.setParam(this._m_OwnerFlags[t].flag,this)},n.src=_}setImage(t,e,_,i){this._m_UpdateImage=!0;let n=i&&null!=i.mipmapLevel?i.mipmapLevel:null,s=null;null!=n?(this._m_CubeMaps[e]||(this._m_CubeMaps[e]=[]),this._m_CubeMaps[e].push({imgData:i&&i.rgbe?_.dataRGBE:_,mipmapLevel:n}),s=this._m_CubeMaps[e][this._m_CubeMaps[e].length-1]):(this._m_CubeMaps[e]={imgData:i&&i.rgbe?_.dataRGBE:_},s=this._m_CubeMaps[e]),i&&i.rgbe&&(s.rgbe=!0),s.width=i&&null!=i.width?i.width:_.width,s.height=i&&null!=i.height?i.height:_.height,s.updateImage=!0,s.mipmapLevel=i&&i.mipmapLevel?i.mipmapLevel:0;for(let t in this._m_OwnerFlags)this._m_OwnerFlags[t].owner.setParam(this._m_OwnerFlags[t].flag,this)}_setImage(t,e,_,i){const n=t.getCanvas().getGLContext();if(n.bindTexture(n.TEXTURE_CUBE_MAP,this._m_Texture),n.pixelStorei(n.UNPACK_FLIP_Y_WEBGL,this._m_FlipY),_.rgbe)n.texImage2D(this._parseFace(n,e),_.mipmapLevel,this._m_Internalformat,_.width,_.height,0,this._m_Format,this._m_Type,_.imgData);else if(Array.isArray(_)){n.texParameteri(n.TEXTURE_CUBE_MAP,n.TEXTURE_BASE_LEVEL,0),n.texParameteri(n.TEXTURE_CUBE_MAP,n.TEXTURE_MAX_LEVEL,_.length);let t=null;for(let i=0;i<_.length;i++)t=_[i],n.texImage2D(this._parseFace(n,e),t.mipmapLevel,this._m_Internalformat,t.width,t.height,0,this._m_Format,this._m_Type,t.imgData)}else n.texImage2D(this._parseFace(n,e),_.mipmapLevel,this._m_Internalformat,_.width,_.height,0,this._m_Format,this._m_Type,_.imgData);n.bindTexture(n.TEXTURE_CUBE_MAP,null)}_parseFace(t,e){switch(e){case j.S_FACE.PositiveX:return t.TEXTURE_CUBE_MAP_POSITIVE_X;case j.S_FACE.NegativeX:return t.TEXTURE_CUBE_MAP_NEGATIVE_X;case j.S_FACE.PositiveY:return t.TEXTURE_CUBE_MAP_POSITIVE_Y;case j.S_FACE.NegativeY:return t.TEXTURE_CUBE_MAP_NEGATIVE_Y;case j.S_FACE.PositiveZ:return t.TEXTURE_CUBE_MAP_POSITIVE_Z;case j.S_FACE.NegativeZ:return t.TEXTURE_CUBE_MAP_NEGATIVE_Z}}_upload(t,e,_){if(t.activeTexture(t.TEXTURE0+e),this._m_UpdateImage){for(let t in this._m_CubeMaps)this._m_CubeMaps[t]&&(this._setImage(this._m_Scene,t,this._m_CubeMaps[t]),this._m_CubeMaps[t]=null);this._m_MinFilter!=j.S_FILTERS.S_LINEAR_MIPMAP_NEAREST&&this._m_MagFilter!=j.S_FILTERS.S_LINEAR_MIPMAP_NEAREST||this.genMipmap(this._m_Scene);const t=this._m_Scene.getCanvas().getGLContext();this._m_WrapS&&this._setWrap(this._m_Scene,t.TEXTURE_WRAP_S,this._parseWrap(t,this._m_WrapS)),this._m_WrapT&&this._setWrap(this._m_Scene,t.TEXTURE_WRAP_T,this._parseWrap(t,this._m_WrapT)),this._m_WrapR&&this._setWrap(this._m_Scene,t.TEXTURE_WRAP_R,this._parseWrap(t,this._m_WrapR)),this._m_MinFilter&&this._setFilter(this._m_Scene,t.TEXTURE_MIN_FILTER,this._parseFilter(t,this._m_MinFilter)),this._m_MagFilter&&this._setFilter(this._m_Scene,t.TEXTURE_MAG_FILTER,this._parseFilter(t,this._m_MagFilter)),this._m_UpdateImage=!1}t.bindTexture(t.TEXTURE_CUBE_MAP,this._m_Texture)}compare(t){return!1}}var K=__webpack_require__(6092);class q extends Y.Z{static _S_CAPTURE_CONFIG=[{dir:new m.Z(0,-1,0),up:new m.Z(0,0,-1)},{dir:new m.Z(0,1,0),up:new m.Z(0,0,1)},{dir:new m.Z(0,0,-1),up:new m.Z(0,1,0)},{dir:new m.Z(0,0,1),up:new m.Z(0,1,0)},{dir:new m.Z(-1,0,0),up:new m.Z(0,1,0)},{dir:new m.Z(1,0,0),up:new m.Z(0,1,0)}];static _S_FACE_NUMS=6;_m_ShadowCams=new Array(q._S_FACE_NUMS);_m_Position=new m.Z;_m_Radius=0;_m_UpdateCasterCam=!1;static _S_TEMP_VEC3_0=new m.Z;constructor(t,e){e.nbShadowMaps=q._S_FACE_NUMS,e.shadowSplitType=2,super(t,e),this.init(e.shadowMapSize)}init(t){for(let e=0;e<q._S_FACE_NUMS;e++)this._m_ShadowCams[e]=new s.Z(this._m_Scene,{id:this._m_Id+"_"+e+v.Z.nextId(),width:t,height:t,fixedSize:!0})}initMat(){super.initMat(),this._m_PostShadowMat.addDefine(P.Z.S_POINTLIGHT_SHADOWS_SRC,!1)}_uploadInfo(t,e){super._uploadInfo(t,e);let _=null;_=e.m_LastSubShader.getContextVars()[Y.Z.S_LIGHT_POS],_&&t.uniform3f(_.loc,this._m_Position._m_X,this._m_Position._m_Y,this._m_Position._m_Z)}updateShadowCams(){if(this._m_Radius==this._m_Light.getRadius()&&this._m_Position.equals(this._m_Light.getPosition())){if(this._m_UpdateCasterCam){this._m_UpdateCasterCam=!1;for(let t=0;t<q._S_FACE_NUMS;t++)this._m_ShadowCams[t].setFrustumPerspective(90,1,.1,this._m_Radius),this._m_ShadowCams[t]._updateFrustum()}}else this._m_Radius=this._m_Light.getRadius(),this._m_Position.setTo(this._m_Light.getPosition()),this._calc()}getShadowCam(t){return this._m_ShadowCams[t]}getShadowGeometryCasts(t,e){return this._m_Scene.getSceneNodes().forEach((_=>{K.Z.calculateNodeInFrustum(_,this._m_ShadowCams[t],o.Z.S_SHADOW_CAST,e)})),this._m_UpdateCasterCam=!0,this._m_ShadowCams[t].setFrustumPerspective(90,1,.1,1e3),this._m_ShadowCams[t].getProjectViewMatrix(!0),e}_calc(){let t=q._S_TEMP_VEC3_0;for(let e=0;e<q._S_FACE_NUMS;e++)q._S_CAPTURE_CONFIG[e].dir.add(this._m_Position,t),this._m_ShadowCams[e].lookAt(this._m_Position,t,q._S_CAPTURE_CONFIG[e].up),this._m_ShadowCams[e].setFrustumPerspective(90,1,.1,this._m_Radius),this._m_ShadowCams[e]._updateFrustum()}}class J extends r.Z{getType(){return"PointLight"}getTypeId(){return 1}constructor(t,e){super(t,e),this._m_Position=new m.Z,this._m_Radius=-1,this._m_StepClip=.2,this._m_InvRadius=1/this._m_Radius,this._m_InvRadius2=1/(this._m_Radius-this._m_StepClip)}_genShadow(){this._m_ShadowCfg.id=this._m_Id+"_shadow",this._m_Shadow=new q(this._m_Scene,this._m_ShadowCfg)}setStepClip(t){t<0&&(t=1),this._m_StepClip=t,this._m_InvRadius2=1/(this._m_Radius-this._m_StepClip)}getStepClip(){return this._m_StepClip}setPosition(t){this._m_Position.setTo(t),this._updateBounding()}getPosition(){return this._m_Position}setPositionXYZ(t,e,_){this._m_Position.setToInXYZ(t,e,_),this._updateBounding()}setRadius(t){this._m_Radius=t,this._m_InvRadius=1/t,this._updateBounding()}getRadius(){return this._m_Radius}getInRadius(){return this._m_InvRadius}getInRadius2(){return this._m_InvRadius2}getBoundingVolume(){return this._m_UpdateBoundingVolume&&(this._m_BoudingVolume||(this._m_BoudingVolume=new c),this._m_BoudingVolume.setCenter(this._m_Position),this._m_BoudingVolume.setRaiuds(this._m_Radius),this._m_UpdateBoundingVolume=!1),this._m_BoudingVolume}}class Q extends Y.Z{_m_ShadowCam;_m_OutAngle=-1;_m_SpotRange=-1;_m_Position=new m.Z;_m_Direction=new m.Z;_m_UpdateCasterCam=!1;_m_TempVec3=new m.Z;constructor(t,e){e.nbShadowMaps=1,super(t,e),this.init(e.shadowMapSize)}init(t){this._m_ShadowCam=new s.Z(this._m_Scene,{id:this._m_Id+"_"+v.Z.nextId(),width:t,height:t,fixedSize:!0})}initMat(){super.initMat(),this._m_PostShadowMat.addDefine(P.Z.S_SPOTLIGHT_SHADOWS_SRC,!1)}_uploadInfo(t,e){super._uploadInfo(t,e);let _=e.m_LastSubShader.getContextVars(),i=null;if(i=_[Y.Z.S_LIGHT_DIR],i){let e=this._m_Light.getDirection();t.uniform3f(i.loc,e._m_X,e._m_Y,e._m_Z)}if(i=_[Y.Z.S_LIGHT_POS],i){let e=this._m_Light.getPosition();t.uniform3f(i.loc,e._m_X,e._m_Y,e._m_Z)}}getShadowCam(t){return this._m_ShadowCam}updateShadowCams(){null!=this._m_Light?this._m_OutAngle==this._m_Light.getOuterAngle()&&this._m_SpotRange==this._m_Light.getSpotRange()&&this._m_Position.equals(this._m_Light.getPosition())&&this._m_Direction.equals(this._m_Light.getDirection())?this._m_UpdateCasterCam&&(this._m_UpdateCasterCam=!1,this._m_ShadowCam.setFrustumPerspective(this._m_OutAngle*I.Z.S_RAD_TO_DEG*2,1,1,this._m_SpotRange),this._m_ShadowCam._updateFrustum()):(this._m_OutAngle=this._m_Light.getOuterAngle(),this._m_SpotRange=this._m_Light.getSpotRange(),this._m_Position.setTo(this._m_Light.getPosition()),this._m_Direction.setTo(this._m_Light.getDirection()),this._m_ShadowCam.setFrustumPerspective(this._m_OutAngle*I.Z.S_RAD_TO_DEG*2,1,1,this._m_SpotRange),this._m_ShadowCam.lookAt(this._m_Position,this._m_Position.add(this._m_Direction,this._m_TempVec3),this._m_ShadowCam.getUp()),this._m_ShadowCam._updateFrustum(),this._m_ShadowCam.getProjectViewMatrix(!0)):i.Z.warn("无效光源!")}getShadowGeometryCasts(t,e){return this._m_Scene.getSceneNodes().forEach((t=>{K.Z.calculateNodeInFrustum(t,this._m_ShadowCam,o.Z.S_SHADOW_CAST,e)})),this._m_UpdateCasterCam=!0,this._m_ShadowCam.setFrustumPerspective(this._m_OutAngle*I.Z.S_RAD_TO_DEG*2,1,1,1e3),this._m_ShadowCam.getProjectViewMatrix(!0),e}}class $ extends r.Z{getType(){return"SpotLight"}getTypeId(){return 2}constructor(t,e){super(t,e),this._m_Direction=new m.Z,this._m_Position=new m.Z,this._m_InnerAngle=I.Z.toRadians(30),this._m_InnerCorner=Math.cos(this._m_InnerAngle),this._m_OuterAngle=I.Z.toRadians(45),this._m_OuterCorner=Math.cos(this._m_OuterAngle),this._m_SpotRange=100,this._m_StepClip=4,this._m_InvSpotRange=1/this._m_SpotRange,this._m_InnerMinusOuter=this._m_InnerCorner-this._m_OuterCorner,this._m_PackedAngleCos=0,this.computeAngleParameters()}_genShadow(){this._m_ShadowCfg.id=this._m_Id+"_shadow",this._m_Shadow=new Q(this._m_Scene,this._m_ShadowCfg)}setStepClip(t){t<0&&(t=1),this._m_StepClip=t}getStepClip(){return this._m_StepClip}getPackedAngleCos(){return this._m_PackedAngleCos}computeAngleParameters(){this._m_PackedAngleCos=Math.floor(1e3*this._m_InnerCorner),this._m_PackedAngleCos==Math.floor(1e3*this._m_OuterCorner)&&(this._m_OuterCorner-=.001),this._m_PackedAngleCos+=1*this._m_OuterCorner}getInnerMinusOuter(){return this._m_InnerMinusOuter}setSpotRange(t){t<=0?(this._m_SpotRange=0,this._m_InvSpotRange=0):(this._m_SpotRange=t,this._m_InvSpotRange=1/this._m_SpotRange)}getSpotRange(){return this._m_SpotRange}getInvSpotRange(){return this._m_InvSpotRange}setInnerAngle(t){this._m_InnerAngle=t,this._m_InnerCorner=Math.cos(this._m_InnerAngle),this._m_InnerMinusOuter=this._m_InnerCorner-this._m_OuterCorner,this.computeAngleParameters()}getInnerAngle(){return this._m_InnerAngle}setOuterAngle(t){this._m_OuterAngle=t,this._m_OuterCorner=Math.cos(this._m_OuterAngle),this._m_InnerMinusOuter=this._m_InnerCorner-this._m_OuterCorner,this.computeAngleParameters()}getOuterAngle(){return this._m_OuterAngle}setPosition(t){this._m_Position.setTo(t)}setPositionXYZ(t,e,_){this._m_Position.setToInXYZ(t,e,_)}getPosition(){return this._m_Position}getPosition(){return this._m_Position}setDirection(t){this._m_Direction.setTo(t),this._m_Direction.normal()}setDirectionXYZ(t,e,_){this._m_Direction.setToInXYZ(t,e,_).normal()}getDirection(){return this._m_Direction}getBoundingVolume(){if(0==this._m_SpotRange)return null;if(this._m_UpdateBoundingVolume){this._m_BoudingVolume||(this._m_BoudingVolume=new c);let t=.5*this._m_SpotRange,e=x.Z.S_TEMP_VEC3_2;this._m_Direction.multLength(.5*this._m_SpotRange,e).add(this._m_Position);let _=this._m_SpotRange*Math.tan(this._m_OuterCorner);this._m_BoudingVolume.setCenter(e),this._m_BoudingVolume.setRaiuds(Math.max(t,_)),this._m_UpdateBoundingVolume=!1}return this._m_BoudingVolume}}var tt=__webpack_require__(4771),et=__webpack_require__(8655),_t=__webpack_require__(4190),it=__webpack_require__(5356),nt=__webpack_require__(1144),st=__webpack_require__(4955),at=__webpack_require__(89),rt=__webpack_require__(6153),ot=__webpack_require__(1082),ht=__webpack_require__(1331);class mt extends D.Z{getType(){return"Box"}constructor(t,e){super(t,e);let _=e.xHalf||1;_<=0&&(console.error("xHalf不能小于等于0!"),_*=-1);let i=e.yHalf||1;i<=0&&(console.error("yHalf不能小于等于0!"),i*=-1);let n=e.zHalf||1;n<=0&&(console.error("zHalf不能小于等于0!"),n*=-1);const s=e.center,a=s?s._m_X:0,r=s?s._m_Y:0,o=s?s._m_Z:0,h=-_+a,m=-i+r,l=-n+o,u=_+a,f=i+r,c=n+o;let g=new ht.Z;g.setData(ht.Z.S_POSITIONS,[u,f,c,h,f,c,h,m,c,u,m,c,u,f,c,u,m,c,u,m,l,u,f,l,u,f,c,u,f,l,h,f,l,h,f,c,h,f,c,h,f,l,h,m,l,h,m,c,h,m,l,u,m,l,u,m,c,h,m,c,u,m,l,h,m,l,h,f,l,u,f,l]),g.setData(ht.Z.S_NORMALS,[0,0,1,0,0,1,0,0,1,0,0,1,1,0,0,1,0,0,1,0,0,1,0,0,0,1,0,0,1,0,0,1,0,0,1,0,-1,0,0,-1,0,0,-1,0,0,-1,0,0,0,-1,0,0,-1,0,0,-1,0,0,-1,0,0,0,-1,0,0,-1,0,0,-1,0,0,-1]),g.setData(ht.Z.S_UV0,[1,0,0,0,0,1,1,1,0,0,0,1,1,1,1,0,1,1,1,0,0,0,0,1,1,0,0,0,0,1,1,1,0,1,1,1,1,0,0,0,0,1,1,1,1,0,0,0]),g.setData(ht.Z.S_INDICES,[0,1,2,0,2,3,4,5,6,4,6,7,8,9,10,8,10,11,12,13,14,12,14,15,16,17,18,16,18,19,20,21,22,20,22,23]);let d=v.Z.generatorTangents2(g.getData(ht.Z.S_INDICES),g.getData(ht.Z.S_POSITIONS),g.getData(ht.Z.S_UV0),g.getData(ht.Z.S_NORMALS));g.setData(ht.Z.S_TANGENTS,d),this.setMesh(g),this.updateBound()}}class lt extends D.Z{constructor(t,e){super(t,e);let _=e.xSize||1;_<=0&&(console.error("xSize不能小于等于0!"),_*=-1);let i=e.zSize||1;i<=0&&(console.error("zSize不能小于等于0!"),i*=-1);let n=e.xSegments||1;n<=0&&(console.error("xSegments不能小于等于0!"),n*=-1),n<1&&(n=1);let s=e.zSegments||1;s<0&&(console.error("zSegments不能小于等于0!"),s*=-1),s<1&&(s=1);const a=e.center,r=a?a[0]:0,o=a?a[1]:0,h=a?a[2]:0,m=_/2,l=i/2,u=Math.floor(n)||1,f=Math.floor(s)||1,c=u+1,g=f+1,d=_/u,S=i/f,p=new Float32Array(c*g*3),C=new Float32Array(c*g*3),T=new Float32Array(c*g*2);let E,D,P,M,x,A,L,R=0,I=0;for(E=0;E<g;E++){const t=E*S-l;for(D=0;D<c;D++)P=D*d-m,p[R]=P+r,p[R+1]=o,p[R+2]=-t+h,C[R+2]=-1,T[I]=u-D,T[I+1]=f-E,e.xRepeat||(T[I]/=u),e.zRepeat||(T[I+1]/=f),R+=3,I+=2}R=0;const w=new(p.length/3>65535?Uint32Array:Uint16Array)(u*f*6);for(E=0;E<f;E++)for(D=0;D<u;D++)M=D+c*E,x=D+c*(E+1),A=D+1+c*(E+1),L=D+1+c*E,w[R]=L,w[R+1]=x,w[R+2]=M,w[R+3]=L,w[R+4]=A,w[R+5]=x,R+=6;let F=new ht.Z;F.setData(ht.Z.S_POSITIONS,p),F.setData(ht.Z.S_NORMALS,C),F.setData(ht.Z.S_UV0,T),F.setData(ht.Z.S_INDICES,w);let b=v.Z.generatorTangents2(F.getData(ht.Z.S_INDICES),F.getData(ht.Z.S_POSITIONS),F.getData(ht.Z.S_UV0),F.getData(ht.Z.S_NORMALS));F.setData(ht.Z.S_TANGENTS,b),this.setMesh(F),this.updateBound()}}class ut extends D.Z{getType(){return"Sphere"}constructor(t,e){super(t,e);const _=e.lod||1,i=e.center?e.center._m_X:0,n=e.center?e.center._m_Y:0,s=e.center?e.center._m_Z:0;let a=e.radius||1;a<=0&&(console.error("radius不能小于等于0!"),a*=-1);let r=e.heightSegments||18;r<=0&&(console.error("heightSegments不能小于等于0!"),r*=-1),r=Math.floor(_*r),r<18&&(r=18);let o=e.widthSegments||18;o<=0&&(console.error("widthSegments不能小于等于0!"),o*=-1),o=Math.floor(_*o),o<18&&(o=18);let h=e.widthUVScale||.5;e.heightUVScale;const m=[],l=[],u=[],f=[];let c,g,d,S,p,C,T,E,D,P,M,x,A,L,R;for(c=0;c<=r;c++)for(d=c*Math.PI/r,S=Math.sin(d),p=Math.cos(d),g=0;g<=o;g++)C=2*g*Math.PI/o,T=Math.sin(C),E=Math.cos(C),D=E*S,P=p,M=T*S,x=1-g/(o*h),A=c/(r*h),l.push(D),l.push(P),l.push(M),u.push(x),u.push(A),m.push(i+a*D),m.push(n+a*P),m.push(s+a*M);for(c=0;c<r;c++)for(g=0;g<o;g++)L=c*(o+1)+g,R=L+o+1,f.push(L+1),f.push(R+1),f.push(R),f.push(L+1),f.push(R),f.push(L);let I=new ht.Z;I.setData(ht.Z.S_POSITIONS,m),I.setData(ht.Z.S_NORMALS,l),I.setData(ht.Z.S_UV0,u),I.setData(ht.Z.S_INDICES,f);let w=v.Z.generatorTangents2(I.getData(ht.Z.S_INDICES),I.getData(ht.Z.S_POSITIONS),I.getData(ht.Z.S_UV0),I.getData(ht.Z.S_NORMALS));I.setData(ht.Z.S_TANGENTS,w),this.setMesh(I),this.updateBound()}}var ft=__webpack_require__(9363);class ct extends D.Z{getType(){return"SkyBox"}constructor(t,e){super(t,e);let _=new ht.Z;_.setData(ht.Z.S_POSITIONS,[3.4201992,0,-9.396927,2.7669992,2.0103426,-9.396927,1.0568995,3.2528028,-9.396927,-1.0568998,3.2528026,-9.396927,-2.7669995,2.0103424,-9.396927,-3.4201992,-2.9900332e-7,-9.396927,-2.766999,-2.010343,-9.396927,-1.0569,-3.2528026,-9.396927,1.0569001,-3.2528026,-9.396927,2.7670002,-2.0103416,-9.396927,3.4201992,0,-9.396927,6.427875,0,-7.660445,5.20026,3.7782102,-7.660445,1.9863225,6.1132727,-7.660445,-1.9863229,6.113272,-7.660445,-5.2002606,3.7782097,-7.660445,-6.427875,-5.6194267e-7,-7.660445,-5.2002597,-3.7782109,-7.660445,-1.9863232,-6.113272,-7.660445,1.9863235,-6.113272,-7.660445,5.2002616,-3.7782083,-7.660445,6.427875,0,-7.660445,8.6602545,0,-4.9999995,7.0062933,5.0903697,-4.9999995,2.6761656,8.236392,-4.9999995,-2.676166,8.236391,-4.9999995,-7.006294,5.090369,-4.9999995,-8.6602545,-7.5710346e-7,-4.9999995,-7.006293,-5.0903707,-4.9999995,-2.6761668,-8.236391,-4.9999995,2.676167,-8.236391,-4.9999995,7.006295,-5.0903673,-4.9999995,8.6602545,0,-4.9999995,9.848078,0,-1.7364818,7.9672623,5.7885547,-1.7364818,3.0432231,9.366078,-1.7364818,-3.0432239,9.366078,-1.7364818,-7.9672627,5.788554,-1.7364818,-9.848078,-8.6094633e-7,-1.7364818,-7.967262,-5.788556,-1.7364818,-3.0432243,-9.366078,-1.7364818,3.0432246,-9.366078,-1.7364818,7.9672647,-5.788552,-1.7364818,9.848078,0,-1.7364818,9.848078,0,1.7364826,7.9672623,5.7885547,1.7364826,3.0432231,9.366078,1.7364826,-3.0432239,9.366078,1.7364826,-7.9672627,5.788554,1.7364826,-9.848078,-8.6094633e-7,1.7364826,-7.967262,-5.788556,1.7364826,-3.0432243,-9.366078,1.7364826,3.0432246,-9.366078,1.7364826,7.9672647,-5.788552,1.7364826,9.848078,0,1.7364826,8.660254,0,5.0000005,7.0062923,5.090369,5.0000005,2.6761653,8.236391,5.0000005,-2.6761658,8.23639,5.0000005,-7.006293,5.0903687,5.0000005,-8.660254,-7.571034e-7,5.0000005,-7.006292,-5.09037,5.0000005,-2.6761663,-8.23639,5.0000005,2.6761665,-8.23639,5.0000005,7.0062943,-5.090367,5.0000005,8.660254,0,5.0000005,6.427875,0,7.660445,5.20026,3.7782102,7.660445,1.9863225,6.1132727,7.660445,-1.9863229,6.113272,7.660445,-5.2002606,3.7782097,7.660445,-6.427875,-5.6194267e-7,7.660445,-5.2002597,-3.7782109,7.660445,-1.9863232,-6.113272,7.660445,1.9863235,-6.113272,7.660445,5.2002616,-3.7782083,7.660445,6.427875,0,7.660445,3.4201992,0,9.396927,2.7669992,2.0103426,9.396927,1.0568995,3.2528028,9.396927,-1.0568998,3.2528026,9.396927,-2.7669995,2.0103424,9.396927,-3.4201992,-2.9900332e-7,9.396927,-2.766999,-2.010343,9.396927,-1.0569,-3.2528026,9.396927,1.0569001,-3.2528026,9.396927,2.7670002,-2.0103416,9.396927,3.4201992,0,9.396927,0,0,-10,0,0,10]),_.setData(ht.Z.S_INDICES,[0,11,1,1,11,12,1,12,2,2,12,13,2,13,3,3,13,14,3,14,4,4,14,15,4,15,5,5,15,16,5,16,6,6,16,17,6,17,7,7,17,18,7,18,8,8,18,19,8,19,9,9,19,20,9,20,10,10,20,21,11,22,12,12,22,23,12,23,13,13,23,24,13,24,14,14,24,25,14,25,15,15,25,26,15,26,16,16,26,27,16,27,17,17,27,28,17,28,18,18,28,29,18,29,19,19,29,30,19,30,20,20,30,31,20,31,21,21,31,32,22,33,23,23,33,34,23,34,24,24,34,35,24,35,25,25,35,36,25,36,26,26,36,37,26,37,27,27,37,38,27,38,28,28,38,39,28,39,29,29,39,40,29,40,30,30,40,41,30,41,31,31,41,42,31,42,32,32,42,43,33,44,34,34,44,45,34,45,35,35,45,46,35,46,36,36,46,47,36,47,37,37,47,48,37,48,38,38,48,49,38,49,39,39,49,50,39,50,40,40,50,51,40,51,41,41,51,52,41,52,42,42,52,53,42,53,43,43,53,54,44,55,45,45,55,56,45,56,46,46,56,57,46,57,47,47,57,58,47,58,48,48,58,59,48,59,49,49,59,60,49,60,50,50,60,61,50,61,51,51,61,62,51,62,52,52,62,63,52,63,53,53,63,64,53,64,54,54,64,65,55,66,56,56,66,67,56,67,57,57,67,68,57,68,58,58,68,69,58,69,59,59,69,70,59,70,60,60,70,71,60,71,61,61,71,72,61,72,62,62,72,73,62,73,63,63,73,74,63,74,64,64,74,75,64,75,65,65,75,76,66,77,67,67,77,78,67,78,68,68,78,79,68,79,69,69,79,80,69,80,70,70,80,81,70,81,71,71,81,82,71,82,72,72,82,83,72,83,73,73,83,84,73,84,74,74,84,85,74,85,75,75,85,86,75,86,76,76,86,87,0,1,88,1,2,88,2,3,88,3,4,88,4,5,88,5,6,88,6,7,88,7,8,88,8,9,88,9,10,88,77,89,78,78,89,79,79,89,80,80,89,81,81,89,82,82,89,83,83,89,84,84,89,85,85,89,86,86,89,87]),this.setMesh(_),this.updateBound();let i=new tt.Z(t,{id:e.id+v.Z.nextId(),materialDef:et.Z.parse(ft.Z.S_DEFAULT_SKY_BOX_DEF)});this.setMaterial(i)}}var gt=__webpack_require__(3448);class dt extends e.Z{getType(){return"LodControl"}constructor(t,e){super(t,e),t instanceof o.Z||i.Z.error("owner必须是Geometry或其子类!"),this._m_LastDistance=0,this._m_LastLodLevel=0,this._m_DistCommonDifference=e.distCommonDifference||1,this._m_LodLevelDists=[],this._m_TrisPerPixel=e.trisPerPixel||1,this._m_NumLodLevels=0,this._m_NumTris=[],this.distr(),this._m_Scene.on("render",(t=>{this._doUpdate()}))}distr(){this._m_NumLodLevels=this._m_Owner.getMesh().getLodLevelCount();for(let t=0;t<this._m_NumLodLevels;t++)this._m_NumTris[t]=this._m_Owner.getMesh().getLodPrimitiveCount(t),this._m_LodLevelDists[t]=this._m_DistCommonDifference*t}_update(){let t=this._m_Owner.getBoundingVolume(),e=this._m_Scene.getMainCamera(),_=Math.atan(e.getTop()*e.getNear()),i=Math.PI/(8*_),n=t.distance(e.getEye())/i,s=0;n>this._m_LastDistance&&Math.abs(n-this._m_LastDistance)<=this._m_DistCommonDifference||this._m_LastDistance>n&&0==this._m_LastLodLevel||this._m_LastDistance<n&&this._m_LastLodLevel==this._m_NumLodLevels-1?s=this._m_LastLodLevel:(s=n>this._m_LastDistance?this._m_LastLodLevel+1:this._m_LastLodLevel-1,s=Math.min(s,this._m_NumLodLevels),s=Math.max(s,0),this._m_LastDistance=this._m_LodLevelDists[s],this._m_LastLodLevel=s),this._m_Owner.lod(s)}}class St{static S_LEAF_TBL=0;static S_LEAF_TFL=1;static S_LEAF_TBR=2;static S_LEAF_TFR=3;static S_LEAF_BBL=4;static S_LEAF_BFL=5;static S_LEAF_BBR=6;static S_LEAF_BFR=7;constructor(t,e){this._m_Valid=!1,this._m_Refs=t,this._m_AABBBoundingBox=new rt.Z,this._m_AABBBoundingBox.setTo(e),this._m_Leafs=null,this._m_FrustumContain=null}inFrustum(t){return this._m_FrustumContain=t.frustumContains(this.getAABBBoundingBox()),this._m_FrustumContain!=s.Z.S_FRUSTUM_INTERSECT_OUTSIDE}setValid(t){this._m_Valid=t}isValid(){return this._m_Valid}addRef(t){this._m_Refs||(this._m_Refs=[]),this._m_Refs.push(t)}getRefs(){return this._m_Refs}getAABBBoundingBox(){return this._m_AABBBoundingBox}getLeaf(t){return this._m_Leafs[t]}getLeafs(){return this._m_Leafs}initLeafs(){this._m_Leafs=[]}}class pt{static count=0;constructor(){}static nextId(){return--pt.count}static pushVec3ToArray(t,e){t.push(e._m_X),t.push(e._m_Y),t.push(e._m_Z)}static createProbeMesh(){let t=new ht.Z;return t.setData(ht.Z.S_POSITIONS,[3.4201992,0,-9.396927,2.7669992,2.0103426,-9.396927,1.0568995,3.2528028,-9.396927,-1.0568998,3.2528026,-9.396927,-2.7669995,2.0103424,-9.396927,-3.4201992,-2.9900332e-7,-9.396927,-2.766999,-2.010343,-9.396927,-1.0569,-3.2528026,-9.396927,1.0569001,-3.2528026,-9.396927,2.7670002,-2.0103416,-9.396927,3.4201992,0,-9.396927,6.427875,0,-7.660445,5.20026,3.7782102,-7.660445,1.9863225,6.1132727,-7.660445,-1.9863229,6.113272,-7.660445,-5.2002606,3.7782097,-7.660445,-6.427875,-5.6194267e-7,-7.660445,-5.2002597,-3.7782109,-7.660445,-1.9863232,-6.113272,-7.660445,1.9863235,-6.113272,-7.660445,5.2002616,-3.7782083,-7.660445,6.427875,0,-7.660445,8.6602545,0,-4.9999995,7.0062933,5.0903697,-4.9999995,2.6761656,8.236392,-4.9999995,-2.676166,8.236391,-4.9999995,-7.006294,5.090369,-4.9999995,-8.6602545,-7.5710346e-7,-4.9999995,-7.006293,-5.0903707,-4.9999995,-2.6761668,-8.236391,-4.9999995,2.676167,-8.236391,-4.9999995,7.006295,-5.0903673,-4.9999995,8.6602545,0,-4.9999995,9.848078,0,-1.7364818,7.9672623,5.7885547,-1.7364818,3.0432231,9.366078,-1.7364818,-3.0432239,9.366078,-1.7364818,-7.9672627,5.788554,-1.7364818,-9.848078,-8.6094633e-7,-1.7364818,-7.967262,-5.788556,-1.7364818,-3.0432243,-9.366078,-1.7364818,3.0432246,-9.366078,-1.7364818,7.9672647,-5.788552,-1.7364818,9.848078,0,-1.7364818,9.848078,0,1.7364826,7.9672623,5.7885547,1.7364826,3.0432231,9.366078,1.7364826,-3.0432239,9.366078,1.7364826,-7.9672627,5.788554,1.7364826,-9.848078,-8.6094633e-7,1.7364826,-7.967262,-5.788556,1.7364826,-3.0432243,-9.366078,1.7364826,3.0432246,-9.366078,1.7364826,7.9672647,-5.788552,1.7364826,9.848078,0,1.7364826,8.660254,0,5.0000005,7.0062923,5.090369,5.0000005,2.6761653,8.236391,5.0000005,-2.6761658,8.23639,5.0000005,-7.006293,5.0903687,5.0000005,-8.660254,-7.571034e-7,5.0000005,-7.006292,-5.09037,5.0000005,-2.6761663,-8.23639,5.0000005,2.6761665,-8.23639,5.0000005,7.0062943,-5.090367,5.0000005,8.660254,0,5.0000005,6.427875,0,7.660445,5.20026,3.7782102,7.660445,1.9863225,6.1132727,7.660445,-1.9863229,6.113272,7.660445,-5.2002606,3.7782097,7.660445,-6.427875,-5.6194267e-7,7.660445,-5.2002597,-3.7782109,7.660445,-1.9863232,-6.113272,7.660445,1.9863235,-6.113272,7.660445,5.2002616,-3.7782083,7.660445,6.427875,0,7.660445,3.4201992,0,9.396927,2.7669992,2.0103426,9.396927,1.0568995,3.2528028,9.396927,-1.0568998,3.2528026,9.396927,-2.7669995,2.0103424,9.396927,-3.4201992,-2.9900332e-7,9.396927,-2.766999,-2.010343,9.396927,-1.0569,-3.2528026,9.396927,1.0569001,-3.2528026,9.396927,2.7670002,-2.0103416,9.396927,3.4201992,0,9.396927,0,0,-10,0,0,10]),t.setData(ht.Z.S_NORMALS,[-.34201992,-0,.9396927,-.27669993,-.20103426,.9396927,-.10568996,-.32528028,.9396927,.10568998,-.32528028,.9396927,.27669996,-.20103423,.9396927,.34201992,2.990033e-8,.9396927,.2766999,.20103431,.9396927,.10569,.32528028,.9396927,-.10569002,.32528028,.9396927,-.27670002,.20103417,.9396927,-.34201992,-0,.9396927,-.6427875,-0,.76604456,-.520026,-.37782103,.76604456,-.19863226,-.6113273,.76604456,.19863228,-.61132723,.76604456,.5200261,-.37782097,.76604456,.6427875,5.6194267e-8,.76604456,.52002597,.3778211,.76604456,.19863233,.61132723,.76604456,-.19863234,.61132723,.76604456,-.52002615,.37782082,.76604456,-.6427875,-0,.76604456,-.86602545,-0,.49999997,-.70062935,-.50903696,.49999997,-.26761654,-.82363915,.4999999,.2676166,-.8236391,.49999997,.70062935,-.5090369,.4999999,.86602545,7.5710346e-8,.49999997,.70062923,.509037,.4999999,.2676167,.8236391,.49999997,-.26761672,.8236391,.49999997,-.7006295,.5090367,.4999999,-.86602545,-0,.49999997,-.9848078,-0,.17364818,-.7967262,-.57885545,.17364818,-.30432233,-.93660784,.17364818,.3043224,-.93660784,.17364818,.7967263,-.57885545,.17364818,.9848078,8.609464e-8,.17364818,.79672617,.57885563,.17364818,.30432245,.93660784,.17364818,-.30432245,.93660784,.17364818,-.79672647,.5788552,.17364818,-.9848078,-0,.17364818,-.9848078,-0,-.17364827,-.7967262,-.57885545,-.17364827,-.30432233,-.93660784,-.17364827,.3043224,-.93660784,-.17364827,.7967263,-.57885545,-.17364827,.9848078,8.609464e-8,-.17364827,.7967261,.5788556,-.17364825,.30432242,.9366078,-.17364825,-.30432245,.9366078,-.17364825,-.79672647,.5788552,-.17364827,-.9848078,-0,-.17364827,-.8660254,-0,-.50000006,-.70062923,-.50903696,-.50000006,-.26761654,-.8236391,-.50000006,.2676166,-.82363904,-.50000006,.7006293,-.5090369,-.50000006,.8660254,7.571034e-8,-.50000006,.7006292,.509037,-.50000006,.26761663,.82363904,-.50000006,-.26761666,.82363904,-.50000006,-.7006294,.5090367,-.50000006,-.8660254,-0,-.50000006,-.6427875,-0,-.76604456,-.520026,-.37782103,-.76604456,-.19863226,-.6113273,-.76604456,.19863228,-.61132723,-.76604456,.5200261,-.37782097,-.76604456,.6427875,5.6194267e-8,-.76604456,.52002597,.3778211,-.76604456,.19863233,.61132723,-.76604456,-.19863234,.61132723,-.76604456,-.52002615,.37782082,-.76604456,-.6427875,-0,-.76604456,-.34201992,-0,-.9396927,-.27669993,-.20103426,-.9396927,-.10568996,-.32528028,-.9396927,.10568998,-.32528028,-.9396927,.27669996,-.20103423,-.9396927,.34201992,2.990033e-8,-.9396927,.2766999,.20103431,-.9396927,.10569,.32528028,-.9396927,-.10569002,.32528028,-.9396927,-.27670002,.20103417,-.9396927,-.34201992,-0,-.9396927,0,0,1,0,0,-1]),t.setData(ht.Z.S_INDICES,[0,11,1,1,11,12,1,12,2,2,12,13,2,13,3,3,13,14,3,14,4,4,14,15,4,15,5,5,15,16,5,16,6,6,16,17,6,17,7,7,17,18,7,18,8,8,18,19,8,19,9,9,19,20,9,20,10,10,20,21,11,22,12,12,22,23,12,23,13,13,23,24,13,24,14,14,24,25,14,25,15,15,25,26,15,26,16,16,26,27,16,27,17,17,27,28,17,28,18,18,28,29,18,29,19,19,29,30,19,30,20,20,30,31,20,31,21,21,31,32,22,33,23,23,33,34,23,34,24,24,34,35,24,35,25,25,35,36,25,36,26,26,36,37,26,37,27,27,37,38,27,38,28,28,38,39,28,39,29,29,39,40,29,40,30,30,40,41,30,41,31,31,41,42,31,42,32,32,42,43,33,44,34,34,44,45,34,45,35,35,45,46,35,46,36,36,46,47,36,47,37,37,47,48,37,48,38,38,48,49,38,49,39,39,49,50,39,50,40,40,50,51,40,51,41,41,51,52,41,52,42,42,52,53,42,53,43,43,53,54,44,55,45,45,55,56,45,56,46,46,56,57,46,57,47,47,57,58,47,58,48,48,58,59,48,59,49,49,59,60,49,60,50,50,60,61,50,61,51,51,61,62,51,62,52,52,62,63,52,63,53,53,63,64,53,64,54,54,64,65,55,66,56,56,66,67,56,67,57,57,67,68,57,68,58,58,68,69,58,69,59,59,69,70,59,70,60,60,70,71,60,71,61,61,71,72,61,72,62,62,72,73,62,73,63,63,73,74,63,74,64,64,74,75,64,75,65,65,75,76,66,77,67,67,77,78,67,78,68,68,78,79,68,79,69,69,79,80,69,80,70,70,80,81,70,81,71,71,81,82,71,82,72,72,82,83,72,83,73,73,83,84,73,84,74,74,84,85,74,85,75,75,85,86,75,86,76,76,86,87,0,1,88,1,2,88,2,3,88,3,4,88,4,5,88,5,6,88,6,7,88,7,8,88,8,9,88,9,10,88,77,89,78,78,89,79,79,89,80,80,89,81,81,89,82,82,89,83,83,89,84,84,89,85,85,89,86,86,89,87]),t}static createAABBBoundingBoxMeshFromAABBBoundingBox(t){let e=new ht.Z,_=t.getMin(),i=t.getMax(),n=[_._m_X,_._m_Y,_._m_Z,_._m_X,_._m_Y,i._m_Z,i._m_X,_._m_Y,_._m_Z,i._m_X,_._m_Y,i._m_Z,_._m_X,i._m_Y,_._m_Z,_._m_X,i._m_Y,i._m_Z,i._m_X,i._m_Y,_._m_Z,i._m_X,i._m_Y,i._m_Z];return e.setData(ht.Z.S_POSITIONS,n),e.setData(ht.Z.S_INDICES,[0,1,1,3,3,2,2,0,4,5,5,7,7,6,6,4,0,4,1,5,2,6,3,7]),e.setPrimitive(ht.Z.S_PRIMITIVE_LINES),e}static createViewFrustumMeshFromCamera(t,e){let _=t.getWidth(),i=t.getHeight(),n=[];pt.pushVec3ToArray(n,t.getWorldCoordinates(new ot.Z(0,0),0,e||!0)),pt.pushVec3ToArray(n,t.getWorldCoordinates(new ot.Z(0,i),0,e||!0)),pt.pushVec3ToArray(n,t.getWorldCoordinates(new ot.Z(_,i),0,e||!0)),pt.pushVec3ToArray(n,t.getWorldCoordinates(new ot.Z(_,0),0,e||!0)),pt.pushVec3ToArray(n,t.getWorldCoordinates(new ot.Z(0,0),1,e||!0)),pt.pushVec3ToArray(n,t.getWorldCoordinates(new ot.Z(0,i),1,e||!0)),pt.pushVec3ToArray(n,t.getWorldCoordinates(new ot.Z(_,i),1,e||!0)),pt.pushVec3ToArray(n,t.getWorldCoordinates(new ot.Z(_,0),1,e||!0));let s=new ht.Z;return s.setData(ht.Z.S_POSITIONS,n),s.setData(ht.Z.S_INDICES,[0,1,1,2,2,3,3,0,4,5,5,6,6,7,7,4,0,4,1,5,2,6,3,7]),s.setPrimitive(ht.Z.S_PRIMITIVE_LINES),s}}class Ct extends e.Z{static S_TEMP_AABBBOUNDINGBOX=new rt.Z;static S_TEMP_MIN=new m.Z;static S_TEMP_MAX=new m.Z;getType(){return"OctCullingControl"}constructor(t,e){if(super(t,e),this._m_OctNode=null,t instanceof o.Z&&(t.clearCullingFlags(o.Z.S_DEFAULT_FRUSTUM_CULLING),this.createOct(t,4),this._m_OctNode)){let t=null,e=null;this._m_Scene.on("render",(_=>{t=this._m_Scene.getRender().getVisDrawables(),e=this._m_Scene.getFrustumCullingCamera(),this.octCulling(e,t)}))}}_debug(t,e,_){if(_.isValid()){let i=new D.Z(t,{id:pt.nextId()+"_oct"});i.setMesh(pt.createAABBBoundingBoxMeshFromAABBBoundingBox(_.getAABBBoundingBox())),i.setMaterial(e),i.updateBound(),t.addChildren(i),_.getLeafs()&&_.getLeafs().forEach((_=>{this._debug(t,e,_)}))}}debug(t,e){this._m_OctNode&&this._debug(t,e,this._m_OctNode)}createOct(t,e){let _=t.getBoundingVolume();if(_){let n=new rt.Z,s=_.getXHalf(),a=_.getYHalf(),r=_.getZHalf(),o=Math.max(Math.max(s,a),r),h=_.getCenter();n.fromMinMax(new m.Z(-o+h._m_X,-o+h._m_Y,-o+h._m_Z),new m.Z(o+h._m_X,o+h._m_Y,o+h._m_Z)),this._m_OctNode=new St(null,n),this._m_OctNode.setValid(!0),i.Z.debug("开始预建!"),this._preBuilt(this._m_OctNode,e),i.Z.debug("预建完成!"),this.distrNode(t,this._m_OctNode)}}_preBuiltOctLeaf(t,e){let _=null,i=t.getLeafs(),n=t.getAABBBoundingBox(),s=n.getMin(),a=n.getMax(),r=n.getCenter();Ct.S_TEMP_MIN.setToInXYZ(s._m_X,r._m_Y,s._m_Z),Ct.S_TEMP_MAX.setToInXYZ(r._m_X,a._m_Y,r._m_Z),Ct.S_TEMP_AABBBOUNDINGBOX.fromMinMax(Ct.S_TEMP_MIN,Ct.S_TEMP_MAX),_=new St(null,Ct.S_TEMP_AABBBOUNDINGBOX),i.push(_),this._preBuilt(_,e),Ct.S_TEMP_MIN.setToInXYZ(s._m_X,r._m_Y,r._m_Z),Ct.S_TEMP_MAX.setToInXYZ(r._m_X,a._m_Y,a._m_Z),Ct.S_TEMP_AABBBOUNDINGBOX.fromMinMax(Ct.S_TEMP_MIN,Ct.S_TEMP_MAX),_=new St(null,Ct.S_TEMP_AABBBOUNDINGBOX),i.push(_),this._preBuilt(_,e),Ct.S_TEMP_MIN.setToInXYZ(r._m_X,r._m_Y,s._m_Z),Ct.S_TEMP_MAX.setToInXYZ(a._m_X,a._m_Y,r._m_Z),Ct.S_TEMP_AABBBOUNDINGBOX.fromMinMax(Ct.S_TEMP_MIN,Ct.S_TEMP_MAX),_=new St(null,Ct.S_TEMP_AABBBOUNDINGBOX),i.push(_),this._preBuilt(_,e),Ct.S_TEMP_MIN.setToInXYZ(r._m_X,r._m_Y,r._m_Z),Ct.S_TEMP_MAX.setToInXYZ(a._m_X,a._m_Y,a._m_Z),Ct.S_TEMP_AABBBOUNDINGBOX.fromMinMax(Ct.S_TEMP_MIN,Ct.S_TEMP_MAX),_=new St(null,Ct.S_TEMP_AABBBOUNDINGBOX),i.push(_),this._preBuilt(_,e),Ct.S_TEMP_MIN.setToInXYZ(s._m_X,s._m_Y,s._m_Z),Ct.S_TEMP_MAX.setToInXYZ(r._m_X,r._m_Y,r._m_Z),Ct.S_TEMP_AABBBOUNDINGBOX.fromMinMax(Ct.S_TEMP_MIN,Ct.S_TEMP_MAX),_=new St(null,Ct.S_TEMP_AABBBOUNDINGBOX),i.push(_),this._preBuilt(_,e),Ct.S_TEMP_MIN.setToInXYZ(s._m_X,s._m_Y,r._m_Z),Ct.S_TEMP_MAX.setToInXYZ(r._m_X,r._m_Y,a._m_Z),Ct.S_TEMP_AABBBOUNDINGBOX.fromMinMax(Ct.S_TEMP_MIN,Ct.S_TEMP_MAX),_=new St(null,Ct.S_TEMP_AABBBOUNDINGBOX),i.push(_),this._preBuilt(_,e),Ct.S_TEMP_MIN.setToInXYZ(r._m_X,s._m_Y,s._m_Z),Ct.S_TEMP_MAX.setToInXYZ(a._m_X,r._m_Y,r._m_Z),Ct.S_TEMP_AABBBOUNDINGBOX.fromMinMax(Ct.S_TEMP_MIN,Ct.S_TEMP_MAX),_=new St(null,Ct.S_TEMP_AABBBOUNDINGBOX),i.push(_),this._preBuilt(_,e),Ct.S_TEMP_MIN.setToInXYZ(r._m_X,s._m_Y,r._m_Z),Ct.S_TEMP_MAX.setToInXYZ(a._m_X,r._m_Y,a._m_Z),Ct.S_TEMP_AABBBOUNDINGBOX.fromMinMax(Ct.S_TEMP_MIN,Ct.S_TEMP_MAX),_=new St(null,Ct.S_TEMP_AABBBOUNDINGBOX),i.push(_),this._preBuilt(_,e)}_preBuilt(t,e){e>0&&(e--,t.initLeafs(),this._preBuiltOctLeaf(t,e))}distrNode(t,e){let _=t.getChildren();_&&_.length>0?_.forEach((t=>{this.distrNode(t,e)})):t instanceof D.Z&&this.distrOct(t,e)}distrOct(t,e){let _=t.getBoundingVolume();if(e.getAABBBoundingBox().inside(_)){let _=e.getLeafs();if(null!=_){let i=!1;for(let n=0;n<8;n++)if(this.distrOct(t,_[n])){i=!0,e.setValid(!0);break}return i||(e.addRef(t),e.setValid(!0)),!0}return e.addRef(t),e.setValid(!0),!0}return!1}cullingLeafs(t,e,_){if(t.isValid()&&t.inFrustum(e)){if(t.getRefs()){let i=e.getFrustumMask();t.getRefs().forEach((t=>{t.inFrustum(e)&&_.push(t),e.setFrustumMask(i)}))}if(t.getLeafs()){let i=e.getFrustumMask();t.getLeafs().forEach((t=>{e.setFrustumMask(i),this.cullingLeafs(t,e,_)}))}}}octCulling(t,e){let _=t.getFrustumMask();t.setFrustumMask(0),this.cullingLeafs(this._m_OctNode,t,e),t.setFrustumMask(_)}}var Tt=__webpack_require__(6466),Et=__webpack_require__(460);class Dt extends Et.Z{constructor(t){super(t)}render(t){}}var Pt=__webpack_require__(7312);class Mt extends Tt.Z{constructor(t){super(t)}}var xt=__webpack_require__(8597),At=__webpack_require__(1433),Lt=__webpack_require__(7731),Rt=__webpack_require__(1181),It=__webpack_require__(3072),vt=__webpack_require__(6384),wt=__webpack_require__(16),Ft=__webpack_require__(6985),bt=__webpack_require__(801),Ot=__webpack_require__(9968),Zt=__webpack_require__(8375),Bt=__webpack_require__(3396),yt=__webpack_require__(7997),Nt=__webpack_require__(533),Vt=__webpack_require__(9374);class Gt{static _S_CAPTURE_CONFIG=[{dir:new m.Z(1,0,0),up:new m.Z(0,-1,0)},{dir:new m.Z(-1,0,0),up:new m.Z(0,-1,0)},{dir:new m.Z(0,1,0),up:new m.Z(0,0,1)},{dir:new m.Z(0,-1,0),up:new m.Z(0,0,-1)},{dir:new m.Z(0,0,1),up:new m.Z(0,-1,0)},{dir:new m.Z(0,0,-1),up:new m.Z(0,-1,0)}];static _S_CAPTURE_FACE={0:j.S_FACE.PositiveX,1:j.S_FACE.NegativeX,2:j.S_FACE.PositiveY,3:j.S_FACE.NegativeY,4:j.S_FACE.PositiveZ,5:j.S_FACE.NegativeZ};constructor(t,e,_,i){this._m_Scene=t,this._m_MipMap=i,this._m_Resolute=e,this._m_CaptureCameres=[],this._m_CaptureFrames=[],this._m_CaptureResult=new j(t),this._m_CaptureResult.setTextureFormat(j.S_TEXTURE_FORMAT.S_RGBA16F,j.S_TEXTURE_FORMAT.S_RGBA,j.S_TEXTURE_FORMAT.S_FLOAT),this._m_CapturePixels=[],this._m_Position=new m.Z,_&&this._m_Position.setTo(_),this._m_PrefilterSky=new ct(t,{id:"prefitlerSky"+v.Z.nextId()}),this._m_PrefilterSky.setMaterial(new tt.Z(t,{id:"prefilterMat"+v.Z.nextId(),materialDef:et.Z.parse(ft.Z.S_PREFILTER_DEF)})),this._m_PrefilterSky.getMaterial().setParam("roughness",(new Vt.Z).valueOf(0)),this._m_PrefilterSky.getMaterial().setParam("resolution",(new Vt.Z).valueOf(e)),this._m_PrefilterSky.getMaterial().setParam("envMap",this._m_CaptureResult),this._m_PrefilterMap=new j(t),this._m_PrefilterMap.setTextureFormat(j.S_TEXTURE_FORMAT.S_RGBA16F,j.S_TEXTURE_FORMAT.S_RGBA,j.S_TEXTURE_FORMAT.S_FLOAT),this._m_PrefilterMap.setFilter(t,j.S_FILTERS.S_LINEAR_MIPMAP_NEAREST,j.S_FILTERS.S_LINEAR),this._m_PrefilterMipmap=0;let n=e,s=e;for(;(n>=1||s>=1)&&1!=n&&1!=s;)n/=2,s/=2,this._m_PrefilterMipmap++;this._init()}_init(){let t=new m.Z;const e=this._m_Scene.getCanvas().getGLContext();for(let _=0;_<6;_++)this._m_CaptureCameres[_]=new s.Z(this._m_Scene,{id:"capture_"+_+"_"+v.Z.nextId(),fovy:90,aspect:1}),Gt._S_CAPTURE_CONFIG[_].dir.add(this._m_Position,t),this._m_CaptureCameres[_].lookAt(this._m_Position,t,Gt._S_CAPTURE_CONFIG[_].up),this._m_CaptureFrames[_]=new Nt.Z(e,"capture_frame_"+_+"_"+v.Z.nextId(),this._m_Resolute,this._m_Resolute),this._m_CaptureFrames[_].addTexture(e,"capture_texture_"+_,e.RGBA16F,0,e.RGBA,e.FLOAT,e.COLOR_ATTACHMENT0,!1,this._m_MipMap),this._m_CaptureFrames[_].addBuffer(e,"capture_depth_"+_,e.DEPTH24_STENCIL8,e.DEPTH_STENCIL_ATTACHMENT),this._m_CaptureFrames[_].finish(e,this._m_Scene,!1);this._m_CaptureResult.setPreloadColor(this._m_Scene,new N.Z(.5,.5,.5,1))}setPosition(t){this._m_Position.setTo(t)}getPosition(){return this._m_Position}capture(){const t=this._m_Scene.getCanvas().getGLContext();this._m_Scene.getRender()._resetFrameContext(),this._m_Scene.getRender()._drawEnv(t);let e=this._m_Scene.getMainCamera(),_=this._m_Scene.getRender(),i=null;_.setViewPort(t,0,0,this._m_Resolute,this._m_Resolute);for(let e=0;e<6;e++)this._m_Scene.setMainCamera(this._m_CaptureCameres[e]),this._m_CaptureFrames[e].use(_),this._m_CaptureFrames[e].clear(t),this._m_Scene.getRender()._drawEnv(t),i=this._m_CaptureFrames[e].readPixels(t,"",t.RGBA,t.FLOAT),this._m_CapturePixels[e]=i,this._m_CaptureResult.setImage(this._m_Scene,Gt._S_CAPTURE_FACE[e],i,{width:this._m_Resolute,height:this._m_Resolute});this._m_CaptureResult.setWrap(this._m_Scene,j.S_WRAPS.S_CLAMP_TO_EDGE,j.S_WRAPS.S_CLAMP_TO_EDGE,j.S_WRAPS.S_CLAMP_TO_EDGE),this._m_Scene.setMainCamera(e),this._m_Scene.getRender().useDefaultFrame(),_.setViewPort(t,0,0,this._m_Scene.getCanvas().getWidth(),this._m_Scene.getCanvas().getHeight())}prefiltered(){const t=this._m_Scene.getCanvas().getGLContext();let e=this._m_Scene.getSky();this._m_Scene.setSky(this._m_PrefilterSky),this._m_Scene.getRender()._resetFrameContext(),this._m_Scene.getRender()._drawEnv(t);let _,i,n=this._m_Scene.getMainCamera(),s=this._m_Scene.getRender(),a=null;s.setViewPort(t,0,0,this._m_Resolute,this._m_Resolute);for(let e=0;e<6;e++){this._m_Scene.setMainCamera(this._m_CaptureCameres[e]),this._m_CaptureFrames[e].use(s),this._m_CaptureFrames[e].clear(t);for(let n=0;n<=this._m_PrefilterMipmap;n++)_=this._m_Resolute*Math.pow(.5,n),i=this._m_Resolute*Math.pow(.5,n),this._m_PrefilterSky.getMaterial().setParam("roughness",(new Vt.Z).valueOf(1*n/(this._m_PrefilterMipmap-1))),this._m_CaptureFrames[e].clear(t),this._m_Scene.getRender()._drawEnv(t),a=this._m_CaptureFrames[e].readPixels(t,"",t.RGBA,t.FLOAT),this._m_PrefilterMap.setImage(this._m_Scene,Gt._S_CAPTURE_FACE[e],a,{width:_,height:i,mipmapLevel:n})}this._m_PrefilterMap.setWrap(this._m_Scene,j.S_WRAPS.S_CLAMP_TO_EDGE,j.S_WRAPS.S_CLAMP_TO_EDGE,j.S_WRAPS.S_CLAMP_TO_EDGE),this._m_Scene.setMainCamera(n),this._m_Scene.getRender().useDefaultFrame(),this._m_Scene.setSky(e),s.setViewPort(t,0,0,this._m_Scene.getCanvas().getWidth(),this._m_Scene.getCanvas().getHeight())}getCaptureTextureCube(){return this._m_CaptureResult}getCapturePixels(){return this._m_CapturePixels}getPrefilterTextureCube(){return this._m_PrefilterMap}getPrefilterMipMap(){return this._m_PrefilterMipmap}}class Ut{static _S_TEMP_UNIT_X=new m.Z(1,0,0);static _S_TEMP_UNIT_Y=new m.Z(0,1,0);static _S_TEMP_UNIT_Z=new m.Z(0,0,1);static _S_DEFAULT_CAPTURE_RESOLUTE=256;static _S_FIX_SEAMS_METHOD={Wrap:0,Stretch:1,None:2};static _S_SQRT_PI=Math.sqrt(Math.PI);static _S_SQRT_3PI=Math.sqrt(3/Math.PI);static _S_SQRT_5PI=Math.sqrt(5/Math.PI);static _S_SQRT_15PI=Math.sqrt(15/Math.PI);static _S_SH_BAND_FACTOR=[1,2/3,2/3,2/3,1/4,1/4,1/4,1/4,1/4];static captureProbe(t,e,_){t.getCanvas().getGLContext();let n=_&&null!=_.resolute?_.resolute:Ut._S_DEFAULT_CAPTURE_RESOLUTE,s=new Gt(t,n,e.getPosition(),_.mipmap);return i.Z.time("capture!"),s.capture(),i.Z.timeEnd("capture!"),s}static bakeGIProbe(t,e,_){(_=_||{}).mipmap=!0;let n=_&&null!=_.resolute?_.resolute:Ut._S_DEFAULT_CAPTURE_RESOLUTE,s=Ut.captureProbe(t,e,_);i.Z.time("shCoeffs");let a=Ut.getShCoeffs(n,n,s.getCapturePixels(),Ut._S_FIX_SEAMS_METHOD.Wrap);return Ut.prepareShCoefs(a),e.setShCoeffs(a),i.Z.timeEnd("shCoeffs"),i.Z.time("prefiltered"),s.prefiltered(),e.setPrefilterEnvMap(s.getPrefilterTextureCube()),e.setPrefilterMipmap(s.getPrefilterMipMap()),i.Z.timeEnd("prefiltered"),s}static _bakePrefilteredEnvMap(t,e,_,i){t.getCapturePixels(),i.getCapturePixels();let n=new m.Z,s=new m.Z,a=(new N.Z,e);for(let t=0;t<4;t++){Ut._getRFM(t,4),Ut._getSFM(t,4);for(let t=0;t<a;t++)for(let e=0;e<a;e++)s.setToInXYZ(0,0,0),Ut._getVFCFTC(e,t,a,face,n,_)}}static _prefilterEnvMapTexel(t,e,_,i,n,s,a){let r=0,o=(Math.PI,256*Math.abs(i._m_Z+i._m_X)),h=(Math.cos(.5*o%(2*Math.PI)),_*_);h*=h;let l=Ut._S_TEMP_UNIT_X;Math.abs(i._m_Z)<.999&&(l=Ut._S_TEMP_UNIT_Y);let u=new m.Z,f=new m.Z;u.setTo(l),u.cross(i),u.normal(),f.setTo(i),f.cross(u);let c=new m.Z(0,0,1),g=new m.Z,d=new N.Z,S=new m.Z;for(let e=0;e<n;e++){d=Ut._getHPoint(e,n,d),S=Ut._iSGGX(d,h,S),S.normal();let a=S._m_Z,o=S.multLength(2*a).sub(c),m=(o._m_Z,s);0!=s&&(m=Ut._computeMipLevel(_,n,t,a)),Ut._2World(o,i,u,f,g),r+=0}}static _getHPoint(t,e,_){let i,n=t;return _._m_X=1*t/e,n=n<<16|n>>16,n=(1431655765&n)<<1|(2863311530&n)>>>1,n=(858993459&n)<<2|(3435973836&n)>>>2,n=(252645135&n)<<4|(4042322160&n)>>>4,n=(16711935&n)<<8|(4278255360&n)>>>8,n&=4294967295,_._m_Y=1*n*2.3283064365386963e-10,i=2*Math.PI*_._m_Y,_._m_Z=Math.cos(i),_._m_W=Math.sin(i),_}static _2World(t,e,_,i,n){n.setTo(_),n.multLength(t._m_X);let s=new m.Z;s.set(i),s.multLength(t._m_Y),n.add(s),s.set(e),s.multLength(t._m_Z),n.add(s)}static _samplePixel(t,e,_,i,n,s){if(i<=0)return 0;let a=new N.Z;return s._m_X=s._m_X+a._m_X*i,s._m_Y=s._m_Y+a._m_Y*i,s._m_Z=s._m_Z+a._m_Z*i,i}static _iSGGX(t,e,_){let i=Math.sqrt((1-t._m_X)/(1+(e-1)*t._m_X)),n=Math.sqrt(1-i*i),s=n*t._m_Z,a=n*t._m_W;return _._m_X=s,_._m_Y=a,_._m_Z=i,_}static _ggx(t,e){let _=e/(t*t*(e*e-1)+1);return _*_*(1/Math.PI)}static _computeMipLevel(t,e,_,i){let n=i+1e-5,s=1/(e*(Ut._ggx(n,t)*n/(4*i))),a=4*Math.PI/(6*_*_),r=Math.log(_)/Math.log(2),o=Math.log(s/a)/Math.log(2);return Math.min(Math.max(.5*o+1,0),1*r)}static _getRFM(t,e){let _=1/(e-1);return _*=t,_*_}static _getSFM(t,e){return 0==t?1:Math.min(1<<e-1+2*t,8192)}static prepareShCoefs(t){const e=Ut._S_SQRT_PI,_=Ut._S_SQRT_3PI,i=Ut._S_SQRT_5PI,n=Ut._S_SQRT_15PI;let s=1/(2*e),a=-_/2,r=-a,o=a,h=n/2,m=-h,l=i/4,u=m,f=n/4;t[0].multLength(s).multLength(Ut._S_SH_BAND_FACTOR[0]),t[1].multLength(a).multLength(Ut._S_SH_BAND_FACTOR[1]),t[2].multLength(-r).multLength(Ut._S_SH_BAND_FACTOR[2]),t[3].multLength(-o).multLength(Ut._S_SH_BAND_FACTOR[3]),t[4].multLength(-h).multLength(Ut._S_SH_BAND_FACTOR[4]),t[5].multLength(-m).multLength(Ut._S_SH_BAND_FACTOR[5]),t[6].multLength(l).multLength(Ut._S_SH_BAND_FACTOR[6]),t[7].multLength(u).multLength(Ut._S_SH_BAND_FACTOR[7]),t[8].multLength(f).multLength(Ut._S_SH_BAND_FACTOR[8])}static getShCoeffs(t,e,_,i){let n=[];for(let t=0;t<9;t++)n.push(new m.Z);let s,a=[],r=0,o=new m.Z,h=new N.Z;for(let m=0;m<6;m++)for(let l=0;l<e;l++)for(let u=0;u<t;u++){s=Ut.getSAAV(u,l,t,m,o,i),Ut.evalShBasis(o,a),Ut._getPixelColor(u,l,t,e,_[m],h);for(let t=0;t<9;t++)n[t].setToInXYZ(n[t]._m_X+h._m_X*a[t]*s,n[t]._m_Y+h._m_Y*a[t]*s,n[t]._m_Z+h._m_Z*a[t]*s);r+=s}for(let t=0;t<9;++t)n[t].multLength(4*Math.PI/r);return n}static _getPixelColor(t,e,_,i,n,s){t*=4,s._m_X=n[e*_*4+t],s._m_Y=n[e*_*4+t+1],s._m_Z=n[e*_*4+t+2],s._m_W=n[e*_*4+t+3]}static evalShBasis(t,e){let _=t._m_X,i=t._m_Y,n=t._m_Z,s=_*_,a=i*i,r=n*n;const o=Ut._S_SQRT_PI,h=Ut._S_SQRT_3PI,m=Ut._S_SQRT_5PI,l=Ut._S_SQRT_15PI;e[0]=1/(2*o),e[1]=-h*i/2,e[2]=h*n/2,e[3]=-h*_/2,e[4]=l*_*i/2,e[5]=-l*i*n/2,e[6]=m*(3*r-1)/4,e[7]=-l*_*n/2,e[8]=l*(s-a)/4}static getSAAV(t,e,_,i,n,s){let a,r,o,h,m=2*(t+.5)/(_*=1)-1,l=2*(e+.5)/_-1;Ut._getVFCFTC(t,e,_,i,n,s);let u=1/_;return a=m-u,r=l-u,o=m+u,h=l+u,Ut._areaElement(a,r)-Ut._areaElement(a,h)-Ut._areaElement(o,r)+Ut._areaElement(o,h)}static _areaElement(t,e){return Math.atan2(t*e,Math.sqrt(t*t+e*e+1))}static _getVFCFTC(t,e,_,i,n,s){let a,r;if(t*=1,e*=1,_*=1,s==Ut._S_FIX_SEAMS_METHOD.Stretch?(a=2*t/(_-1)-1,r=2*e/(_-1)-1):(a=2*(t+.5)/_-1,r=2*(e+.5)/_-1),s==Ut._S_FIX_SEAMS_METHOD.Wrap){let t=Math.pow(_,2)/Math.pow(_-1,3);a=t*Math.pow(a,3)+a,r=t*Math.pow(r,3)+r}switch(i){case 0:n.setToInXYZ(1,-r,-a);break;case 1:n.setToInXYZ(-1,-r,a);break;case 2:n.setToInXYZ(a,1,r);break;case 3:n.setToInXYZ(a,-1,-r);break;case 4:n.setToInXYZ(a,-r,1);break;case 5:n.setToInXYZ(-a,-r,-1)}return n.normal(),n}}var Wt=__webpack_require__(8948),Ht=__webpack_require__(6953),Xt=__webpack_require__(3245),Yt=__webpack_require__(1753);class kt extends k.Z{constructor(t){super(t),this._m_X=0,this._m_Y=0,this._m_Z=0,this._m_W=1}valueFromXYZW(t,e,_,i){return this._m_X=t,this._m_Y=e,this._m_Z=_,this._m_W=i,this}compare(t){return!1}_upload(t,e,_){t.uniform4f(e,this._m_X,this._m_Y,this._m_Z,this._m_W)}}var zt=__webpack_require__(8274),jt=__webpack_require__(8239),Kt=__webpack_require__(9870),qt=__webpack_require__(3286),Jt=__webpack_require__(3003),Qt=__webpack_require__(8005),$t=__webpack_require__(3250),te=__webpack_require__(1135),ee=__webpack_require__(6005);class _e{static DATA={5121:Uint8Array,5123:Uint16Array,5124:Uint16Array,5125:Uint32Array,5126:Float32Array};static DATA_COMPONENT={SCALAR:1,VEC3:3,VEC4:4,MAT4:16};static FILTERS={9729:Xt.Z.S_FILTERS.S_LINEAR,9728:Xt.Z.S_FILTERS.S_NEAREST,9987:Xt.Z.S_FILTERS.S_LINEAR_MIPMAP_LINEAR,9986:Xt.Z.S_FILTERS.S_NEAREST_MIPMAP_LINEAR,9985:Xt.Z.S_FILTERS.S_LINEAR_MIPMAP_NEAREST,9984:Xt.Z.S_FILTERS.S_NEAREST_MIPMAP_NEAREST};static WRAPS={10497:Xt.Z.S_WRAPS.S_REPEAT,33071:Xt.Z.S_WRAPS.S_CLAMP_TO_EDGE};_m_CustomMatDef=null;_m_MatDefSrc=ft.Z.S_PRINCIPLED_LIGHTING_DEF;_m_MagFilter=null;_m_MinFilter=null;_m_AlphaMode=null;config(t){this._m_AlphaMode=t.alphaMode||this._m_AlphaMode}load(t,e,_,i){this._m_Scene=t,this._m_Batch=i&&i.batch,this._m_GLTFRootNode=null,this._m_PrincipledMatDef=null,this._m_DefaultMatDef=null,this._m_Textures={},this._m_Joints={},this._m_Bones=[],this._m_Nodes={},this._m_Aps=[],this._m_Skeletons={},this._m_AnimationProcessors={},this._m_Mats={},this._m_MatMeshs={},this._m_BasePath=Bt.Z.getBasePath(e),this._loadGLTF(e,_)}reset(){this._m_GLTFRootNode=null,this._m_PrincipledMatDef=null,this._m_DefaultMatDef=null,this._m_Joints={},this._m_Bones=[],this._m_Nodes={},this._m_Aps=[],this._m_Skeletons={},this._m_AnimationProcessors={},this._m_Mats={},this._m_MatMeshs={}}setAssetsPath(t,e){this._m_AssetsPath=t,e&&(this._m_CustomMatDef=e)}useMatDef(t){this._m_MatDefSrc=t}compulsoryMinMag(t,e){this._m_MinFilter=t,this._m_MagFilter=e}_loadBIN(t,e,_,i,n){i>0?Bt.Z.loadFile(this._m_BasePath+t.buffers[_].uri,(s=>{i--,e.push({data:s,byteLength:t.buffers[_].byteLength}),this._loadBIN(t,e,++_,i,n)}),null,{inflate:!0}):n&&n()}_loadGLTF(t,e){Bt.Z.loadFile(t,(t=>{if((t=JSON.parse(t))&&t.buffers&&t.buffers.length>0){let _=t.buffers.length,n=0,s=[];this._loadBIN(t,s,n,_,(()=>{t.buffers=s;let _=null;if(v.Z.checkIsNull(t.scene)&&this._addScene(t),this._m_Batch?this._batchScene():(this._bindBone(),v.Z.checkIsNull(t.animations)&&(this._parseAnimations(t),this._m_Aps.forEach((t=>{t.skeleton.finished()})))),i.Z.log("当前材质:",this._m_Mats),this._m_Mats)for(let t in this._m_Mats)this._m_Mats[t].preload();e&&e(this._m_GLTFRootNode)}))}i.Z.log("gltf:",t)}))}_batchScene(){if(this._m_MatMeshs){let t=null,e=null;for(let _ in this._m_MatMeshs)t=this._m_MatMeshs[_].mesh,e=new D.Z(this._m_Scene,{id:_+"_"+v.Z.nextId()}),e.setMesh(t),e.updateBound(),e.setMaterial(this._m_Mats[_]),this._m_Mats[_].renderState&&("BLEND"!=this._m_Mats[_].renderState.alphaMode&&"MASK"!=this._m_Mats[_].renderState.alphaMode||e.setTranslucent()),this._m_GLTFRootNode.addChildren(e)}}_bindBone(){let t=null,e=null;for(let _=0;_<this._m_Aps.length;_++){t=this._m_Aps[_].skeleton.getJoints(),i.Z.log("jointcount:"+t.length);for(let _=0;_<t.length;_++)e=this._m_Nodes[t[_].getId()],e instanceof p||e._update2||(e.getType=function(){return"Bone"},e._update2=e._updateLocalMatrix,e.bind=function(t){this._m_Bind=t},e.getBind=function(){return this._m_Bind},e._updateLocalMatrix=function(){this._update2(),this._m_Bind&&this._m_Bind.actived()}),e&&t[_].link(e)}}_parseAnimations(t){let e=null,_=null,n=null,s=null,a=!1;t.animations.forEach((r=>{_=new T(this._getName(r.name)),e=new b,r.channels.forEach((o=>{let h=o.target.node;if(n=new E(o.target.path),this._m_Nodes[h]){F.createTrack(n,this._m_Nodes[h]);let m=r.samplers[o.sampler];this._parseSampler(t,m.input,m.output,m.interpolation,y.S_KEY_FRAME[o.target.path],n),e.addClip(n),a=!1;for(let t=0;t<this._m_Aps.length;t++){s=this._m_Aps[t].skeleton.getJoints();for(let e=0;e<s.length;e++)if(s[e].getId()==h){a=!0,this._m_Aps[t].animationProcessor.addAnimationAction(_);break}if(a)break}if(!a){i.Z.log(h+"非skin动画!path:"+o.target.path);let t=null;if(!this._m_AnimationProcessors[h]){let t=new C(this._m_GLTFRootNode,{id:v.Z.nextId()+"_"+h+"_animationProcessor"});this._m_AnimationProcessors[h]=t}t=this._m_AnimationProcessors[h],t.addAnimationAction(_)}}else i.Z.log("animation_node:"+h)})),_.setTrackMixer(e)}))}_getAccessorData(t,e){let _=t.accessors[e],i=t.buffers,n=t.bufferViews[_.bufferView],s=_e.DATA_COMPONENT[_.type];return new _e.DATA[_.componentType](i[n.buffer].data,(n.byteOffset||0)+(_.byteOffset||0),_.count*s)}_parseSampler(t,e,_,n,s,a){let r=this._getAccessorData(t,e),o=this._getAccessorData(t,_),h=t.accessors[e].count,m=_e.DATA_COMPONENT[t.accessors[_].type],l=null,u=0;for(let t=0;t<h;t++)u=t*m,m>3?(s||i.Z.warn("未知keyframe!"),l=new s(r[t],o[u],o[u+1],o[u+2],o[u+3])):(s||i.Z.warn("未知keyframe!"),l=new s(r[t],o[u],o[u+1],o[u+2])),l.setInterpolationMode(n),a.addKeyframe(l)}_addScene(t){if(v.Z.checkIsNull(t.scene)){let e=t.scenes[t.scene],_=new o.Z(this._m_Scene,{id:e.name});return this._m_Batch?(this._m_GLTFRootNode=new o.Z(this._m_Scene,{id:v.Z.nextId()+"_scene"}),this._m_GLTFRootNode.addChildren(_)):this._m_GLTFRootNode=_,v.Z.checkIsNull(e.nodes)&&e.nodes.forEach((e=>{this._addNode(t,_,e)})),this._m_GLTFRootNode}return null}_getName(t){return null==t||null==t||""==t?v.Z.nextId():t}_parseSkins(t,e){let _=t.skins[e],i=new L(this._getName(_.name)),n=null,s=this._getAccessorData(t,_.inverseBindMatrices),a=0,r=[];return _.joints.forEach((t=>{this._m_Joints[t]=!0,r.length=0;for(let t=0,e=16*a;t<16;t++)r.push(s[t+e]);n=new w(t,a),n.setJointSpace(r),i.addJoint(n),a++})),i}_addNode(t,e,_){let n=t.nodes[_],s=null;if(this._m_Joints[_]?(s=new p(e,{id:this._getName(n.name)}),this._m_Bones.push(s)):s=new o.Z(e,{id:this._getName(n.name)}),this._m_Nodes[_]=s,e.addChildren(s),v.Z.checkIsNull(n.children)&&n.children.forEach((e=>{this._addNode(t,s,e)})),s&&(v.Z.checkIsNull(n.scale)&&s.setLocalScaleXYZ(n.scale[0],n.scale[1],n.scale[2]),v.Z.checkIsNull(n.rotation)&&s.setLocalRotationFromXYZW(n.rotation[0],n.rotation[1],n.rotation[2],n.rotation[3]),v.Z.checkIsNull(n.translation)&&s.setLocalTranslationXYZ(n.translation[0],n.translation[1],n.translation[2]),v.Z.checkIsNull(n.matrix)&&s.setLocalMatrixFromArray(n.matrix)),v.Z.checkIsNull(n.mesh))if(this._m_Batch)this._parseMeshBatch(t,s,n.mesh);else if(this._parseMesh(t,s,n.mesh,v.Z.checkIsNull(n.skin)),v.Z.checkIsNull(n.skin)){let e=null;if(this._m_Skeletons[n.skin]?e=this._m_Skeletons[n.skin]:(e=this._parseSkins(t,n.skin),this._m_Skeletons[n.skin]=e,i.Z.log("创建Skeleton!")),s.getChildren().forEach((t=>{t.setSkeleton(e)})),this._m_AnimationProcessors[n.skin]);else{let t=new C(this._m_GLTFRootNode,{id:v.Z.nextId()+"_animationProcessor"});this._m_Aps.push({skeleton:e,animationProcessor:t}),this._m_AnimationProcessors[n.skin]=t}}}_transformVertex(t,e){let _=new N.Z,i=new N.Z,n=[];for(let s=0;s<t.length;s+=3)_.setToInXYZW(t[s],t[s+1],t[s+2],1),M.Z.multiplyMV(i,_,e),n.push(i._m_X),n.push(i._m_Y),n.push(i._m_Z);return n}_transformNormal(t,e){let _=new M.Z;_.set(e),_.inert(),_.transpose();let i=new N.Z,n=new N.Z,s=[];for(let _=0;_<t.length;_+=3)i.setToInXYZW(t[_],t[_+1],t[_+2],0),M.Z.multiplyMV(n,i,e),s.push(n._m_X),s.push(n._m_Y),s.push(n._m_Z);return s}_parseMeshBatch(e,_,i){let n=e.meshes[i].primitives,s=null,a=null;for(let i=0;i<n.length;i++){s=n[i];let r=null;if(v.Z.checkIsNull(s.material)){this._m_PrincipledMatDef||(this._m_AssetsPath&&this._m_CustomMatDef?this._m_PrincipledMatDef=et.Z.load(this._m_AssetsPath+this._m_CustomMatDef):this._m_PrincipledMatDef=et.Z.parse(this._m_MatDefSrc)),r=this._getName(e.materials[s.material].name);let t=null;this._m_Mats[r]?t=this._m_Mats[r]:(t=new tt.Z(this._m_Scene,{id:r,materialDef:this._m_PrincipledMatDef}),this._parseMaterial(e,s.material,t),this._m_Mats[r]=t)}else{this._m_DefaultMatDef||(this._m_AssetsPath?this._m_DefaultMatDef=et.Z.parse(ft.Z.S_COLOR_DEF_DATA):this._m_DefaultMatDef=et.Z.parse(this._m_MatDefSrc)),r="default_gltf_mat";let t=null;this._m_Mats[r]?t=this._m_Mats[r]:(t=new tt.Z(this._m_Scene,{id:r,materialDef:this._m_DefaultMatDef}),this._m_Mats[r]=t)}if(this._m_MatMeshs[r]){a=this._m_MatMeshs[r].mesh;let t=0;if(v.Z.checkIsNull(s.attributes.POSITION)){let i=this._parsePositions(e,s.attributes.POSITION);_&&(i.data=this._transformVertex(i.data,_.getWorldMatrix()));let n=a.getData(ht.Z.S_POSITIONS);n&&(t=n.length,i.data.forEach((t=>{n.push(t)})),a.setData(ht.Z.S_POSITIONS,n))}if(v.Z.checkIsNull(s.attributes.NORMAL)){let t=this._parseNormals(e,s.attributes.NORMAL);_&&(t.data=this._transformNormal(t.data,_.getWorldMatrix()));let i=a.getData(ht.Z.S_NORMALS);i&&(t.data.forEach((t=>{i.push(t)})),a.setData(ht.Z.S_NORMALS,i))}if(v.Z.checkIsNull(s.attributes.TEXCOORD_0)){let t=this._parseTexcoords(e,s.attributes.TEXCOORD_0),_=a.getData(ht.Z.S_UV0);_&&(t.data.forEach((t=>{_.push(t)})),a.setData(ht.Z.S_UV0,_))}if(v.Z.checkIsNull(s.indices)){let _=this._parseIndices(e,s.indices),i=a.getData(ht.Z.S_INDICES),n=0;i?(n=t/3,_.data.forEach((t=>{i.push(t+n)})),a.setData(5125==_.bufType?ht.Z.S_INDICES_32:ht.Z.S_INDICES,i),5125!=_.bufType&&a.setData(ht.Z.S_INDICES,null)):(i=a.getData(ht.Z.S_INDICES_32),i&&(n=t/3,_.data.forEach((t=>{i.push(t+n)})),a.setData(ht.Z.S_INDICES_32,i)))}if(v.Z.checkIsNull(s.attributes.TANGENT)){let t=this._parseTangents(e,s.attributes.TANGENT),_=a.getData(ht.Z.S_TANGENTS);_&&(t.data.forEach((t=>{_.push(t)})),a.setData(ht.Z.S_TANGENTS,_))}else if(a.getData(ht.Z.S_UV0)){let t=v.Z.generatorTangents(a.getData(ht.Z.S_INDICES)?a.getData(ht.Z.S_INDICES):a.getData(ht.Z.S_INDICES_32),a.getData(ht.Z.S_POSITIONS),a.getData(ht.Z.S_UV0)),e=a.getData(ht.Z.S_TANGENTS);e&&(t.forEach((t=>{e.push(t)})),a.setData(ht.Z.S_TANGENTS,e))}else{let t=v.Z.generatorFillTangents(a.getData(ht.Z.S_INDICES)?a.getData(ht.Z.S_INDICES):a.getData(ht.Z.S_INDICES_32),a.getData(ht.Z.S_POSITIONS),a.getData(ht.Z.S_UV0)),e=a.getData(ht.Z.S_TANGENTS);e&&(t.forEach((t=>{e.push(t)})),a.setData(ht.Z.S_TANGENTS,e))}}else{if(a=new ht.Z,v.Z.checkIsNull(s.attributes.POSITION)){let t=this._parsePositions(e,s.attributes.POSITION);_&&(t.data=this._transformVertex(t.data,_.getWorldMatrix())),a.setData(ht.Z.S_POSITIONS,t.data)}if(v.Z.checkIsNull(s.attributes.NORMAL)){let t=this._parseNormals(e,s.attributes.NORMAL);_&&(t.data=this._transformNormal(t.data,_.getWorldMatrix())),a.setData(ht.Z.S_NORMALS,t.data)}if(v.Z.checkIsNull(s.attributes.TEXCOORD_0)){let t=this._parseTexcoords(e,s.attributes.TEXCOORD_0),_=[];for(let e=0;e<t.data.length;e++)_.push(t.data[e]);a.setData(ht.Z.S_UV0,_)}if(v.Z.checkIsNull(s.indices)){let t=this._parseIndices(e,s.indices),_=[];for(let e=0;e<t.data.length;e++)_.push(t.data[e]);a.setData(5125==t.bufType?ht.Z.S_INDICES_32:ht.Z.S_INDICES,_)}if(v.Z.checkIsNull(s.attributes.TANGENT)){let t=this._parseTangents(e,s.attributes.TANGENT),_=[];for(let e=0;e<t.data.length;e++)_.push(t.data[e]);a.setData(ht.Z.S_TANGENTS,_)}else if(a.getData(ht.Z.S_UV0)){let t=v.Z.generatorTangents2(a.getData(ht.Z.S_INDICES)?a.getData(ht.Z.S_INDICES):a.getData(ht.Z.S_INDICES_32),a.getData(ht.Z.S_POSITIONS),a.getData(ht.Z.S_UV0),a.getData(ht.Z.S_NORMALS)),e=[];for(let _=0;_<t.length;_++)e.push(t[_]);a.setData(ht.Z.S_TANGENTS,e)}else{let e=v.Z.generatorFillTangents2(a.getData(ht.Z.S_INDICES)?a.getData(ht.Z.S_INDICES):a.getData(ht.Z.S_INDICES_32),a.getData(ht.Z.S_POSITIONS),a.getData(ht.Z.S_UV0));for(let _=0;_<e.length;_++)t.push(e[_]);a.setData(ht.Z.S_TANGENTS,t)}this._m_MatMeshs[r]={mesh:a}}}}_parseMesh(t,e,_,i){let n=t.meshes[_],s=n.primitives,a=null,r=null,o=null;for(let _=0;_<s.length;_++){if(a=s[_],r=i?new A(e,{id:this._getName(n.name)+_}):new D.Z(e,{id:this._getName(n.name)+_}),e.addChildren(r),o=new ht.Z,v.Z.checkIsNull(a.attributes.POSITION)){let e=this._parsePositions(t,a.attributes.POSITION);o.setData(ht.Z.S_POSITIONS,e.data)}if(v.Z.checkIsNull(a.attributes.NORMAL)){let e=this._parseNormals(t,a.attributes.NORMAL);o.setData(ht.Z.S_NORMALS,e.data)}if(v.Z.checkIsNull(a.attributes.TEXCOORD_0)){let e=this._parseTexcoords(t,a.attributes.TEXCOORD_0);o.setData(ht.Z.S_UV0,e.data)}if(i){if(v.Z.checkIsNull(a.attributes.JOINTS_0)){let e=this._parseJoints(t,a.attributes.JOINTS_0);o.setData(5125==e.bufType?ht.Z.S_JOINTS_0_32:ht.Z.S_JOINTS_0,e.data)}if(v.Z.checkIsNull(a.attributes.WEIGHTS_0)){let e=this._parseWeights(t,a.attributes.WEIGHTS_0);o.setData(ht.Z.S_WEIGHTS_0,e.data)}}if(v.Z.checkIsNull(a.indices)){let e=this._parseIndices(t,a.indices);o.setData(5125==e.bufType?ht.Z.S_INDICES_32:ht.Z.S_INDICES,e.data)}if(v.Z.checkIsNull(a.attributes.TANGENT)){let e=this._parseTangents(t,a.attributes.TANGENT);o.setData(ht.Z.S_TANGENTS,e.data)}else if(o.getData(ht.Z.S_UV0)){console.log("生成切线数据");let t=v.Z.generatorTangents2(o.getData(ht.Z.S_INDICES)?o.getData(ht.Z.S_INDICES):o.getData(ht.Z.S_INDICES_32),o.getData(ht.Z.S_POSITIONS),o.getData(ht.Z.S_UV0),o.getData(ht.Z.S_NORMALS));o.setData(ht.Z.S_TANGENTS,t)}else console.log("-----------------------------");if(v.Z.checkIsNull(a.material)){this._m_PrincipledMatDef||(this._m_AssetsPath,this._m_PrincipledMatDef=et.Z.parse(this._m_MatDefSrc));let e=this._getName(t.materials[a.material].name),_=null;this._m_Mats[e]?_=this._m_Mats[e]:(_=new tt.Z(this._m_Scene,{id:e,materialDef:this._m_PrincipledMatDef}),this._parseMaterial(t,a.material,_),this._m_Mats[e]=_),r.setMaterial(_),_.renderState&&("BLEND"!=_.renderState.alphaMode&&"MASK"!=_.renderState.alphaMode||r.setTranslucent())}else{this._m_DefaultMatDef||(this._m_DefaultMatDef=et.Z.parse(ft.Z.S_COLOR_DEF_DATA));let t="default_gltf_mat",e=null;this._m_Mats[t]?e=this._m_Mats[t]:(e=new tt.Z(this._m_Scene,{id:t,materialDef:this._m_DefaultMatDef}),this._m_Mats[t]=e),r.setMaterial(e)}r.setMesh(o),r.updateBound(),i&&r.getMaterial().addDefine(P.Z.S_SKINS_SRC)}}_samplerMap(t,e,_){let i=t.textures[e],n=t.images[i.source];if(this._m_Textures[n.uri])return this._m_Textures[n.uri];let s=new Xt.Z(this._m_Scene);if(_&&s.setTextureFormat(Xt.Z.S_TEXTURE_FORMAT.S_SRGBA,Xt.Z.S_TEXTURE_FORMAT.S_RGBA,Xt.Z.S_TEXTURE_FORMAT.S_UNSIGNED_BYTE),s.setImageSrc(this._m_Scene,this._m_BasePath+n.uri),v.Z.checkIsNull(i.sampler)){let e=t.samplers[i.sampler];if(v.Z.checkIsNull(e)){if(null!=this._m_MinFilter&&null!=this._m_MagFilter)s.setFilter(this._m_Scene,this._m_MinFilter,this._m_MagFilter);else{let t=e.magFilter,_=e.minFilter;t&&_&&s.setFilter(this._m_Scene,_e.FILTERS[_],_e.FILTERS[t])}let t=e.wrapS,_=e.wrapT;t&&_&&s.setWrap(this._m_Scene,_e.WRAPS[t],_e.WRAPS[_])}}return this._m_Textures[n.uri]=s,s}_parseMaterial(t,e,_){let i=t.materials[e];if(i.pbrMetallicRoughness){let e=i.pbrMetallicRoughness,n=e.baseColorFactor;v.Z.checkIsNull(n)&&_.setParam("baseColor",(new kt).valueFromXYZW(n[0],n[1],n[2],n[3]));let s=e.roughnessFactor;v.Z.checkIsNull(s)&&_.setParam("roughness",(new Vt.Z).valueOf(s));let a=e.metallicFactor;v.Z.checkIsNull(a)&&_.setParam("metallic",(new Vt.Z).valueOf(a));let r=e.baseColorTexture;v.Z.checkIsNull(r)&&_.setParam("baseColorMap",this._samplerMap(t,r.index,!0));let o=e.metallicRoughnessTexture;v.Z.checkIsNull(o)&&_.setParam("metallicRoughnessMap",this._samplerMap(t,o.index))}if(i.extensions&&i.extensions.KHR_materials_pbrSpecularGlossiness){let e=i.extensions.KHR_materials_pbrSpecularGlossiness;_.setParam("useSpecGloss",(new Wt.Z).valueOf(!0));let n=e.diffuseTexture;v.Z.checkIsNull(n)&&_.setParam("baseColorMap",this._samplerMap(t,n.index,!0));let s=e.specularGlossinessTexture;v.Z.checkIsNull(s)&&_.setParam("specularGlossinessMap",this._samplerMap(t,s.index,!0))}let n=i.normalTexture;v.Z.checkIsNull(n)&&_.setParam("normalMap",this._samplerMap(t,n.index));let s=i.occlusionTexture;if(v.Z.checkIsNull(s)){let e=s.texCoord;_.setParam("lightMap",this._samplerMap(t,s.index,!0)),null!=e&&0!=e||_.setParam("aoMap",(new Wt.Z).valueOf(!0))}let a=i.emissiveFactor;v.Z.checkIsNull(a)&&_.setParam("emissive",(new kt).valueFromXYZW(a[0],a[1],a[2],1));let r=i.emissiveTexture;v.Z.checkIsNull(r)&&_.setParam("emissiveMap",this._samplerMap(t,r.index,!0));let o={};i.alphaMode&&("discard"==this._m_AlphaMode?_.setParam("alphaDiscard",(new Vt.Z).valueOf(.1)):o.alphaMode=i.alphaMode),i.doubleSided&&(o.doubleSided=i.doubleSided),_.renderState=o}_parsePositions(t,e){let _=t.accessors[e],i=t.buffers,n=t.bufferViews[_.bufferView],s=i[n.buffer].data;return{data:new _e.DATA[_.componentType](s,(n.byteOffset||0)+(_.byteOffset||0),3*_.count),bufType:_.componentType}}_parseTangents(t,e){let _=t.accessors[e],i=t.buffers,n=t.bufferViews[_.bufferView],s=i[n.buffer].data;return{data:new _e.DATA[_.componentType](s,(n.byteOffset||0)+(_.byteOffset||0),4*_.count),bufType:_.componentType}}_parseNormals(t,e){let _=t.accessors[e],i=t.buffers,n=t.bufferViews[_.bufferView],s=i[n.buffer].data;return{data:new _e.DATA[_.componentType](s,(n.byteOffset||0)+(_.byteOffset||0),3*_.count),bufType:_.componentType}}_parseTexcoords(t,e){let _=t.accessors[e],i=t.buffers,n=t.bufferViews[_.bufferView],s=i[n.buffer].data;return{data:new _e.DATA[_.componentType](s,(n.byteOffset||0)+(_.byteOffset||0),2*_.count),bufType:_.componentType}}_parseIndices(t,e){let _=t.accessors[e],i=t.buffers,n=t.bufferViews[_.bufferView],s=i[n.buffer].data;return{data:new _e.DATA[_.componentType](s,(n.byteOffset||0)+(_.byteOffset||0),_.count),bufType:_.componentType}}_parseJoints(t,e){let _=t.accessors[e],i=t.buffers,n=t.bufferViews[_.bufferView],s=i[n.buffer].data;return{data:new _e.DATA[_.componentType](s,(n.byteOffset||0)+(_.byteOffset||0),4*_.count),bufType:_.componentType}}_parseWeights(t,e){let _=t.accessors[e],i=t.buffers,n=t.bufferViews[_.bufferView],s=i[n.buffer].data;return{data:new _e.DATA[_.componentType](s,(n.byteOffset||0)+(_.byteOffset||0),4*_.count),bufType:_.componentType}}}class ie{static S_ALPHA_MODE_BLEND="blend";static S_ALPHA_MODE_DISCARD="discard";_m_CustomMatDef=null;_m_MatDefSrc=ft.Z.S_BASIC_LIGHTING_DEF_DATA;_m_AlphaMode=ie.S_ALPHA_MODE_BLEND;load(t,e,_,i){this._m_Scene=t,this._m_Textures={},this._m_DefaultMatDef=null,this._m_Mats={},this._m_CurrentMat=null;let n=new o.Z(t,{id:e||v.Z.nextId()});this._load(n,_,i)}config(t){this._m_AlphaMode=t.alphaMode||this._m_AlphaMode}setAssetsPath(t,e){this._m_AssetsPath=t,e&&(this._m_CustomMatDef=e)}useDeferredMatDef(){this.setMatDef(ft.Z.S_DEFERRED_LIGHTING_DEF_DATA)}setMatDef(t){t&&(this._m_MatDefSrc=t)}_load(t,e,_){this.loadOBJ(t,e,(e=>{this._m_DefaultMatDef||(this._m_AssetsPath&&this._m_CustomMatDef?this._m_DefaultMatDef=et.Z.load(this._m_AssetsPath+this._m_CustomMatDef):this._m_DefaultMatDef=et.Z.parse(this._m_MatDefSrc)),this.loadMTLs(t,e,(()=>{this.createMeshes(t,e),_&&_(t)}))}))}loadOBJ(t,e,_){this.loadFile(e,(i=>{let n=this.parseOBJ(t,i,e);_(n)}),(t=>{i.Z.error(t)}))}parseOBJ(t,e,_){const n={vertex_pattern:/^v\s+([\d|\.|\+|\-|e|E]+)\s+([\d|\.|\+|\-|e|E]+)\s+([\d|\.|\+|\-|e|E]+)/,normal_pattern:/^vn\s+([\d|\.|\+|\-|e|E]+)\s+([\d|\.|\+|\-|e|E]+)\s+([\d|\.|\+|\-|e|E]+)/,uv_pattern:/^vt\s+([\d|\.|\+|\-|e|E]+)\s+([\d|\.|\+|\-|e|E]+)/,face_vertex:/^f\s+(-?\d+)\s+(-?\d+)\s+(-?\d+)(?:\s+(-?\d+))?/,face_vertex_uv:/^f\s+(-?\d+)\/(-?\d+)\s+(-?\d+)\/(-?\d+)\s+(-?\d+)\/(-?\d+)(?:\s+(-?\d+)\/(-?\d+))?/,face_vertex_uv_normal:/^f\s+(-?\d+)\/(-?\d+)\/(-?\d+)\s+(-?\d+)\/(-?\d+)\/(-?\d+)\s+(-?\d+)\/(-?\d+)\/(-?\d+)(?:\s+(-?\d+)\/(-?\d+)\/(-?\d+))?/,face_vertex_normal:/^f\s+(-?\d+)\/\/(-?\d+)\s+(-?\d+)\/\/(-?\d+)\s+(-?\d+)\/\/(-?\d+)(?:\s+(-?\d+)\/\/(-?\d+))?/,object_pattern:/^[og]\s*(.+)?/,smoothing_pattern:/^s\s+(\d+|on|off)/,material_library_pattern:/^mtllib /,material_use_pattern:/^usemtl /};let s={src:_=_||"",basePath:this.getBasePath(_),objects:[],object:{},positions:[],normals:[],uv:[],materialLibraries:{}};this.startObject(s,"",!1),-1!==e.indexOf("\r\n")&&(e=e.replace("\r\n","\n"));let a=e.split("\n"),r="",o="",h="",m=0,l=[],u="function"==typeof"".trimLeft;for(let t=0,e=a.length;t<e;t++)if(r=a[t],r=u?r.trimLeft():r.trim(),m=r.length,0!==m&&(o=r.charAt(0),"#"!==o))if("v"===o)if(h=r.charAt(1)," "===h&&null!==(l=n.vertex_pattern.exec(r)))s.positions.push(parseFloat(l[1]),parseFloat(l[2]),parseFloat(l[3]));else if("n"===h&&null!==(l=n.normal_pattern.exec(r)))s.normals.push(parseFloat(l[1]),parseFloat(l[2]),parseFloat(l[3]));else{if("t"!==h||null===(l=n.uv_pattern.exec(r)))return void i.Z.error("Unexpected vertex/normal/uv line: '"+r+"'");s.uv.push(parseFloat(l[1]),parseFloat(l[2]))}else if("f"===o)if(null!==(l=n.face_vertex_uv_normal.exec(r)))this.addFace(s,l[1],l[4],l[7],l[10],l[2],l[5],l[8],l[11],l[3],l[6],l[9],l[12]);else if(null!==(l=n.face_vertex_uv.exec(r)))this.addFace(s,l[1],l[3],l[5],l[7],l[2],l[4],l[6],l[8]);else if(null!==(l=n.face_vertex_normal.exec(r)))this.addFace(s,l[1],l[3],l[5],l[7],void 0,void 0,void 0,void 0,l[2],l[4],l[6],l[8]);else{if(null===(l=n.face_vertex.exec(r)))return void i.Z.error("Unexpected face line: '"+r+"'");this.addFace(s,l[1],l[2],l[3],l[4])}else if("l"===o){let t=r.substring(1).trim().split(" "),e=[],_=[];if(-1===r.indexOf("/"))e=t;else for(let i=0,n=t.length;i<n;i++){let n=t[i].split("/");""!==n[0]&&e.push(n[0]),""!==n[1]&&_.push(n[1])}this.addLineGeometry(s,e,_)}else if(null!==(l=n.object_pattern.exec(r))){let t=l[0].substr(1).trim();this.startObject(s,t,!0)}else if(n.material_use_pattern.test(r)){let t=r.substring(7).trim();s.object.material.id=t}else if(n.material_library_pattern.test(r))s.materialLibraries[r.substring(7).trim()]=!0;else{if(null===(l=n.smoothing_pattern.exec(r))){if("\0"===r)continue;return void i.Z.error("Unexpected line: '"+r+"'")}{let t=l[1].trim().toLowerCase();s.object.material.smooth="1"===t||"on"===t}}return s}getBasePath(t){let e=t.lastIndexOf("/");return-1===e?t:t.substring(0,e+1)}startObject(t,e,_){if(t.object&&!1===t.object.fromDeclaration)return t.object.id=e,void(t.object.fromDeclaration=!1!==_);t.object={id:e||"",geometry:{positions:[],normals:[],uv:[]},material:{id:"",smooth:!0},fromDeclaration:!1!==_},t.objects.push(t.object)}parseVertexIndex(t,e){let _=parseInt(t,10);return 3*(_>=0?_-1:_+e/3)}parseNormalIndex(t,e){let _=parseInt(t,10);return 3*(_>=0?_-1:_+e/3)}parseUVIndex(t,e){let _=parseInt(t,10);return 2*(_>=0?_-1:_+e/2)}addVertex(t,e,_,i){let n=t.positions,s=t.object.geometry.positions;s.push(n[e+0]),s.push(n[e+1]),s.push(n[e+2]),s.push(n[_+0]),s.push(n[_+1]),s.push(n[_+2]),s.push(n[i+0]),s.push(n[i+1]),s.push(n[i+2])}addVertexLine(t,e){let _=t.positions,i=t.object.geometry.positions;i.push(_[e+0]),i.push(_[e+1]),i.push(_[e+2])}addNormal(t,e,_,i){let n=t.normals,s=t.object.geometry.normals;s.push(n[e+0]),s.push(n[e+1]),s.push(n[e+2]),s.push(n[_+0]),s.push(n[_+1]),s.push(n[_+2]),s.push(n[i+0]),s.push(n[i+1]),s.push(n[i+2])}addUV(t,e,_,i){let n=t.uv,s=t.object.geometry.uv;s.push(n[e+0]),s.push(n[e+1]),s.push(n[_+0]),s.push(n[_+1]),s.push(n[i+0]),s.push(n[i+1])}addUVLine(t,e){let _=t.uv,i=t.object.geometry.uv;i.push(_[e+0]),i.push(_[e+1])}addFace(t,e,_,i,n,s,a,r,o,h,m,l,u){let f,c=t.positions.length,g=this.parseVertexIndex(e,c),d=this.parseVertexIndex(_,c),S=this.parseVertexIndex(i,c);if(void 0===n?this.addVertex(t,g,d,S):(f=this.parseVertexIndex(n,c),this.addVertex(t,g,d,f),this.addVertex(t,d,S,f)),void 0!==s){let e=t.uv.length;g=this.parseUVIndex(s,e),d=this.parseUVIndex(a,e),S=this.parseUVIndex(r,e),void 0===n?this.addUV(t,g,d,S):(f=this.parseUVIndex(o,e),this.addUV(t,g,d,f),this.addUV(t,d,S,f))}if(void 0!==h){let e=t.normals.length;g=this.parseNormalIndex(h,e),d=h===m?g:this.parseNormalIndex(m,e),S=h===l?g:this.parseNormalIndex(l,e),void 0===n?this.addNormal(t,g,d,S):(f=this.parseNormalIndex(u,e),this.addNormal(t,g,d,f),this.addNormal(t,d,S,f))}}addLineGeometry(t,e,_){t.object.geometry.type="Line";let i=t.positions.length,n=t.uv.length;for(let _=0,n=e.length;_<n;_++)this.addVertexLine(t,this.parseVertexIndex(e[_],i));for(let e=0,i=_.length;e<i;e++)this.addUVLine(t,this.parseUVIndex(_[e],n))}loadMTLs(t,e,_){let i=e.basePath,n=Object.keys(e.materialLibraries),s=n.length;for(let e=0,a=s;e<a;e++)this.loadMTL(t,i,i+n[e],(()=>{0==--s&&_()}))}loadMTL(t,e,_,n){this.loadFile(_,(_=>{this.parseMTL(t,_,e),n()}),(t=>{i.Z.error(t),n()}))}createTexture(t,e,_,i){let n={},s=_.split(/\s+/),a=s.indexOf("-bm");if(a>=0&&s.splice(a,2),a=s.indexOf("-s"),a>=0&&(n.scale=[parseFloat(s[a+1]),parseFloat(s[a+2])],s.splice(a,4)),a=s.indexOf("-o"),a>=0&&(n.translate=[parseFloat(s[a+1]),parseFloat(s[a+2])],s.splice(a,4)),n.src=e+s.join(" ").trim(),this._m_Textures[n.src])return this._m_Textures[n.src];n.flipY=!0,n.encoding=i||"linear";let r=new Xt.Z(this._m_Scene);return"sRGB"==n.encoding&&r.setTextureFormat(Xt.Z.S_TEXTURE_FORMAT.S_SRGBA,Xt.Z.S_TEXTURE_FORMAT.S_RGBA,Xt.Z.S_TEXTURE_FORMAT.S_UNSIGNED_BYTE),r.setPreloadColor(this._m_Scene,new N.Z(.2,.2,.2,1)),r.setImageSrc(this._m_Scene,n.src),r.setFlipY(!0),this._m_Textures[n.src]=r,r}createMaterial(t,e){if(this._m_DefaultMatDef&&!this._m_Mats[e.id]){let t=new tt.Z(this._m_Scene,{id:e.id,materialDef:this._m_DefaultMatDef});this._m_Mats[e.id]=t,this._m_CurrentMat=t,this._m_CurrentMat.setParam("diffuseColor",(new kt).valueFromXYZW(.5,.5,.5,1)),this._m_CurrentMat.setParam("ambientColor",(new kt).valueFromXYZW(.2,.2,.2,1)),this._m_CurrentMat.setParam("specularColor",(new kt).valueFromXYZW(1,1,1,1)),this._m_CurrentMat.setParam("shininess",(new Vt.Z).valueOf(32))}}parseRGB(t){let e=t.split(/\s+/,3);return[parseFloat(e[0]),parseFloat(e[1]),parseFloat(e[2])]}parseMTL(t,e,_){let i,n,s,a,r,o=e.split("\n"),h={id:"Default"};_=_||"";for(let e=0;e<o.length;e++)if(i=o[e].trim(),0!==i.length&&"#"!==i.charAt(0))switch(n=i.indexOf(" "),s=n>=0?i.substring(0,n):i,s=s.toLowerCase(),a=n>=0?i.substring(n+1):"",a=a.trim(),s.toLowerCase()){case"newmtl":h={id:a},this.createMaterial(t,h);break;case"ka":h.ambient=this.parseRGB(a),this._m_CurrentMat.setParam("ambientColor",(new kt).valueFromXYZW(h.ambient[0],h.ambient[1],h.ambient[2],1));break;case"kd":h.diffuse=this.parseRGB(a),this._m_CurrentMat.setParam("diffuseColor",(new kt).valueFromXYZW(h.diffuse[0],h.diffuse[1],h.diffuse[2],1));break;case"ks":h.specular=this.parseRGB(a),this._m_CurrentMat.setParam("specularColor",(new kt).valueFromXYZW(h.specular[0],h.specular[1],h.specular[2],1));break;case"map_kd":h.diffuseMap||(h.diffuseMap=this.createTexture(t,_,a,"sRGB"),this._m_CurrentMat.setParam("diffuseMap",h.diffuseMap));break;case"map_ks":h.specularMap||(h.specularMap=this.createTexture(t,_,a,"linear"),this._m_CurrentMat.setParam("specularMap",h.specularMap));break;case"map_bump":case"bump":h.normalMap||(h.normalMap=this.createTexture(t,_,a),this._m_CurrentMat.setParam("normalMap",h.normalMap));break;case"ns":h.shininess=parseFloat(a),this._m_CurrentMat.setParam("shininess",(new Vt.Z).valueOf(h.shininess));break;case"d":r=parseFloat(a),r<=.1&&(this._m_AlphaMode==ie.S_ALPHA_MODE_BLEND?this._m_CurrentMat.alphaMode="blend":this._m_AlphaMode==ie.S_ALPHA_MODE_DISCARD&&this._m_CurrentMat.setParam("alphaDiscard",(new Vt.Z).valueOf(r))),r<1&&(h.alpha=r,this._m_AlphaMode==ie.S_ALPHA_MODE_BLEND&&(h.alphaMode="blend"));break;case"tr":r=parseFloat(a),r<=.1&&(this._m_AlphaMode==ie.S_ALPHA_MODE_BLEND?this._m_CurrentMat.alphaMode="blend":this._m_AlphaMode==ie.S_ALPHA_MODE_DISCARD&&this._m_CurrentMat.setParam("alphaDiscard",(new Vt.Z).valueOf(Math.max(r,.1)))),r>0&&(h.alpha=1-r,this._m_AlphaMode==ie.S_ALPHA_MODE_BLEND&&(h.alphaMode="blend"))}}createMeshes(t,e){i.Z.debug("state.objects.length:"+e.objects.length);let _={},n=0;for(let t=0,s=e.objects.length;t<s;t++){let s,a=e.objects[t],r=a.geometry,o=(r.type,a.material.id),h=null;if(0!==r.positions.length)if(_[o]){let t=_[o].mesh,e=_[o].unitType,i=t.getData(ht.Z.S_POSITIONS),n=new Array(r.positions.length/3);for(let t=0,e=i.length/3;t<n.length;t++)n[t]=t+e;if(i&&r.positions.forEach((t=>{i.push(t)})),t.setData(ht.Z.S_POSITIONS,i),r.normals.length>0){let e=t.getData(ht.Z.S_NORMALS);e&&r.normals.forEach((t=>{e.push(t)})),t.setData(ht.Z.S_NORMALS,e)}if(r.uv.length>0){let e=t.getData(ht.Z.S_UV0);e&&r.uv.forEach((t=>{e.push(t)})),t.setData(ht.Z.S_UV0,e)}let s=t.getData(e);s&&n.forEach((t=>{s.push(t)})),t.setData(e,s)}else{n++;let t=new Array(r.positions.length/3);h=t.length>65534?ht.Z.S_INDICES_32:ht.Z.S_INDICES;for(let e=0;e<t.length;e++)t[e]=e;let e=new ht.Z;if(e.setData(ht.Z.S_POSITIONS,r.positions),r.normals.length>0&&e.setData(ht.Z.S_NORMALS,r.normals),r.uv.length>0&&e.setData(ht.Z.S_UV0,r.uv),e.setData(h,t),o&&""!==o)s=this._m_Mats[o],s||i.Z.error("Material not found: "+o);else if(this._m_DefaultMatDef){if(!this._m_Mats.Default){let t=new tt.Z(this._m_Scene,{id:"Default",materialDef:this._m_DefaultMatDef});this._m_Mats.Default=t}s=this._m_Mats.Default}_[o]={mesh:e,material:s,unitType:h}}}if(n){i.Z.debug("实体数量:"+n);for(let e in _){let i=_[e].material,n=_[e].unitType,s=_[e].mesh;if(s.getData(ht.Z.S_UV0)){let t=v.Z.generatorTangents2(s.getData(n),s.getData(ht.Z.S_POSITIONS),s.getData(ht.Z.S_UV0),s.getData(ht.Z.S_NORMALS));s.setData(ht.Z.S_TANGENTS,t)}else{let t=v.Z.generatorFillTangents2(s.getData(ht.Z.S_POSITIONS));s.setData(ht.Z.S_TANGENTS,t)}let a=new D.Z(t,{id:"Geo_"+e});a.setMesh(s),a.setMaterial(i),a.updateBound(),i.alphaMode&&a.setTranslucent(),t.addChildren(a)}}}loadFile(t,e,_){let n=new XMLHttpRequest;n.open("GET",t,!0),n.addEventListener("load",(t=>{let s=t.target.response;200===n.status?e&&e(s):0===n.status?(i.Z.warn("loadFile: HTTP Status 0 received."),e&&e(s)):_&&_(t)}),!1),n.addEventListener("error",(t=>{_&&_(t)}),!1),n.send(null)}}var ne=__webpack_require__(8534),se=__webpack_require__(4933);class ae extends D.Z{constructor(t,e){super(t,e);let _,i,n,s,a,r,o,h,m=e.width||1,l=e.height||1,u=[],f=[],c=[],g=[],d=m/2,S=l/2,p=e.widthSegments||1,C=e.heightSegments||1,T=p+1,E=C+1,D=m/p,P=l/C;for(i=0;i<E;i++)for(_=0;_<T;_++)n=_*D-d,s=i*P-S,u.push(n),u.push(0),u.push(-s),f.push(0),f.push(1),f.push(0),c.push(_/p),c.push(1-i/C);for(i=0;i<C;i++)for(_=0;_<p;_++)a=_+T*i,r=_+T*(i+1),o=_+1+T*(i+1),h=_+1+T*i,g.push(a),g.push(r),g.push(o),g.push(o),g.push(h),g.push(a);let M=new ht.Z;M.setData(ht.Z.S_POSITIONS,u),M.setData(ht.Z.S_NORMALS,f),M.setData(ht.Z.S_UV0,c),M.setData(ht.Z.S_INDICES,g);let x=v.Z.generatorTangents2(M.getData(ht.Z.S_INDICES),M.getData(ht.Z.S_POSITIONS),M.getData(ht.Z.S_UV0),M.getData(ht.Z.S_NORMALS));M.setData(ht.Z.S_TANGENTS,x),M.setPrimitive(ht.Z.S_PRIMITIVE_LINES),this.setMesh(M),this.updateBound()}}class re extends D.Z{constructor(t,e){super(t,e);let _=void 0!==e.radiusTop?e.radiusTop:1,i=void 0!==e.radiusBottom?e.radiusBottom:1,n=void 0!==e.height?e.height:1,s=e.radialSegments||60,a=e.heightSegments||1,r=e.openEnded||!1,o=n/2,h=n/a,m=2*Math.PI/s,l=1/s,u=(this.radiusBottom,(_-i)/a),f=[],c=[],g=[],d=[],S=(90-180*Math.atan(n/(i-_))/Math.PI)/90;for(let t=0;t<=a;t++){let e=_-t*u,i=o-t*h;for(let _=0;_<=s;_++){let n=Math.sin(_*m),s=Math.cos(_*m);c.push(e*n),c.push(S),c.push(e*s),g.push(1-_*l),g.push(0+1*t/a),f.push(e*n),f.push(i),f.push(e*s)}}for(let t=0;t<a;t++)for(let e=0;e<=s;e++){let _=t*(s+1)+e,i=_+s;d.push(_),d.push(i),d.push(i+1),d.push(_),d.push(i+1),d.push(_+1)}if(!r&&_>0){let t=f.length/3;c.push(0),c.push(1),c.push(0),g.push(.5),g.push(.5),f.push(0),f.push(o),f.push(0);for(let t=0;t<=s;t++){let e=Math.sin(t*m),i=Math.cos(t*m),n=.5*Math.sin(t*m)+.5,s=.5*Math.cos(t*m)+.5;c.push(_*e),c.push(1),c.push(_*i),g.push(n),g.push(s),f.push(_*e),f.push(o),f.push(_*i)}for(let e=0;e<s;e++){let _=t,i=t+1+e;d.push(i),d.push(i+1),d.push(_)}}if(!r&&i>0){let t=f.length/3;c.push(0),c.push(-1),c.push(0),g.push(.5),g.push(.5),f.push(0),f.push(0-o),f.push(0);for(let t=0;t<=s;t++){let e=Math.sin(t*m),_=Math.cos(t*m),n=.5*Math.sin(t*m)+.5,s=.5*Math.cos(t*m)+.5;c.push(i*e),c.push(-1),c.push(i*_),g.push(n),g.push(s),f.push(i*e),f.push(0-o),f.push(i*_)}for(let e=0;e<s;e++){let _=t,i=t+1+e;d.push(_),d.push(i+1),d.push(i)}}let p=new ht.Z;p.setData(ht.Z.S_POSITIONS,f),p.setData(ht.Z.S_NORMALS,c),p.setData(ht.Z.S_UV0,g),p.setData(ht.Z.S_INDICES,d);let C=v.Z.generatorTangents2(p.getData(ht.Z.S_INDICES),p.getData(ht.Z.S_POSITIONS),p.getData(ht.Z.S_UV0),p.getData(ht.Z.S_NORMALS));p.setData(ht.Z.S_TANGENTS,C),this.setMesh(p),this.updateBound()}}class oe extends D.Z{constructor(t,e){super(t,e);let _,i,n,s,a,r,o,h,m,l,u,f,c=e.radius||1,g=e.tube||.3,d=e.segmentsR||32,S=e.segmentsT||24,p=e.arc||2*Math.PI,C=[],T=[],E=[],D=[];for(let t=0;t<=d;t++)for(let e=0;e<=S;e++)_=e/S*p,i=t/d*Math.PI*2,n=c*Math.cos(_),s=c*Math.sin(_),a=(c+g*Math.cos(i))*Math.cos(_),r=(c+g*Math.cos(i))*Math.sin(_),o=g*Math.sin(i),C.push(a),C.push(r),C.push(o),E.push(e/S),E.push(1-t/d),h=this.normalize(this.sub([a,r,o],[n,s,0],[]),[]),T.push(h[0]),T.push(h[1]),T.push(h[2]);for(let t=1;t<=d;t++)for(let e=1;e<=S;e++)m=(S+1)*t+e-1,l=(S+1)*(t-1)+e-1,u=(S+1)*(t-1)+e,f=(S+1)*t+e,D.push(m),D.push(l),D.push(u),D.push(u),D.push(f),D.push(m);let P=new ht.Z;P.setData(ht.Z.S_POSITIONS,C),P.setData(ht.Z.S_NORMALS,T),P.setData(ht.Z.S_UV0,E),P.setData(ht.Z.S_INDICES,D);let M=v.Z.generatorTangents2(P.getData(ht.Z.S_INDICES),P.getData(ht.Z.S_POSITIONS),P.getData(ht.Z.S_UV0),P.getData(ht.Z.S_NORMALS));P.setData(ht.Z.S_TANGENTS,M),this.setMesh(P),this.updateBound()}normalize(t,e){let _=1/this.len(t);return this.mul(t,_,e)}len(t){return Math.sqrt(this.sqLen(t))}sqLen(t){return this.dot(t,t)}dot(t,e){return t[0]*e[0]+t[1]*e[1]+t[2]*e[2]}mul(t,e,_){return _[0]=t[0]*e,_[1]=t[1]*e,_[2]=t[2]*e,_}sub(t,e,_){return _[0]=t[0]-e[0],_[1]=t[1]-e[1],_[2]=t[2]-e[2],_}}class he extends D.Z{constructor(t,e){super(t,e);let _=new ht.Z;_.setData(hte-6,.015927,.097069,544e-6,-0,0,-0,0,.355323,.031894,.119359,.351601,.0264,.118109,.343178,.021131,.115279,.328237,.0162,.11026,.304962,.011719,.102442,.271536,.0078,.091214,.226144,.004556,.075965,.166968,.0021,.056087,.092192,544e-6,.030969,.332906,.031894,.173202,.329419,.0264,.171388,.321527,.021131,.167282,.307529,.0162,.159999,.285722,.011719,.148654,.254405,.0078,.13236,.211876,.004556,.110234,.156434,.0021,.081388,.086376,544e-6,.044939,.302767,.031894,.222197,.299595,.0264,.219869,.292418,.021131,.214602,.279687,.0162,.205259,.259855,.011719,.190704,.231373,.0078,.169802,.192695,.004556,.141416,.142271,.0021,.104411,.078556,544e-6,.057651,.265624,.031894,.265624,.262842,.0264,.262842,.256545,.021131,.256545,.245376,.0162,.245376,.227977,.011719,.227977,.202989,.0078,.202989,.169055,.004556,.169055,.124818,.0021,.124818,.068919,544e-6,.068919,.222197,.031894,.302767,.219869,.0264,.299595,.214602,.021131,.292418,.205259,.0162,.279687,.190704,.011719,.259855,.169802,.0078,.231373,.141416,.004556,.192695,.104411,.0021,.142271,.057651,544e-6,.078556,.173202,.031894,.332906,.171388,.0264,.329419,.167282,.021131,.321527,.159999,.0162,.307529,.148654,.011719,.285722,.13236,.0078,.254405,.110234,.004556,.211876,.081388,.0021,.156434,.044939,544e-6,.086376,.119359,.031894,.355323,.118109,.0264,.351601,.115279,.021131,.343178,.11026,.0162,.328237,.102442,.011719,.304962,.091214,.0078,.271536,.075965,.004556,.226144,.056087,.0021,.166968,.030969,544e-6,.092192,.061385,.031894,.3693,.060742,.0264,.365432,.059287,.021131,.356677,.056706,.0162,.341149,.052685,.011719,.316958,.04691,.0078,.282218,.039068,.004556,.235039,.028845,.0021,.173536,.015927,544e-6,.095818,-0,.031894,.374119,-0,.0264,.3702,-0,.021131,.361331,-0,.0162,.3456,-0,.011719,.321094,-0,.0078,.2859,-0,.004556,.238106,-0,.0021,.1758,-0,544e-6,.097069,-.061385,.031894,.3693,-.060742,.0264,.365432,-.059287,.021131,.356677,-.056706,.0162,.341149,-.052685,.011719,.316958,-.046911,.0078,.282218,-.039069,.004556,.235039,-.028845,.0021,.173536,-.015927,544e-6,.095818,-.119359,.031894,.355323,-.118109,.0264,.351601,-.115279,.021131,.343178,-.11026,.0162,.328237,-.102442,.011719,.304962,-.091214,.0078,.271536,-.075965,.004556,.226144,-.056087,.0021,.166968,-.030969,544e-6,.092192,-.173202,.031894,.332906,-.171388,.0264,.329419,-.167282,.021131,.321527,-.159999,.0162,.307529,-.148654,.011719,.285722,-.13236,.0078,.254405,-.110234,.004556,.211876,-.081388,.0021,.156434,-.044939,544e-6,.086376,-.222197,.031894,.302767,-.219869,.0264,.299595,-.214602,.021131,.292418,-.205259,.0162,.279687,-.190704,.011719,.259855,-.169802,.0078,.231373,-.141416,.004556,.192695,-.104411,.0021,.142271,-.057651,544e-6,.078556,-.265624,.031894,.265624,-.262842,.0264,.262842,-.256545,.021131,.256545,-.245376,.0162,.245376,-.227977,.011719,.227977,-.202989,.0078,.202989,-.169055,.004556,.169055,-.124818,.0021,.124818,-.068919,544e-6,.068919,-.302767,.031894,.222197,-.299595,.0264,.219869,-.292418,.021131,.214602,-.279687,.0162,.205259,-.259855,.011719,.190704,-.231373,.0078,.169802,-.192695,.004556,.141416,-.142271,.0021,.104411,-.078556,544e-6,.057651,-.332906,.031894,.173202,-.329419,.0264,.171388,-.321527,.021131,.167282,-.307529,.0162,.159999,-.285722,.011719,.148654,-.254405,.0078,.13236,-.211876,.004556,.110234,-.156434,.0021,.081388,-.086376,544e-6,.044939,-.355323,.031894,.119359,-.351601,.0264,.118109,-.343178,.021131,.115279,-.328237,.0162,.11026,-.304962,.011719,.102442,-.271536,.0078,.091214,-.226144,.004556,.075965,-.166968,.0021,.056087,-.092192,544e-6,.030969,-.3693,.031894,.061385,-.365432,.0264,.060742,-.356677,.021131,.059287,-.341149,.0162,.056706,-.316958,.011719,.052685,-.282218,.0078,.04691,-.235039,.004556,.039068,-.173536,.0021,.028845,-.095818,544e-6,.015927,-.374119,.031894,-0,-.3702,.0264,-0,-.361331,.021131,-0,-.3456,.0162,-0,-.321094,.011719,-0,-.2859,.0078,-0,-.238106,.004556,-0,-.1758,.0021,-0,-.097069,544e-6,-0,-.3693,.031894,-.061385,-.365432,.0264,-.060742,-.356677,.021131,-.059287,-.341149,.0162,-.056706,-.316958,.011719,-.052685,-.282218,.0078,-.046911,-.235039,.004556,-.039069,-.173536,.0021,-.028845,-.095818,544e-6,-.015927,-.355323,.031894,-.119359,-.351601,.0264,-.118109,-.343178,.021131,-.115279,-.328237,.0162,-.11026,-.304962,.011719,-.102442,-.271536,.0078,-.091214,-.226144,.004556,-.075965,-.166968,.0021,-.056087,-.092192,544e-6,-.030969,-.332906,.031894,-.173202,-.329419,.0264,-.171388,-.321527,.021131,-.167282,-.307529,.0162,-.159999,-.285722,.011719,-.148654,-.254405,.0078,-.13236,-.211876,.004556,-.110234,-.156434,.0021,-.081388,-.086376,544e-6,-.044939,-.302767,.031894,-.222197,-.299595,.0264,-.219869,-.292418,.021131,-.214602,-.279687,.0162,-.205259,-.259855,.011719,-.190704,-.231373,.0078,-.169802,-.192695,.004556,-.141416,-.142271,.0021,-.104411,-.078556,544e-6,-.057651,-.265624,.031894,-.265624,-.262842,.0264,-.262842,-.256545,.021131,-.256545,-.245376,.0162,-.245376,-.227977,.011719,-.227977,-.202989,.0078,-.202989,-.169055,.004556,-.169055,-.124818,.0021,-.124818,-.068919,544e-6,-.068919,-.222197,.031894,-.302767,-.219869,.0264,-.299595,-.214602,.021131,-.292418,-.205259,.0162,-.279687,-.190704,.011719,-.259855,-.169802,.0078,-.231373,-.141416,.004556,-.192695,-.104411,.0021,-.142271,-.057651,544e-6,-.078556,-.173202,.031894,-.332906,-.171388,.0264,-.329419,-.167282,.021131,-.321527,-.159999,.0162,-.307529,-.148654,.011719,-.285722,-.13236,.0078,-.254405,-.110234,.004556,-.211876,-.081388,.0021,-.156434,-.044939,544e-6,-.086376,-.119359,.031894,-.355323,-.118109,.0264,-.351601,-.115279,.021131,-.343178,-.11026,.0162,-.328237,-.102442,.011719,-.304962,-.091214,.0078,-.271536,-.075965,.004556,-.226144,-.056087,.0021,-.166968,-.030969,544e-6,-.092192,-.061385,.031894,-.3693,-.060742,.0264,-.365432,-.059287,.021131,-.356677,-.056706,.0162,-.341149,-.052685,.011719,-.316958,-.04691,.0078,-.282218,-.039068,.004556,-.235039,-.028845,.0021,-.173536,-.015927,544e-6,-.095818,0,.031894,-.374119,0,.0264,-.3702,0,.021131,-.361331,0,.0162,-.3456,0,.011719,-.321094,0,.0078,-.2859,0,.004556,-.238106,0,.0021,-.1758,0,544e-6,-.097069,.061385,.031894,-.3693,.060742,.0264,-.365432,.059287,.021131,-.356677,.056706,.0162,-.341149,.052685,.011719,-.316958,.046911,.0078,-.282218,.039069,.004556,-.235039,.028845,.0021,-.173536,.015927,544e-6,-.095818,.119359,.031894,-.355323,.118109,.0264,-.351601,.115279,.021131,-.343178,.11026,.0162,-.328237,.102442,.011719,-.304962,.091214,.0078,-.271536,.075965,.004556,-.226144,.056087,.0021,-.166968,.030969,544e-6,-.092192,.173202,.031894,-.332906,.171388,.0264,-.329419,.167282,.021131,-.321527,.159999,.0162,-.307529,.148654,.011719,-.285722,.13236,.0078,-.254405,.110234,.004556,-.211876,.081388,.0021,-.156434,.044939,544e-6,-.086376,.222197,.031894,-.302767,.219869,.0264,-.299595,.214602,.021131,-.292418,.205259,.0162,-.279687,.190704,.011719,-.259855,.169802,.0078,-.231373,.141416,.004556,-.192695,.104411,.0021,-.142271,.057651,544e-6,-.078556,.265624,.031894,-.265624,.262842,.0264,-.262842,.256545,.021131,-.256545,.245376,.0162,-.245376,.227977,.011719,-.227977,.202989,.0078,-.202989,.169055,.004556,-.169055,.124818,.0021,-.124818,.068919,544e-6,-.068919,.302767,.031894,-.222197,.299595,.0264,-.219869,.292418,.021131,-.214602,.279687,.0162,-.205259,.259855,.011719,-.190704,.231373,.0078,-.169802,.192695,.004556,-.141416,.142271,.0021,-.104411,.078556,544e-6,-.057651,.332906,.031894,-.173202,.329419,.0264,-.171388,.321527,.021131,-.167282,.307529,.0162,-.159999,.285722,.011719,-.148654,.254405,.0078,-.13236,.211876,.004556,-.110234,.156434,.0021,-.081388,.086376,544e-6,-.044939,.355323,.031894,-.119359,.351601,.0264,-.118109,.343178,.021131,-.115279,.328237,.0162,-.11026,.304962,.011719,-.102442,.271536,.0078,-.091214,.226144,.004556,-.075965,.166968,.0021,-.056087,.092192,544e-6,-.030969,.3693,.031894,-.061385,.365432,.0264,-.060742,.356677,.021131,-.059287,.341149,.0162,-.056706,.316958,.011719,-.052685,.282218,.0078,-.04691,.235039,.004556,-.039068,.173536,.0021,-.028845,.095818,544esetData(ht.Z.S_NORMALS,[-.92935,-.369152,-.003693,-.917203,-.369304,-.149358,-.947172,-.283151,-.150456,-.959105,-.282968,-31e-6,-.986297,-.053682,-.155889,-.998688,-.050935,-702e-6,-.932279,.330302,-.147465,-.943907,.330149,519e-6,-.600146,.794153,-.09537,-.60921,.792993,244e-6,-.033784,.99939,-.005036,-.03415,.99939,305e-6,.385205,.920774,.061403,.39021,.920713,244e-6,.606494,.789178,.096438,.614307,.789026,183e-6,.73986,.662374,.117588,.749352,.66213,122e-6,.828974,.543504,.131687,.840114,.542344,.001038,.878262,.45732,.13947,.889401,.457106,31e-6,-.882077,-.369762,-.291849,-.911588,-.284494,-.29664,-.949309,-.052339,-.309915,-.895993,.333659,-.292947,-.578936,.793146,-.18894,-.032502,.99939,-.010254,.370373,.920927,.121158,.58327,.789575,.190558,.711753,.662801,.232459,.797632,.543992,.260475,.845119,.457778,.275948,-.825282,-.370098,-.426496,-.853572,-.283731,-.436903,-.888699,-.051057,-.455611,-.839564,.332499,-.429548,-.541734,.793603,-.276925,-.028657,.999481,-.014496,.346446,.921079,.177557,.545152,.790735,.278359,.666128,.663259,.341014,.746666,.544389,.382183,.791223,.458205,.40495,-.748619,-.370373,-.549852,-.775323,-.284982,-.563585,-.807184,-.052431,-.587939,-.762291,.332682,-.555132,-.491684,.793847,-.357799,-.02768,.99942,-.019745,.314249,.921232,.229194,.494888,.790948,.359752,.604816,.662618,.441664,.677786,.544694,.49382,.718314,.45848,.52324,-.654164,-.370403,-.659413,-.678396,-.285073,-.677114,-.706107,-.052492,-.706137,-.66686,.332743,-.666707,-.430067,.793939,-.429731,-.024232,.99942,-.023774,.274789,.921262,.275155,.432905,.79107,.432142,.528855,.662709,.530168,.592853,.544816,.592975,.628346,.458541,.628376,-.54387,-.370373,-.752983,-.56447,-.283914,-.775048,-.58739,-.051057,-.807672,-.554552,.334178,-.762078,-.359264,.792596,-.492599,-.020264,.99942,-.027284,.228797,.921201,.314585,.360637,.790979,.494217,.440168,.662618,.605914,.493637,.544725,.677908,.523179,.45848,.718375,-.419874,-.370067,-.828669,-.436781,-.283761,-.853603,-.454909,-.05237,-.888974,-.429731,.332469,-.839503,-.278207,.792383,-.542863,-.01474,.999481,-.028504,.177068,.92111,.34666,.279305,.790735,.544664,.340465,.662313,.667379,.382031,.54442,.746727,.406018,.458754,.790338,-.288186,-.369732,-.883297,-.297555,-.283456,-.911618,-.310617,-.053713,-.949004,-.293374,.330607,-.896969,-.189154,.793268,-.578692,-.010102,.999481,-.030488,.12064,.920927,.370525,.190588,.790399,.582171,.231697,.661885,.712851,.260292,.543962,.797693,.275826,.457778,.845149,-.142033,-.369274,-.918363,-.150395,-.28312,-.947203,-.15659,-.05237,-.986267,-.147404,.333445,-.93115,-.095157,.794122,-.600208,-.005646,.99939,-.033662,.060854,.920743,.385296,.096072,.789209,.606525,.116642,.661428,.740837,.132481,.544359,.828303,.139409,.45732,.878292,.001648,-.369884,-.929044,-.003174,-.283914,-.958831,-.001709,-.052156,-.998627,-.001617,.330302,-.943846,-824e-6,.791864,-.610675,-244e-6,.999359,-.035493,122e-6,.92114,.389141,458e-6,.789727,.613422,763e-6,.662984,.748589,-92e-6,.54326,.839534,-.001434,.456526,.889706,.14304,-.39143,-.908994,.142033,-.304819,-.94174,.150945,-.078555,-.985382,.146458,.306711,-.940458,.097171,.782525,-.614978,.005463,.999359,-.034791,-.061708,.919401,.388409,-.096408,.787774,.608325,-.117344,.661641,.740562,-.132694,.542375,.829585,-.139439,.457289,.878292,.275155,-.432508,-.858608,.282205,-.351665,-.892544,.301279,-.135319,-.943876,.297372,.250191,-.921384,.202185,.758232,-.6198,.012696,.999146,-.038789,-.123417,.917417,.378246,-.191504,.785638,.588275,-.232582,.660543,.713797,-.261574,.542344,.798364,-.275948,.457686,.84518,.398968,-.472152,-.786035,.415082,-.397595,-.818293,.444929,-.192145,-.874691,.446608,.191046,-.874081,.311594,.73159,-.606342,.021851,.99884,-.042268,-.183599,.915128,.358867,-.284188,.782098,.554552,-.343425,.658376,.669729,-.383587,.542192,.747551,-.40495,.458022,.791314,.520859,-.498398,-.693014,.540452,-.424207,-.726585,.580004,-.224219,-.783105,.586077,.158116,-.794641,.414441,.714133,-.564074,.030915,.998627,-.042055,-.240211,.913175,.329203,-.367901,.780755,.50502,-.441969,.659169,.608356,-.4944,.542985,.678732,-.523301,.458266,.718406,.631397,-.502335,-.590716,.651448,-.429792,-.625202,.698508,-.231056,-.677236,.706076,.149663,-.692099,.503464,.704856,-.49968,.039918,.998383,-.039979,-.289132,.912839,.288217,-.442305,.780389,.441908,-.532395,.658101,.532365,-.594928,.5421,.593432,-.628468,.458327,.628407,.730033,-.484939,-.481491,.750755,-.412915,-.51558,.801843,-.209693,-.559496,.803339,.171331,-.570299,.569384,.711264,-.412122,.045839,.998352,-.033784,-.328623,.913877,.238289,-.504562,.781518,.366894,-.608264,.658681,.442854,-.6798,.542222,.493789,-.718467,.458235,.52324,.813685,-.451979,-.36552,.835658,-.379192,-.39729,.886685,-.167943,-.430738,.874722,.213935,-.434797,.608936,.730003,-.310251,.047426,.998535,-.024812,-.357799,.91586,.182043,-.553178,.783685,.282418,-.669088,.659719,.342174,-.747429,.543168,.382427,-.790429,.458602,.406018,.877102,-.413526,-.24424,.901089,-.338664,-.270791,.948729,-.119022,-.292764,.919675,.262734,-.291726,.624622,.753838,-.203772,.045198,.99884,-.01529,-.376965,.918119,.122196,-.587634,.786157,.19126,-.713462,.660909,.232673,-.798975,.542405,.259651,-.845943,.457076,.274606,.91583,-.382366,-.12244,.942137,-.304971,-.139134,.985504,-.07947,-.149754,.941923,.30192,-.146977,.624073,.774895,-.099979,.040956,.999115,-.006897,-.387341,.919889,.060976,-.607898,.788141,.096164,-.74044,.661733,.117405,-.82992,.542344,.130589,-.878323,.457289,.139348,.929319,-.369121,.008545,.957915,-.286966,793e-6,.998383,-.056673,702e-6,.94586,.324503,-488e-6,.615223,.788324,-732e-6,.034303,.99939,-305e-6,-.39198,.91995,-58e-5,-.61449,.788903,-122e-6,-.750206,.661184,-977e-6,-.840175,.542283,-.001099,-.889401,.457106,-31e-6,.917203,-.369304,.149358,.947172,-.283151,.150456,.986206,-.050966,.157384,.932279,.330271,.147465,.600146,.794153,.09537,.031831,.999481,.004883,-.385205,.920774,-.061403,-.606494,.789178,-.096438,-.739921,.662313,-.117466,-.828608,.544359,-.130558,-.878262,.45732,-.13947,.882077,-.369762,.291849,.911588,-.283425,.297678,.949309,-.052339,.309915,.896664,.332133,.292611,.578906,.793176,.18894,.032502,.99939,.010254,-.370373,.920927,-.121158,-.58327,.789575,-.190558,-.711753,.662801,-.232459,-.797876,.543077,-.261574,-.844966,.457198,-.277352,.825282,-.370098,.426496,.853572,-.2837,.436903,.889218,-.053774,.454237,.839564,.332469,.429548,.541734,.793603,.276925,.028657,.999481,.014496,-.346446,.921079,-.177557,-.545152,.790735,-.278359,-.666128,.663259,-.341014,-.746666,.544389,-.382183,-.791223,.458205,-.40495,.748619,-.370373,.549852,.775323,-.284982,.563585,.807184,-.052431,.587939,.761559,.334208,.555254,.491684,.793847,.357799,.029206,.999329,.021027,-.31428,.921232,-.229225,-.494888,.790948,-.359752,-.604816,.662618,-.441664,-.677786,.544694,-.49382,-.718314,.45848,-.52324,.654164,-.370403,.659413,.678396,-.285073,.677114,.706107,-.052492,.706137,.667562,.331217,.666799,.430067,.79397,.429701,.024262,.99942,.023804,-.275857,.92053,-.276528,-.432936,.79104,-.432173,-.528855,.662709,-.530168,-.592853,.544816,-.592975,-.628346,.458541,-.628376,.54387,-.370373,.752983,.56447,-.283914,.775048,.58739,-.051057,.807672,.554552,.334178,.762078,.358074,.793725,.491653,.020264,.99942,.027314,-.228797,.921232,-.314585,-.360637,.790979,-.494217,-.440168,.662618,-.605914,-.493637,.544725,-.677908,-.523179,.45848,-.718375,.419874,-.370067,.828669,.436781,-.283761,.853603,.454909,-.05237,.888974,.429731,.332469,.839503,.278207,.792383,.542863,.01474,.999481,.028504,-.177068,.92111,-.34666,-.279305,.790735,-.544664,-.340465,.662313,-.667379,-.382031,.54442,-.746727,-.406018,.458754,-.790338,.288186,-.369732,.883297,.297555,-.283456,.911618,.309915,-.052309,.949309,.292795,.332163,.896603,.189154,.793268,.578692,.010102,.999481,.030488,-.12064,.920927,-.370525,-.190588,.790399,-.582171,-.231697,.661885,-.712851,-.260292,.543962,-.797693,-.275826,.457778,-.845149,.142033,-.369274,.918363,.150395,-.28312,.947203,.15659,-.052309,.986267,.148015,.331919,.931608,.095767,.792962,.601642,.005646,.99939,.033662,-.060854,.920743,-.385296,-.096072,.789209,-.606525,-.116642,.661428,-.740837,-.132481,.544359,-.828303,-.139409,.45732,-.878292,-.003693,-.369152,.92935,-31e-6,-.282968,.959105,-732e-6,-.050905,.998688,61e-6,.331736,.943358,244e-6,.792962,.609241,305e-6,.99939,.03415,244e-6,.920713,-.39021,183e-6,.789026,-.614307,122e-6,.66213,-.749352,-946e-6,.544145,-.838984,.001434,.456526,-.889676,-.149358,-.369304,.917203,-.150456,-.283151,.947172,-.156621,-.052278,.986267,-.147801,.331858,.931669,-.095248,.792993,.601703,-.005036,.99939,.033784,.061403,.920774,-.385205,.096438,.789178,-.606494,.117588,.662374,-.73986,.131687,.543504,-.828974,.140904,.45674,-.878353,-.291849,-.369762,.882077,-.297678,-.283425,.911588,-.309915,-.052339,.949309,-.292398,.330577,.897305,-.188665,.793268,.578845,-.010254,.99939,.032502,.121158,.920927,-.370373,.190558,.789544,-.5833,.232459,.662801,-.711753,.260475,.543992,-.797632,.275948,.457778,-.845119,-.426496,-.370098,.825282,-.436903,-.2837,.853572,-.454237,-.053774,.889218,-.429548,.332469,.839564,-.276589,.794702,.540269,-.015229,.99939,.030457,.177557,.92111,-.346416,.279489,.789911,-.545793,.341014,.663228,-.666158,.382183,.544389,-.746666,.40495,.458205,-.791223,-.549852,-.370373,.748619,-.563585,-.284982,.775323,-.587939,-.052431,.807184,-.555223,.332621,.762261,-.357799,.793847,.491684,-.019745,.99942,.02768,.229225,.921232,-.31428,.360973,.790124,-.495315,.440535,.663533,-.604633,.49382,.544694,-.677786,.52324,.45848,-.718314,-.659413,-.370403,.654164,-.677114,-.285073,.678396,-.706137,-.052492,.706107,-.666707,.332804,.66686,-.428938,.795068,.428785,-.0253,.999329,.025575,.275155,.921262,-.274789,.432173,.79104,-.432936,.529008,.663656,-.528825,.592975,.544816,-.592853,.628376,.458541,-.628346,-.752983,-.370373,.54387,-.775048,-.283914,.56447,-.807642,-.051088,.58739,-.762078,.334178,.554552,-.492599,.792627,.359233,-.027314,.99942,.020264,.31608,.920499,-.229652,.494217,.790979,-.360637,.605914,.662618,-.440168,.677908,.544725,-.493637,.718375,.45848,-.523179,-.828669,-.370067,.419874,-.853603,-.283731,.436781,-.888974,-.0524,.454909,-.839503,.332438,.429731,-.54149,.793603,.277352,-.028504,.999481,.01474,.34666,.92111,-.177068,.544664,.790735,-.279305,.667379,.662313,-.340465,.746727,.54442,-.382031,.790338,.458754,-.406018,-.884396,-.369732,.284799,-.911618,-.283456,.297555,-.949004,-.053713,.310617,-.897,.330607,.293374,-.578692,.793268,.189154,-.034211,.999329,.011353,.370525,.920927,-.12064,.582171,.790399,-.190588,.712851,.661885,-.231697,.796838,.544847,-.261116,.845149,.457778,-.275826,-.918363,-.369274,.142033,-.946745,-.284219,.15125,-.986267,-.05237,.15659,-.93115,.333445,.147404,-.600208,.794122,.095157,-.033662,.99939,.005646,.387036,.920042,-.060945,.606525,.789209,-.096072,.739952,.662313,-.117435,.829005,.543504,-.131504,.878811,.45674,-.138066,.89346,.426099,.14185,.904752,.425886,0,.897702,.416852,.142521,.909055,.416639,0,.904904,.401196,.141881,.916166,.400739,0,.914609,.378002,.143498,.925993,.377483,0,.926633,.345927,.14713,.938322,.345744,0,.940794,.304209,.149388,.952635,.304025,0,.956084,.250649,.15183,.968108,.250496,0,.970916,.18302,.15418,.983123,.182928,0,.982879,.099857,.154759,.995056,.099033,0,.987243,-.027833,.156743,.999603,-.027833,0,.859798,.426527,.280679,.863887,.41728,.282022,.870663,.401379,.284249,.879635,.377758,.288949,.891415,.345897,.292734,.905423,.304544,.295602,.920499,.251503,.29899,.934812,.183905,.303751,.945921,.099216,.308817,.949889,-.028932,.311197,.804956,.426954,.411939,.808802,.417676,.413923,.81518,.401776,.417158,.823969,.37846,.421674,.834986,.34666,.42732,.847804,.30488,.433882,.861629,.251198,.440962,.874569,.182775,.44911,.88525,.098575,.454512,.889828,-.027924,.455397,.730827,.427198,.532304,.734306,.417951,.534867,.740074,.40202,.539079,.74807,.378704,.544908,.75808,.346904,.552202,.769738,.305094,.560686,.782311,.251381,.569842,.794549,.183599,.578753,.804285,.099399,.585833,.807978,-.027924,.588519,.639271,.42729,.639271,.642323,.418043,.642354,.647389,.402112,.64742,.654378,.378796,.654408,.663137,.346965,.663167,.67333,.305155,.673391,.684347,.251442,.684378,.695059,.18363,.69509,.703574,.099429,.703604,.706809,-.027924,.706809,.532304,.427198,.730827,.534837,.417951,.734306,.539048,.40202,.740104,.544877,.378704,.7481,.552141,.346904,.75811,.560656,.305094,.769768,.569811,.251381,.782342,.578722,.183599,.79458,.585833,.099399,.804285,.588519,-.027924,.807978,.411908,.426954,.804987,.415509,.417829,.807917,.417127,.401776,.81518,.421644,.37846,.823969,.42729,.34666,.834986,.433851,.30488,.847804,.440931,.251198,.86166,.447798,.183447,.875088,.453291,.099338,.8858,.455397,-.027894,.889828,.278817,.426435,.860439,.281991,.41728,.863887,.28254,.401135,.871334,.287271,.378094,.880062,.291086,.346294,.891781,.295541,.304544,.905454,.300363,.250954,.920194,.305063,.183233,.934507,.308786,.099216,.945921,.311228,-.026826,.94995,.14185,.426099,.89346,.142491,.416852,.897702,.14362,.400952,.904752,.145146,.377697,.914457,.147099,.345927,.926633,.149327,.304209,.940794,.153203,.251228,.955718,.154118,.18302,.970916,.156011,.099094,.982757,.156743,-.027863,.987213,0,.425886,.904752,.001831,.416791,.908963,0,.400739,.916166,0,.377483,.925993,0,.345744,.938322,0,.304025,.952635,.001434,.251076,.967956,-.001373,.182257,.983245,0,.099033,.995056,0,-.027833,.999603,-.14185,.426099,.89346,-.142521,.416852,.897702,-.143651,.400952,.904752,-.145207,.377667,.914457,-.14713,.345927,.926633,-.149388,.304209,.940794,-.15183,.250649,.956084,-.155553,.182348,.970824,-.154759,.099857,.982879,-.156743,-.027833,.987243,-.280679,.426527,.859798,-.282022,.41728,.863887,-.284249,.401379,.870663,-.287271,.378094,.880032,-.291147,.346294,.891781,-.295602,.304544,.905423,-.29899,.251503,.920499,-.305094,.183233,.934507,-.308817,.099216,.945921,-.311197,-.028932,.949889,-.411939,.426954,.804956,-.413923,.417676,.808802,-.417158,.401776,.81518,-.421674,.37846,.823969,-.428816,.346263,.834376,-.433882,.30488,.847804,-.440962,.251198,.861629,-.44911,.182775,.874569,-.453322,.099338,.885769,-.455397,-.027924,.889828,-.532304,.427198,.730827,-.534867,.417951,.734306,-.539079,.40202,.740074,-.544877,.378704,.74807,-.552202,.346904,.75808,-.560686,.305094,.769738,-.569842,.251381,.782311,-.577563,.184271,.795251,-.585833,.099399,.804285,-.588519,-.027924,.807978,-.639271,.42729,.639271,-.642354,.418043,.642323,-.64742,.402112,.647389,-.654408,.378796,.654378,-.663167,.346965,.663137,-.67336,.305155,.67336,-.684378,.251442,.684347,-.69509,.18363,.695059,-.70455,.098666,.702719,-.706809,-.027924,.706809,-.730827,.427198,.532304,-.734306,.417951,.534837,-.740104,.40202,.539048,-.7481,.378704,.544877,-.75811,.346904,.552141,-.769768,.305094,.560656,-.782342,.251381,.569811,-.79458,.183599,.578722,-.803461,.100162,.58681,-.807978,-.027924,.588519,-.804987,.426923,.411908,-.808832,.417676,.413892,-.81518,.401776,.417127,-.823969,.37846,.421644,-.834986,.34666,.42729,-.847804,.30488,.433851,-.86166,.251198,.440931,-.875088,.183447,.447798,-.8858,.099338,.453291,-.890286,-.028962,.454451,-.860439,.426435,.278817,-.863887,.41728,.281991,-.870663,.401379,.284219,-.880062,.378094,.287271,-.891781,.346294,.291086,-.905454,.304544,.295541,-.920194,.250954,.300363,-.934507,.183233,.305063,-.945921,.099216,.308786,-.94995,-.026826,.311228,-.89346,.426099,.14185,-.897702,.416852,.142491,-.904752,.400952,.14362,-.914457,.377697,.145146,-.926633,.345927,.147099,-.940794,.304209,.149327,-.956084,.250649,.151769,-.970916,.18302,.154118,-.982757,.099094,.156011,-.987213,-.027863,.156743,-.904752,.425886,0,-.909055,.416639,0,-.916166,.400739,0,-.925993,.377483,0,-.938322,.345714,0,-.952635,.304025,0,-.968108,.250496,0,-.983123,.182928,0,-.995056,.099033,0,-.972533,.232734,-641e-6,-.89346,.426099,-.14185,-.897916,.417005,-.14066,-.904904,.401196,-.141881,-.914457,.377667,-.145207,-.926756,.346324,-.145482,-.940794,.304209,-.149388,-.956175,.251198,-.150334,-.971007,.183691,-.152776,-.982757,.099094,-.156041,-.987243,-.027833,-.156743,-.859798,.426527,-.280679,-.863887,.41728,-.282022,-.870205,.401135,-.285958,-.879635,.377758,-.288949,-.891781,.346294,-.291147,-.905118,.304056,-.297128,-.920499,.251503,-.29899,-.934507,.183233,-.305094,-.945585,.098453,-.310068,-.950224,-.027894,-.310221,-.804956,.426954,-.411939,-.808802,.417676,-.413923,-.81518,.401776,-.417158,-.823969,.37846,-.421674,-.834986,.34666,-.42732,-.847804,.30488,-.433882,-.861629,.251198,-.440962,-.874569,.182775,-.44911,-.88525,.098575,-.454512,-.889828,-.027924,-.455397,-.730827,.427198,-.532304,-.734306,.417951,-.534867,-.740074,.40202,-.539079,-.74807,.378704,-.544908,-.75808,.346904,-.552202,-.770531,.305551,-.559343,-.782311,.251381,-.569842,-.795251,.184271,-.577563,-.804285,.099399,-.585833,-.807978,-.027924,-.588519,-.639271,.42729,-.639271,-.642323,.418043,-.642354,-.647389,.402112,-.64742,-.654378,.378796,-.654408,-.663137,.346965,-.663167,-.67333,.305155,-.673391,-.683432,.250862,-.685507,-.695059,.18363,-.69509,-.702719,.098666,-.70455,-.706809,-.027924,-.706809,-.532304,.427198,-.730827,-.534837,.417951,-.734306,-.539048,.40202,-.740104,-.546159,.37904,-.746971,-.552141,.346904,-.75811,-.560656,.305094,-.769768,-.569811,.251381,-.782342,-.578722,.183599,-.79458,-.585833,.099399,-.804285,-.588519,-.027924,-.807978,-.411908,.426954,-.804987,-.413892,.417676,-.808832,-.417127,.401776,-.81518,-.421644,.37846,-.823969,-.425916,.346233,-.835871,-.433851,.30488,-.847804,-.440931,.251198,-.86166,-.447798,.183447,-.875088,-.453291,.099338,-.8858,-.455397,-.027894,-.889828,-.278817,.426435,-.860439,-.281991,.41728,-.863887,-.284219,.401379,-.870663,-.287271,.378094,-.880062,-.291086,.346294,-.891781,-.295541,.304544,-.905454,-.300363,.250954,-.920194,-.305063,.183233,-.934507,-.308786,.099216,-.945921,-.311228,-.026826,-.94995,-.14185,.426099,-.89346,-.142491,.416852,-.897702,-.14362,.400952,-.904752,-.145146,.377697,-.914457,-.147099,.345927,-.926633,-.149327,.304209,-.940794,-.153203,.251228,-.955718,-.154118,.18302,-.970916,-.156011,.099094,-.982757,-.156743,-.027863,-.987213,0,.425886,-.904752,0,.416639,-.909055,0,.400739,-.916166,0,.377483,-.925993,0,.345744,-.938322,0,.304025,-.952635,-.001434,.251076,-.967956,.001373,.182257,-.983245,0,.099033,-.995056,0,-.027833,-.999603,.14185,.426099,-.89346,.142521,.416852,-.897702,.141881,.401196,-.904904,.145207,.377667,-.914457,.14713,.345927,-.926633,.149388,.304209,-.940794,.15183,.250649,-.956084,.155553,.182348,-.970824,.154759,.099857,-.982879,.156743,-.027833,-.987243,.280679,.426527,-.859798,.282022,.41728,-.863887,.284219,.401379,-.870663,.287271,.378094,-.880032,.291147,.346294,-.891781,.295602,.304544,-.905423,.29899,.251503,-.920499,.305094,.183233,-.934507,.308817,.099216,-.945921,.311197,-.028932,-.949889,.411939,.426954,-.804956,.413923,.417676,-.808802,.417158,.401776,-.81518,.421674,.37846,-.823969,.428816,.346263,-.834376,.433882,.30488,-.847804,.440962,.251198,-.861629,.44911,.182775,-.874569,.453322,.099338,-.885769,.455397,-.027924,-.889828,.532304,.427198,-.730827,.534867,.417951,-.734306,.539079,.40202,-.740074,.544908,.378704,-.74807,.552202,.346904,-.75808,.560686,.305063,-.769738,.569842,.251381,-.782311,.577563,.184271,-.795251,.585833,.099399,-.804285,.588519,-.027924,-.807978,.639271,.42729,-.639271,.642354,.418043,-.642323,.64742,.402112,-.647389,.654408,.378796,-.654378,.663167,.346965,-.663137,.673391,.305155,-.67333,.684378,.251442,-.684347,.69509,.18363,-.695059,.70455,.098666,-.702719,.706809,-.027924,-.706809,.730827,.427198,-.532304,.734306,.417951,-.534837,.740104,.40202,-.539048,.7481,.378704,-.544877,.75811,.346904,-.552141,.769768,.305094,-.560656,.782342,.251381,-.569811,.79458,.183599,-.578722,.804285,.099399,-.585833,.807978,-.027924,-.588519,.804987,.426954,-.411908,.808832,.417676,-.413892,.81518,.401776,-.417127,.823969,.37846,-.421644,.834986,.34666,-.42729,.847804,.30488,-.433821,.86166,.251198,-.440931,.875088,.183447,-.447798,.8858,.099338,-.453291,.889828,-.027894,-.455397,.860439,.426435,-.278817,.863887,.41728,-.281991,.870663,.401379,-.284219,.880062,.378094,-.287271,.891781,.346294,-.291086,.905454,.304544,-.295541,.920194,.250954,-.300363,.934507,.183233,-.305063,.945921,.099216,-.308786,.950224,-.027894,-.310221,.89346,.426099,-.14185,.897702,.416852,-.142491,.904752,.400952,-.14362,.914457,.377697,-.145146,.926633,.345927,-.147099,.940794,.304209,-.149327,.956084,.250649,-.151769,.970916,.18302,-.154118,.982757,.099094,-.156011,.987213,-.027863,-.156743,.965361,-.211097,.153233,.977722,-.209784,-885e-6,.906125,-.397412,.144749,.918149,-.396161,-61e-6,.831202,-.540056,.13187,.841762,-.539811,-92e-6,.756584,-.64275,.119999,.7669,-.641743,-.001099,.693899,-.71157,.110141,.70278,-.711356,-92e-6,.649678,-.753166,.10303,.65804,-.752953,-61e-6,.631428,-.768914,.100223,.639546,-.768731,0,.658162,-.745537,.104556,.666646,-.745323,92e-6,.793695,-.595172,.125492,.80459,-.593799,122e-6,.939268,-.308969,.149205,.951109,-.308817,61e-6,.929136,-.211341,.303293,.872585,-.396771,.284768,.799799,-.540513,.260994,.727897,-.643208,.237495,.667501,-.712027,.21778,.624043,-.75396,.205145,.607318,-.769311,.198218,.633045,-.745964,.206732,.764367,-.59444,.249672,.904202,-.307901,.295938,.870052,-.211554,.445204,.81698,-.397168,.418012,.748741,-.540971,.383038,.681326,-.643635,.348521,.624714,-.712424,.319559,.584826,-.753929,.299173,.568316,-.769677,.29078,.592425,-.746361,.303262,.715476,-.594867,.366283,.8464,-.30958,.433241,.790002,-.211707,.575365,.741752,-.397412,.540178,.679708,-.541246,.494949,.618458,-.643941,.450331,.567034,-.712699,.412885,.530808,-.754204,.386517,.515793,-.769921,.375683,.537675,-.746605,.391736,.649434,-.595203,.47319,.768548,-.311136,.559008,.691092,-.211768,.691031,.648885,-.397504,.648762,.594592,-.541368,.59444,.540971,-.644032,.540849,.495987,-.71279,.495865,.464278,-.754295,.464156,.451155,-.770012,.451125,.47026,-.746696,.470382,.568041,-.595294,.568255,.672384,-.311258,.671529,.575427,-.211707,.789941,.5403,-.397443,.741661,.495102,-.541246,.679617,.450484,-.643941,.618336,.413038,-.712699,.566912,.386639,-.754204,.530717,.375683,-.769921,.515793,.391552,-.746605,.537767,.472976,-.595172,.649617,.559709,-.309793,.768548,.445296,-.211554,.870022,.418134,-.397168,.816919,.38432,-.540025,.748741,.348704,-.643635,.681234,.319742,-.712424,.624622,.299295,-.753929,.584765,.290811,-.769677,.568316,.303079,-.746361,.592517,.366039,-.594867,.715598,.433119,-.30958,.846492,.303385,-.211341,.929106,.284921,-.396771,.872555,.261177,-.540513,.799738,.236427,-.643941,.727592,.217963,-.712027,.66744,.204047,-.753563,.624866,.198248,-.769311,.607318,.207556,-.746513,.63213,.249397,-.59447,.764458,.295053,-.309275,.904019,.152379,-.212256,.965239,.144017,-.396374,.906705,.132054,-.540056,.831172,.120212,-.64275,.756554,.111484,-.71099,.694266,.103183,-.753166,.649648,.100223,-.768914,.631428,.104373,-.745537,.658193,.125614,-.59273,.795495,.149052,-.308969,.939299,885e-6,-.209784,.977722,61e-6,-.396161,.918149,92e-6,-.539811,.841762,92e-6,-.642506,.766259,92e-6,-.711356,.70278,-.001373,-.753349,.657582,0,-.768731,.639546,-92e-6,-.745323,.666646,-122e-6,-.593799,.80459,-61ee-6,-.918149,-.396161,61e-6,-.841762,-.539811,92e-6,-.766259,-.642506,92e-6,-.70278,-.711356,92e-6,-.65804,-.752953,61e-6,-.639546,-.768731,0,-.666646,-.745323,-92e-6,-.80459,-.593799,-122e-6,-.951109,-.308817,-61e-6,-.965361,-.211097,-.153233,-.906735,-.396374,-.143895,-.831202,-.540056,-.13187,-.756584,-.64275,-.119999,-.693899,-.7116,-.11005,-.649678,-.753166,-.10303,-.631397,-.768914,-.100223,-.658162,-.745537,-.104556,-.794458,-.594012,-.126286,-.939268,-.308969,-.149205,-.929136,-.211341,-.303293,-.873318,-.395703,-.284097,-.800653,-.539567,-.260262,-.727897,-.643208,-.237495,-.667501,-.712027,-.21778,-.624928,-.753563,-.203894,-.607318,-.769311,-.198218,-.633045,-.745964,-.206732,-.764367,-.59444,-.249672,-.903958,-.309305,-.295206,-.870052,-.211554,-.445204,-.81698,-.397168,-.418012,-.747734,-.541856,-.383679,-.680258,-.644368,-.349254,-.624714,-.712424,-.319559,-.584826,-.753929,-.299173,-.568316,-.769677,-.290811,-.592425,-.746361,-.303262,-.715476,-.594867,-.366283,-.8464,-.30958,-.433241,-.790002,-.211707,-.575365,-.741752,-.397412,-.540178,-.679708,-.541246,-.494949,-.618458,-.643941,-.450331,-.568224,-.712088,-.412305,-.530808,-.754204,-.386517,-.515793,-.769921,-.375683,-.537675,-.746605,-.391736,-.649434,-.595203,-.47319,-.768487,-.309793,-.559832,-.691092,-.211768,-.691031,-.648885,-.397504,-.648762,-.594592,-.541368,-.59444,-.540971,-.644032,-.540849,-.495987,-.71279,-.495865,-.462935,-.754692,-.464888,-.451155,-.770012,-.451125,-.47026,-.746696,-.470382,-.568041,-.595294,-.568255,-.672201,-.309915,-.672323,-.575427,-.211707,-.789941,-.5403,-.397443,-.741661,-.495102,-.541246,-.679617,-.450484,-.643941,-.618336,-.413038,-.712699,-.566912,-.386639,-.754204,-.530717,-.375683,-.769921,-.515793,-.391552,-.746605,-.537767,-.472976,-.595172,-.649617,-.559709,-.309793,-.768548,-.445296,-.211554,-.870022,-.418134,-.397168,-.816919,-.383221,-.540971,-.74865,-.348704,-.643635,-.681234,-.319742,-.712424,-.624622,-.299295,-.753929,-.584765,-.29255,-.769646,-.567461,-.303903,-.74691,-.591388,-.366039,-.594867,-.715598,-.433119,-.30958,-.846461,-.303385,-.211341,-.929106,-.284921,-.396771,-.872555,-.261177,-.540513,-.799738,-.238868,-.642445,-.728141,-.217963,-.712027,-.66744,-.204047,-.753563,-.624866,-.198248,-.769311,-.607318,-.205664,-.745384,-.634083,-.249184,-.593188,-.765496,-.295053,-.309275,-.904019,-.152379,-.212256,-.965239,-.144017,-.396374,-.906705,-.133061,-.539109,-.831629,-.120212,-.64275,-.756554,-.10889,-.712149,-.693503,-.103183,-.753166,-.649648,-.100223,-.768914,-.631428,-.105502,-.746086,-.657399,-.12598,-.594012,-.794519,-.149052,-.308969,-.939299,-885e-6,-.209784,-.977722,-61e-6,-.396161,-.918149,-92e-6,-.539811,-.841762,0,-.642476,-.766289,-92e-6,-.711356,-.70278,-.001434,-.752556,-.658498,0,-.768731,-.639546,92e-6,-.745323,-.666646,641e-6,-.592547,-.805506,61ee-6,.676534,-.728599,.106845,.683798,-.729667,-183e-6,.408185,-.910581,.064516,.41203,-.911161,305e-6,.24015,-.96997,.037843,.243233,-.969939,-214e-6,.145329,-.989105,.022828,.147191,-.989105,-214e-6,.089175,-.995911,.013916,.090304,-.995911,-214e-6,.05356,-.998505,.008271,.054231,-.998505,-183e-6,.029664,-.999542,.004486,.03003,-.999542,-183e-6,.014405,-.999878,.001953,.014557,-.999878,-305e-6,0,-1,0,.88171,-.373852,.287729,.650868,-.728965,.21189,.391034,-.911405,.127964,.232551,-.969665,.075228,.139744,-.989135,.045351,.085757,-.995911,.027741,.051546,-.998505,.016572,.028565,-.999542,.009095,.013916,-.999878,.004181,.825526,-.374218,.422376,.607929,-.730583,.310862,.365764,-.911618,.187506,.216041,-.970122,.110263,.129215,-.989349,.06653,.080233,-.995911,.040803,.048219,-.998535,.024445,.026734,-.999542,.013459,.013062,-.999878,.006317,.749535,-.374432,.545824,.551805,-.730857,.401654,.333293,-.9111,.242439,.196051,-.970183,.142491,.118656,-.989166,.086123,.072848,-.995941,.052767,.043794,-.998535,.031617,.024293,-.999542,.017426,.011902,-.999878,.008271,.654866,-.376019,.655507,.482681,-.730949,.482406,.292856,-.910428,.292062,.171484,-.970183,.171148,.103824,-.989166,.103488,.063723,-.995941,.063417,.038331,-.998535,.038026,.021271,-.999542,.020997,.010468,-.999878,.01001,.545183,-.375927,.74926,.40199,-.730857,.551561,.242836,-.9111,.333018,.141545,-.970519,.194952,.08652,-.989166,.118381,.053133,-.995941,.072573,.031983,-.998535,.04355,.017762,-.999542,.024049,.008789,-.999878,.011536,.422559,-.374187,.825465,.311197,-.730583,.607746,.189062,-.910276,.368267,.110691,-.970122,.215796,.067049,-.989166,.130528,.0412,-.995911,.08005,.024812,-.998535,.048036,.013794,-.999542,.026551,.006897,-.999878,.012787,.287942,-.373852,.881649,.212195,-.730186,.649434,.129093,-.910062,.39375,.074557,-.970397,.229591,.045808,-.989135,.139622,.028169,-.995911,.085604,.016999,-.998505,.051393,.009491,-.999542,.028413,.004822,-.999878,.013703,.145543,-.373516,.916105,.107364,-.729789,.675161,.065584,-.909879,.409589,.037507,-.970336,.238746,.023286,-.989105,.145268,.014344,-.995911,.089084,.008698,-.998505,.053499,.004883,-.999542,.029603,.002594,-.999878,.014313,92e-6,-.373333,.927671,519e-6,-.728446,.68508,214e-6,-.91052,.413404,-336e-6,-.970306,.241798,214e-6,-.989105,.147191,214e-6,-.995911,.090304,183e-6,-.998505,.054231,183e-6,-.999542,.03003,305e-6,-.999878,.014557,-.14536,-.373486,.916135,-.106967,-.729789,.675222,-.064852,-.911222,.40672,-.037843,-.96997,.24015,-.022828,-.989105,.145329,-.013916,-.995911,.089175,-.008271,-.998505,.05356,-.004486,-.999542,.029664,-.001953,-.999878,.014405,-.287729,-.373852,.88171,-.211798,-.730186,.649556,-.128025,-.910062,.394116,-.075106,-.970061,.230903,-.045351,-.989135,.139744,-.027741,-.995911,.085757,-.016572,-.998505,.051546,-.009095,-.999542,.028565,-.004181,-.999878,.013916,-.422376,-.374218,.825526,-.310862,-.730583,.607929,-.187628,-.910977,.36726,-.110141,-.970489,.214484,-.066622,-.989166,.130741,-.040803,-.995911,.080233,-.024445,-.998535,.048219,-.013459,-.999542,.026734,-.006317,-.999878,.013062,-.545824,-.374432,.749535,-.401654,-.730857,.551805,-.242439,-.9111,.333293,-.142491,-.970183,.196051,-.086123,-.989166,.118656,-.052767,-.995941,.072848,-.031617,-.998535,.043794,-.017426,-.999542,.024293,-.008271,-.999878,.011933,-.655507,-.376019,.654866,-.482406,-.730949,.482681,-.291177,-.91113,.291513,-.171148,-.970183,.171484,-.103488,-.989166,.103824,-.063417,-.995941,.063723,-.038026,-.998535,.038331,-.020997,-.999542,.021271,-.01001,-.999878,.010468,-.74926,-.375927,.545183,-.551561,-.730857,.40199,-.333018,-.9111,.242836,-.195746,-.970183,.142857,-.118381,-.989166,.08652,-.072573,-.995941,.053133,-.04355,-.998535,.031983,-.024049,-.999542,.017762,-.011536,-.999878,.008789,-.825465,-.374187,.422559,-.607746,-.730583,.311197,-.367046,-.910977,.188055,-.215796,-.970122,.110691,-.130528,-.989166,.067049,-.08005,-.995911,.0412,-.048036,-.998535,.024812,-.026551,-.999542,.013794,-.012787,-.999878,.006897,-.881649,-.373852,.287942,-.649434,-.730186,.212195,-.392376,-.910794,.1283,-.23075,-.970061,.075564,-.139622,-.989135,.045808,-.085604,-.995911,.028169,-.051393,-.998505,.016999,-.028413,-.999542,.009491,-.013703,-.999878,.004822,-.916105,-.373516,.145543,-.675161,-.729789,.107364,-.408094,-.910581,.065004,-.240059,-.96997,.038331,-.145268,-.989105,.023286,-.089084,-.995911,.014344,-.053499,-.998505,.008698,-.029603,-.999542,.004883,-.014313,-.999878,.002594,-.928281,-.371807,549e-6,-.683798,-.729667,183e-6,-.413404,-.91052,214e-6,-.243233,-.969939,214e-6,-.147191,-.989105,214e-6,-.090304,-.995911,214e-6,-.054231,-.998505,183e-6,-.03003,-.999542,183e-6,-.014557,-.999878,305e-6,-.916135,-.373486,-.14536,-.673971,-.730888,-.107303,-.408185,-.910581,-.064516,-.24015,-.96997,-.037843,-.145329,-.989105,-.022828,-.089175,-.995911,-.013916,-.05356,-.998505,-.008271,-.029664,-.999542,-.004486,-.014405,-.999878,-.001953,-.88171,-.373852,-.287729,-.649556,-.730186,-.211798,-.394116,-.910062,-.128025,-.230903,-.970061,-.075106,-.139744,-.989135,-.045351,-.085757,-.995911,-.027741,-.051546,-.998505,-.016572,-.028565,-.999542,-.009095,-.013916,-.999878,-.004181,-.825526,-.374218,-.422376,-.607929,-.730583,-.310862,-.36726,-.910977,-.187628,-.214484,-.970489,-.110141,-.130772,-.989166,-.066622,-.080233,-.995911,-.040803,-.048219,-.998535,-.024445,-.026734,-.999542,-.013459,-.013062,-.999878,-.006317,-.749535,-.374432,-.545824,-.553026,-.729667,-.402142,-.333293,-.9111,-.242439,-.196051,-.970183,-.142491,-.118656,-.989166,-.086123,-.072848,-.995941,-.052767,-.043794,-.998535,-.031617,-.024293,-.999542,-.017426,-.011902,-.999878,-.008271,-.65569,-.374554,-.655538,-.482681,-.730949,-.482406,-.290139,-.911771,-.290597,-.171484,-.970183,-.171148,-.103824,-.989166,-.103488,-.063723,-.995941,-.063417,-.038331,-.998535,-.038026,-.021271,-.999542,-.020997,-.010468,-.999878,-.01001,-.545976,-.374462,-.749413,-.402997,-.729667,-.552385,-.242836,-.9111,-.333018,-.142857,-.970183,-.195746,-.08652,-.989166,-.118381,-.053133,-.995941,-.072573,-.031983,-.998535,-.04355,-.017762,-.999542,-.024049,-.008789,-.999878,-.011536,-.422559,-.374187,-.825465,-.311197,-.730583,-.607746,-.187933,-.910886,-.36729,-.110691,-.970122,-.215796,-.067049,-.989166,-.130528,-.0412,-.995911,-.08002,-.024812,-.998535,-.048036,-.013794,-.999542,-.026551,-.006897,-.999878,-.012787,-.287942,-.373852,-.881649,-.212195,-.730186,-.649434,-.1283,-.910794,-.392376,-.075381,-.97,-.230995,-.045808,-.989135,-.139622,-.028169,-.995911,-.085604,-.016999,-.998505,-.051393,-.009491,-.999542,-.028413,-.004822,-.999878,-.013703,-.145543,-.373516,-.916105,-.107364,-.729789,-.675161,-.065004,-.910581,-.408094,-.038331,-.96997,-.240059,-.022462,-.989319,-.143956,-.014344,-.995911,-.089084,-.008698,-.998505,-.053499,-.004883,-.999542,-.029603,-.002594,-.999878,-.014313,-549e-6,-.371807,-.928281,-519e-6,-.728446,-.68508,-214e-6,-.91052,-.413434,-214e-6,-.969939,-.243233,-214e-6,-.989105,-.147191,-214e-6,-.995911,-.090304,-183e-6,-.998505,-.054231,-183e-6,-.999542,-.03003,-305e-6,-.999878,-.014557,.14536,-.373486,-.916135,.107303,-.730888,-.673971,.064852,-.911222,-.40672,.037751,-.969573,-.241768,.022828,-.989105,-.145329,.013916,-.995911,-.089175,.008271,-.998505,-.05356,.004486,-.999542,-.029664,.001953,-.999878,-.014405,.287851,-.373791,-.88168,.211798,-.730186,-.649556,.128025,-.910062,-.394116,.075106,-.970061,-.230903,.045473,-.989349,-.138218,.027741,-.995911,-.085757,.016572,-.998505,-.051546,.009095,-.999542,-.028565,.004181,-.999878,-.013916,.422376,-.374218,-.825526,.3108,-.731681,-.606647,.187628,-.910977,-.36726,.110538,-.970092,-.216071,.066622,-.989166,-.130772,.040803,-.995911,-.080233,.024445,-.998535,-.048219,.013459,-.999542,-.026734,.006317,-.999878,-.013062,.545824,-.374432,-.749535,.401654,-.730857,-.551775,.242439,-.9111,-.333293,.142491,-.970183,-.196051,.085788,-.98938,-.117191,.052767,-.995941,-.072848,.031617,-.998535,-.043794,.017426,-.999542,-.024293,.008271,-.999878,-.011902,.655538,-.374554,-.65569,.482406,-.730949,-.482681,.291177,-.91113,-.291513,.171148,-.970183,-.171484,.103488,-.989166,-.103824,.063417,-.995941,-.063723,.038026,-.998535,-.038331,.020997,-.999542,-.021271,.01001,-.999878,-.010468,.749413,-.374462,-.545976,.551561,-.730857,-.40199,.333018,-.9111,-.242836,.195746,-.970183,-.142857,.118381,-.989166,-.08652,.072573,-.995941,-.053133,.04355,-.998535,-.031983,.024049,-.999542,-.017762,.011536,-.999878,-.008789,.8258,-.372662,-.423231,.607746,-.730583,-.311197,.368267,-.910276,-.189062,.215796,-.970122,-.110691,.130528,-.989166,-.067049,.08002,-.995911,-.0412,.048036,-.998535,-.024812,.026551,-.999542,-.013794,.012787,-.999878,-.006897,.881649,-.373852,-.287942,.648457,-.731284,-.211341,.392376,-.910794,-.1283,.230995,-.97,-.075381,.139622,-.989135,-.045808,.085604,-.995911,-.028169,.051393,-.998505,-.016999,.028413,-.999542,-.009491,.013703,-.999878,-.004822,.916105,-.373516,-.145543,.676351,-.728599,-.107883,.408094,-.910581,-.065004,.240059,-.96997,-.038331,.143956,-.989319,-.022462,.089084,-.995911,-.014344,.053499,-.998505,-.008698,.029603,-.999542,-.004883,.014313,-.999878,-.002594,.001099,-.999969,.003693,.001099,-.98471,.174108,.004791,-.985717,.168279,.004761,-.999969,-.001984,.017487,-.98526,.170049,.017426,-.999847,0,.042421,-.984497,.17008,.042177,-.999084,0,.085482,-.981506,.171117,.084841,-.996368,0,.156377,-.972167,.174352,.155126,-.987884,61e-6,.270974,-.94528,.181555,.269143,-.963073,305e-6,.449141,-.872005,.194494,.448805,-.893613,549e-6,.686972,-.695547,.210334,.694754,-.719199,366e-6,.898312,-.380535,.21955,.918332,-.395795,-336e-6,.973876,-.052339,.220862,.998474,-.055177,-397e-6,.001068,-.924345,.381512,.00473,-.926695,.375713,.017151,-.926054,.376965,.041627,-.925321,.376843,.083834,-.921628,.378826,.152867,-.910062,.385174,.262612,-.878475,.39906,.427625,-.799097,.422498,.637867,-.625294,.449538,.81869,-.336894,.464949,.882473,-.044618,.468215,946e-6,-.778222,.627949,.004212,-.779992,.625721,.015259,-.779321,.626392,.036988,-.778771,.626179,.074282,-.774255,.628437,.134373,-.760094,.635731,.227027,-.724387,.650899,.359722,-.644612,.674551,.519517,-.490097,.699911,.65157,-.256661,.713828,.695181,-.0318,.718101,61e-5,-.470199,.882534,.002716,-.474929,.880001,.009857,-.476394,.879147,.023957,-.477065,.878506,.048006,-.474685,.878842,.086245,-.464766,.881191,.143681,-.43907,.886868,.222633,-.383679,.896207,.312906,-.283242,.906552,.382641,-.142857,.912748,.399304,-.016083,.916654,0,.004303,.999969,0,-.001679,.999969,-31e-6,.001343,.999969,-183e-6,.002625,.999969,-641e-6,.00412,.999969,-.001526,.005219,.999969,-.002777,.004975,.999969,-.003571,.002808,.999969,-.002655,122e-6,.999969,-122e-6,-763e-6,.999969,-.001221,-244e-6,.999969,-671e-6,.474105,.880428,-.003021,.473861,.880551,-.011048,.478256,.87814,-.02707,.47969,.87701,-.054689,.47673,.877316,-.098453,.463179,.880764,-.162206,.428663,.88876,-.243599,.359935,.900601,-.325816,.25135,.911374,-.380779,.121372,.916623,-.39491,.011841,.918607,-.00116,.778466,.627674,-.005158,.779199,.626728,-.018708,.780053,.625416,-.045686,.778466,.625965,-.091952,.770318,.63097,-.165563,.747459,.6433,-.27427,.69451,.66512,-.415693,.588427,.693442,-.560228,.415265,.716697,-.658681,.202765,.72457,-.690573,.019166,.722983,-.001434,.927335,.374187,-.006287,.926115,.377148,-.022828,.926115,.376507,-.055757,.924131,.377941,-.112705,.916593,.383587,-.204505,.894955,.396435,-.343211,.840754,.418683,-.527879,.721885,.447401,-.717154,.514115,.470473,-.842311,.251137,.476852,-.880612,.022553,.473251,-.001526,.986023,.16657,-.006684,.985046,.172033,-.024659,.985107,.170019,-.060305,.983367,.171148,-.122196,.976989,.174688,-.222846,.957671,.182134,-.377056,.905454,.194708,-.58507,.783013,.211035,-.798151,.559282,.223853,-.93527,.271859,.2266,-.974395,.023041,.223609,-.001556,.999969,-.003723,-.006806,.999969,.001984,-.025147,.999664,153e-6,-.061617,.998077,366e-6,-.124943,.992157,671e-6,-.22837,.97354,.001007,-.387371,.921903,.001312,-.602557,.798029,.001526,-.822352,.568926,.001556,-.961486,.274728,.001282,-.999725,.022217,458ee-6,.4738,-.880612,-.003021,.475082,-.87991,-.010926,.476455,-.879116,-.026612,.476455,-.87878,-.053377,.47203,-.87994,-.095523,.457747,-.883908,-.157262,.424146,-.891812,-.237709,.358104,-.90289,-.32194,.251778,-.912656,-.381146,.121525,-.916471,-.394452,.01117,-.918821,0,-.004303,-.999969,0,-336e-6,-.999969,31e-6,-.00116,-.999969,153e-6,-.002228,-.999969,458e-6,-.00354,-.999969,.001099,-.00473,-.999969,.002136,-.005341,-.999969,.003357,-.004791,-.999969,.003845,-.002899,-.999969,.002258,-732e-6,-.999969,397e-6,-31e-6,-.999969,61e-5,-.477676,-.878506,.002716,-.473708,-.880673,.009949,-.477981,-.878292,.024293,-.479659,-.877102,.048891,-.47795,-.87701,.088198,-.467818,-.879391,.146977,-.440138,-.8858,.226661,-.380688,-.896451,.314951,-.276284,-.907987,.379772,-.137333,-.914792,.396619,-.015412,-.917814,946e-6,-.780877,-.624653,.004212,-.777825,-.628437,.01532,-.780175,-.625355,.037172,-.779962,-.624714,.074618,-.775719,-.626606,.135014,-.761711,-.633656,.228278,-.725639,-.649068,.361797,-.643727,-.674306,.520676,-.484817,-.702719,.647816,-.251015,-.71923,.691733,-.03122,-.721458,.001068,-.927305,-.374218,.00473,-.925321,-.379101,.017182,-.926328,-.376263,.041566,-.925657,-.375988,.083529,-.922147,-.377667,.152074,-.910916,-.383496,.260994,-.879971,-.396832,.425611,-.801141,-.420698,.636464,-.625813,-.450789,.81634,-.335276,-.47026,.880459,-.04471,-.471938,.001099,-.986023,-.16657,.004791,-.985046,-.172124,.017457,-.98529,-.169836,.042238,-.984527,-.169866,.084841,-.981628,-.170812,.15479,-.972533,-.173711,.267769,-.94644,-.180303,.444197,-.874905,-.192785,.682485,-.700034,-.209967,.896512,-.383312,-.222022,.973357,-.053102,-.222907,.963652,.146306,.223426,.988708,.149663,122e-6,.937437,.266396,.224006,.962462,.271401,305e-6,.902829,.368908,.220862,.927152,.374615,122e-6,.860805,.461959,.213446,.883724,.467971,-214e-6,.810602,.549516,.202338,.831446,.555559,-641e-6,.750755,.632893,.189093,.769158,.639027,-.001007,.680074,.711661,.176092,.695761,.718253,-.001221,.597919,.78399,.166814,.610706,.791833,-.001282,.504776,.847285,.165136,.514389,.85754,-.001099,.455977,.874264,.166509,.870846,.132908,.47322,.846065,.244179,.4738,.815424,.340678,.467971,.779992,.429701,.454909,.738609,.514786,.435224,.688955,.596728,.411298,.628712,.674123,.387555,.556444,.743736,.370373,.472274,.801202,.367382,.426862,.82461,.371136,.682211,.10474,.723594,.661489,.194739,.724204,.638539,.274789,.718833,.614612,.350688,.706534,.588336,.425703,.68746,.556627,.500198,.663259,.515732,.571673,.638081,.462569,.634693,.618976,.395978,.6816,.615253,.357219,.697226,.621448,.386944,.059786,.920133,.374096,.112491,.92053,.361461,.160619,.918424,.350047,.207617,.913419,.338939,.255715,.905362,.326029,.305307,.894681,.307962,.35432,.882931,.281228,.397351,.873501,.243477,.425977,.871334,.216254,.426984,.877987,-641e-6,-153e-6,.999969,-.002258,-916e-6,.999969,-.003754,-.002136,.999969,-.005066,-.003815,.999969,-.006012,-.005676,.999939,-.006226,-.007263,.999939,-.00531,-.00766,.999939,-.003204,-.005799,.999969,-488e-6,-.001434,.999969,336e-6,61ee-6,-.95056,-.310465,336e-6,-.893277,-.449446,.001068,-.822565,-.568621,.001892,-.745811,-.666128,.002564,-.668844,-.74337,.002991,-.595508,-.803308,.003052,-.527726,-.849391,.002686,-.466201,-.88464,.001892,-.436872,-.899503,.001465,-.962676,-.153478,-.222816,-.926878,-.30195,-.222846,-.872036,-.43733,-.219703,-.804682,-.554277,-.212714,-.731498,-.65099,-.202673,-.657735,-.728507,-.19129,-.58681,-.7893,-.180639,-.520524,-.836085,-.173132,-.459578,-.871487,-.170934,-.43086,-.886013,-.171209,-.870479,-.138249,-.472365,-.838557,-.271004,-.47261,-.792047,-.392529,-.467452,-.736534,-.499893,-.455611,-.676382,-.59212,-.438002,-.614612,-.669424,-.417219,-.552995,-.732353,-.397229,-.49263,-.781549,-.382672,-.434248,-.817408,-.37846,-.405927,-.831507,-.379162,-.682485,-.107791,-.722861,-.657826,-.209967,-.723258,-.625233,-.304209,-.71868,-.588702,-.390515,-.707724,-.550127,-.469497,-.690573,-.509507,-.540788,-.66924,-.466201,-.602741,-.647542,-.419477,-.652516,-.631031,-.369213,-.686514,-.626362,-.342906,-.697989,-.62862,-.387463,-.060762,-.919858,-.373302,-.117191,-.920255,-.356822,-.169439,-.918638,-.340403,-.219123,-.914365,-.32429,-.267739,-.907254,-.307321,-.315378,-.897794,-.287423,-.360118,-.887478,-.262429,-.397717,-.879147,-.230873,-.422071,-.876644,-.210395,-.424726,-.88049,-.001587,-31e-6,-.999969,.001831,671e-6,-.999969,.00351,.001831,-.999969,.005188,.00351,-.999969,.0065,.005524,-.999939,.00708,.007447,-.999939,.0065,.008301,-.999939,.004578,.00708,-.999939,.001801,.003327,-.999969,183e-6,336e-6,-.999969,.38789,.060213,-.919706,.376965,.1142,-.919126,.365307,.163945,-.916318,.354381,.212683,-.91055,.34312,.262215,-.901914,.32899,.312235,-.891201,.308695,.359691,-.88049,.279397,.398785,-.873409,.24015,.422285,-.87405,.213172,.421216,-.881527,.683096,.105197,-.722678,.663686,.196204,-.721763,.640584,.276955,-.716178,.615864,.353191,-.704215,.588275,.427808,-.686178,.55501,.501053,-.663991,.512772,.570482,-.64156,.459029,.631092,-.625263,.392926,.675954,-.623432,.353099,.68984,-.631977,.871303,.133091,-.472304,.847163,.244606,-.471664,.816248,.340953,-.466323,.780297,.429426,-.454573,.738395,.513688,-.436842,.688406,.594745,-.415143,.628132,.671285,-.393384,.556139,.740379,-.377453,.472304,.797754,-.374767,.424543,.820887,-.381939,.963805,.146184,-.222907,.937834,.265938,-.222877,.903378,.367809,-.220374,.861568,.460158,-.214209,.811701,.547044,-.204535,.752312,.629994,-.192572,.682028,.70867,-.180425,.600024,.781396,-.17127,.506516,.845454,-.169195,.455184,.873287,-.173528,-.081393,.996673,855e-6,-.082766,.95819,.273873,-.182226,.949553,.255135,-.186468,.982452,-977e-6,-.402203,.882717,.242836,-.419111,.907926,-519e-6,-.629597,.742119,.229865,-.655354,.755303,61e-6,-.798364,.561693,.216987,-.826533,.562883,427e-6,-.884854,.413526,.214454,-.913694,.406323,946e-6,-.909207,.344096,.234291,-.943571,.331065,.00293,-.890835,.363903,.271859,-.936766,.34962,.014252,-.833552,.458388,.308298,-.890744,.454207,.014954,-.723075,.607318,.329051,-.782708,.622211,.013184,-.592547,.740379,.317301,-.637226,.770623,.007019,-.079073,.828822,.55388,-.158818,.837275,.523148,-.341258,.79284,.504868,-.538743,.688406,.48558,-.694266,.547166,.467513,-.776421,.42732,.463149,-.790887,.369213,.48796,-.760033,.379162,.527757,-.690176,.443831,.57149,-.585833,.548173,.596851,-.483108,.654042,.582049,-.060945,.606189,.792962,-.110752,.633778,.765526,-.227912,.620045,.750694,-.365642,.5674,.737754,-.485092,.487472,.725944,-.553758,.41319,.722892,-.564989,.371014,.73693,-.543352,.368664,.754204,-.484054,.398267,.779107,-.406262,.451003,.794671,-.338633,.521653,.783044,-.024323,.317881,.947783,-.033418,.343425,.938566,-.060976,.360179,.930876,-.109073,.365307,.924436,-.163427,.353038,.921201,-.201972,.330699,.921842,-.225593,.31312,.922513,-.242714,.306986,.920225,-.239753,.310831,.919706,-.211859,.313761,.925535,-.183477,.345561,.920255,.02942,-.002747,.999542,.069247,-.005249,.997559,.146214,.02588,.988891,.211463,.077822,.974273,.233345,.136113,.962798,.199469,.180486,.963103,.154973,.190344,.96939,.100253,.178869,.978729,.053865,.14716,.98764,.026612,.08121,.996338,-.005036,.087649,.996124,.095676,-.329173,.93939,.167943,-.3202,.93231,.318949,-.267403,.909238,.454543,-.172185,.873897,.532823,-.068636,.84341,.538591,.008087,.842524,.483657,.040345,.874294,.398358,.023621,.916898,.303903,-.037751,.951933,.224891,-.160924,.960997,.178228,-.247139,.952422,.16129,-.612445,.773858,.254555,-.591357,.76516,.456099,-.512528,.7275,.629749,-.375011,.680258,.731956,-.23191,.640645,.75808,-.133488,.638325,.723106,-.10007,.683432,.645161,-.135929,.751854,.533952,-.235725,.811945,.408856,-.402478,.819025,.316172,-.530168,.786706,.213813,-.8193,.531938,.319926,-.789575,.523606,.546251,-.682028,.48619,.735374,-.511155,.444838,.844966,-.341044,.411878,.882199,-.232063,.40968,.869137,-.206336,.449385,.815271,-.267678,.513443,.710349,-.406873,.574297,.552049,-.5992,.579791,.410108,-.739341,.533952,.244972,-.933653,.261177,.357341,-.898373,.255318,.59154,-.771783,.233192,.785119,-.582446,.210456,.896207,-.399304,.193152,.938536,-.286966,.191748,.938871,-.268899,.214911,.903012,-.34904,.250343,.808039,-.515244,.285531,.631947,-.719596,.287698,.454939,-.852901,.25605,.254463,-.967071,-244e-6,.370037,-.929014,.001434,.604816,-.79635,-397e-6,.798944,-.601367,-.001343,.90997,-.414655,-.002564,.953154,-.302347,-.005493,.956847,-.290536,-.004517,.925108,-.379589,-.0047,.831263,-.555834,-.003937,.648,-.76162,-.001984,.464156,-.885739,58e-5,.244331,-.932463,-.26606,.360942,-.898099,-.251137,.594043,-.769463,-.234504,.787194,-.578387,-.213813,.897153,-.394116,-.199286,.937284,-.282022,-.204749,.93527,-.269234,-.229713,.896969,-.353832,-.264931,.800134,-.522477,-.294504,.624104,-.726707,-.286935,.455397,-.855098,-.247688,.211615,-.812311,-.543443,.324656,-.790979,-.518571,.549211,-.677664,-.488937,.737083,-.504929,-.44911,.844172,-.333964,-.419294,.877041,-.224891,-.424482,.860317,-.202582,-.467757,.80633,-.26606,-.528184,.705924,-.407086,-.579577,.552355,-.603992,-.57448,.417249,-.747215,-.517197,.157781,-.598926,-.785058,.259011,-.592853,-.762505,.458022,-.505448,-.731223,.629292,-.367534,-.684744,.727928,-.224372,-.647877,.749138,-.126164,-.650258,.712668,-.094394,-.69509,.641011,-.130741,-.756279,.539262,-.23075,-.80987,.418195,-.400372,-.815332,.328806,-.541215,-.773888,.092746,-.316172,-.944151,.169073,-.316141,-.9335,.317911,-.25895,-.912046,.450514,-.165685,-.877224,.526292,-.063936,-.847865,.532456,.01062,-.84637,.483749,.04178,-.874172,.408948,.025513,-.912168,.320231,-.034242,-.946715,.237678,-.15482,-.958892,.188635,-.253395,-.948759,.026704,.012177,-.999542,.067202,.004852,-.997711,.141758,.032716,-.989349,.206244,.080081,-.975188,.23542,.131718,-.962889,.22187,.169103,-.960295,.174017,.185308,-.967132,.124271,.174932,-.976684,.074313,.144383,-.986694,.035279,.082919,-.995911,.004608,.075625,-.997101,-.027406,.340892,-.939695,-.034486,.339091,-.940092,-.058412,.351634,-.934294,-.099124,.354686,-.929685,-.146214,.34434,-.927366,-.189581,.327158,-.925748,-.212073,.310007,-.926756,-.216315,.300211,-.928983,-.212867,.300485,-.929716,-.192907,.302133,-.933531,-.167852,.33549,-.926939,-.062746,.628956,-.774865,-.112003,.629627,-.768761,-.226661,.61626,-.754173,-.361217,.56505,-.741752,-.484146,.486709,-.727073,-.55855,.41203,-.719871,-.570421,.370251,-.733116,-.536149,.368786,-.75927,-.475448,.399548,-.783746,-.400128,.454512,-.79577,-.323527,.520768,-.790002,-.078921,.84167,-.534165,-.157476,.833888,-.528977,-.338908,.791009,-.509323,-.537431,.687948,-.487686,-.697012,.547197,-.463332,-.78045,.427534,-.45616,-.798395,.369091,-.475661,-.768273,.378979,-.515824,-.696493,.445875,-.562151,-.588946,.553148,-.58916,-.472274,.657918,-.586566,-.081881,.960875,-.264534,-.178899,.949004,-.259468,-.400098,.882931,-.245552,-.628864,.742668,-.230049,-.797937,.563097,-.21485,-.88461,.416242,-.210181,-.911374,.345622,-.223426,-.89996,.359844,-.24604,-.845241,.453566,-.282479,-.734275,.604846,-.308115,-.591937,.743431,-.311289,-.487045,.82577,.284341,-.523179,.852168,.005341,-.41023,.878323,.245369,-.440596,.897671,.00354,-.322306,.926633,.193396,-.345347,.938444,.001648,-.207404,.970916,.119388,-.220405,.975402,183e-6,.02884,.998627,-.043153,.045991,.998932,-427e-6,.486465,.810877,-.325205,.597827,.801599,61e-6,.828059,.178014,-.531571,.99176,.128025,-61e-5,.766106,-.397382,-.505081,.874203,-.485488,-.002441,.641835,-.645894,-.413312,.706992,-.707205,-732e-6,.59389,-.723289,-.352275,.641102,-.767296,.014069,-.399213,.746117,.532792,-.33726,.820429,.461592,-.266823,.891598,.365795,-.172918,.958739,.225532,-.004975,.998871,-.046999,.277993,.838435,-.468703,.512131,.313913,-.799463,.534227,-.192511,-.823084,.487686,-.483077,-.727134,.468368,-.592792,-.65511,-.283395,.618854,.732597,-.242225,.729118,.640065,-.19367,.838191,.509781,-.128849,.94113,.312418,-.027528,.999359,-.021882,.12656,.868374,-.479446,.261971,.461287,-.847652,.310099,.030824,-.950194,.311869,-.274331,-.909635,.311289,-.402783,-.860714,-.152409,.440138,.884884,-.132115,.599872,.789087,-.108982,.764977,.634724,-.08066,.916837,.391003,-.036714,.999176,.015595,.031892,.895566,-.443739,.096225,.585192,-.805139,.133122,.235694,-.962645,.148503,-.049745,-.98764,.15302,-.175329,-.972533,92e-6,.189184,.981933,275e-6,.407819,.913053,-.007294,.651875,.758263,-.021729,.878719,.476791,-.034333,.997681,.058504,-.031343,.918668,-.39375,-.019379,.687521,-.725883,-.006928,.422193,-.906461,214e-6,.186102,-.982513,-92e-6,.084201,-.996429,.162847,-.139439,.976714,.158879,.116214,.980407,.133976,.454817,.880428,.068331,.81109,.580889,-.018921,.994201,.105716,-.078494,.938505,-.336161,-.107364,.775506,-.622089,-.122349,.593524,-.795434,-.134342,.427442,-.893979,-.142827,.359355,-.922178,.306131,-.48732,.817774,.329417,-.266579,.905759,.334147,.1236,.934355,.231941,.673696,.701651,.018128,.987457,.156713,-.116703,.955962,-.269265,-.177831,.851344,-.493484,-.216254,.743858,-.632344,-.246712,.648366,-.720206,-.261177,.609119,-.748802,.392712,-.745628,.538285,.450179,-.620045,.642506,.540788,-.30015,.78576,.515885,.418775,.747276,.098636,.975066,.198645,-.148289,.970489,-.190039,-.232917,.911618,-.338633,-.284646,.857753,-.427992,-.3249,.81225,-.48442,-.342357,.792352,-.504898,.423933,-.871273,.247169,.492996,-.816095,.301492,.646443,-.640858,.413923,.839137,.172155,.515915,.243599,.954619,.171209,-.170629,.980468,-.097476,-.267312,.948943,-.167302,-.323038,.922971,-.209143,-.365398,.901181,-.23307,-.383343,.890774,-.243965,.429762,-.902921,-.003784,.49913,-.866482,-.005585,.664022,-.747581,-.011902,.9935,.113559,-.002747,.339152,.940703,-427e-6,-.178411,.983947,61e-6,-.278146,.960509,-61e-6,-.33491,.942228,-.00119,-.37669,.926328,336e-6,-.39433,.918943,-.003815,.424818,-.868404,-.255684,.495376,-.809107,-.31608,.65389,-.610645,-.446638,.833308,.198798,-.515763,.265908,.94821,-.173711,-.170568,.980468,.097781,-.266854,.948882,.168371,-.323588,.922636,.209784,-.36552,.900266,.236427,-.384136,.893246,.233467,.392529,-.738731,-.547838,.44966,-.603107,-.658803,.536363,-.262734,-.802026,.525101,.400555,-.750847,.128513,.966033,-.224067,-.147282,.970916,.188696,-.232521,.911405,.339427,-.284371,.856563,.430555,-.323832,.808954,.490616,-.345256,.79989,.490829,.305002,-.480758,-.822077,.327219,-.255165,-.909818,.333079,.128056,-.934141,.248299,.646321,-.721519,.033448,.982238,-.184484,-.115574,.957091,.265694,-.178045,.850765,.49443,-.216224,.743126,.633229,-.244911,.644246,.724509,-.265938,.620472,.737724,.163945,-.142705,-.976074,.160283,.111942,-.980682,.137577,.445204,-.884762,.076357,.798334,-.597308,-.012696,.991913,-.126072,-.077792,.940977,.329325,-.106937,.774407,.623554,-.122776,.592425,.796167,-.133915,.426679,.894406,-.146123,.366894,.918699,.004883,.179937,-.983642,.002777,.4008,-.916135,-.004975,.645985,-.763298,-.01886,.87463,-.484359,-.032075,.997009,-.070132,-.0318,.922025,.385754,-.018067,.686117,.727226,-.006653,.417493,.908628,122e-6,.18244,.983184,61e-6,.083468,.99649,-.144963,.435713,-.888302,-.127293,.59859,-.790857,-.106662,.764153,-.636128,-.079501,.916654,-.391675,-.03531,.999146,-.020386,.030519,.898953,.436933,.098422,.584094,.805658,.134678,.227638,.964354,.148381,-.056398,.987304,.146428,-.166662,.975066,-.27839,.616779,-.736229,-.236976,.728477,-.64275,-.189245,.83932,-.509598,-.126743,.942778,-.308298,-.025422,.999451,.020692,.125065,.871242,.474624,.264595,.462783,.846034,.312235,.022217,.949736,.310862,-.279855,.908292,.295785,-.384472,.874447,-.398419,.746239,-.533219,-.335337,.820368,-.463149,-.263253,.892178,-.366955,-.169317,.960204,-.222022,-.002014,.998932,.04593,.276925,.840632,.465407,.514298,.319681,.795801,.535569,-.196783,.821223,.485763,-.483444,.728202,.449782,-.573473,.684683,-.489883,.826411,-.277444,-.411908,.878597,-.241615,-.322336,.926786,-.192602,-.205267,.971465,-.118564,.028748,.998749,.040193,.483016,.814325,.321787,.827906,.189062,.52797,.768212,-.394696,.503983,.642506,-.642689,.417249,.5833,-.713767,.387585,.130131,.991272,.020875,.13184,.991241,366e-6,0,1,0,.415082,.907376,.065645,.420362,.907346,244e-6,.887143,.439711,.139988,.899014,.43788,336e-6,.951415,-.268838,.149937,.963195,-.268715,-61e-6,.792627,-.596728,.124882,.802637,-.596423,-92e-6,.736778,-.666036,.116276,.746178,-.6657,31e-6,.775842,-.619037,.121586,.786218,-.617939,92e-6,.908231,-.393109,.143254,.919584,-.392834,-488e-6,.970702,.184118,.154302,.983551,.180548,-336e-6,.667135,.737358,.105869,.675436,.737388,-183e-6,.125065,.991272,.040986,.399182,.90759,.129826,.853359,.441725,.276833,.915983,-.269204,.297372,.762749,-.597369,.247597,.709525,-.666555,.228523,.746605,-.619739,.241798,.874569,-.392346,.28486,.934355,.183996,.305124,.641743,.737785,.209235,.116916,.991302,.059999,.373394,.907834,.190649,.799799,.440291,.407971,.857265,-.271218,.437605,.714011,-.59801,.363994,.663411,-.667318,.33842,.699088,-.619587,.356822,.818781,-.393078,.418348,.874935,.183905,.44789,.600665,.738121,.307108,.10596,.991333,.077486,.337626,.908719,.245277,.726005,.440535,.528001,.778832,-.269875,.566179,.648,-.598468,.471023,.602008,-.667745,.437757,.634327,-.620136,.461562,.74337,-.392163,.541795,.794397,.183844,.578875,.546495,.737114,.397443,.092502,.991333,.093051,.295907,.908078,.296304,.635121,.438795,.635639,.680898,-.269967,.680776,.566485,-.598621,.566301,.526261,-.667898,.5262,.554552,-.620319,.554674,.649892,-.393811,.650014,.695303,.182043,.695242,.476943,.738456,.476638,.076876,.991333,.106388,.245491,.908719,.337474,.527787,.440565,.726157,.566912,-.268197,.778863,.472335,-.597491,.647969,.437819,-.667745,.601978,.461867,-.62096,.63329,.541002,-.395032,.742454,.578845,.182104,.794794,.397198,.738365,.544969,.059328,.991302,.117252,.190161,.907834,.373669,.40791,.43849,.800806,.437513,-.26957,.857814,.363048,-.598926,.713736,.336741,-.667379,.664205,.356731,-.619648,.699088,.418348,-.393048,.818812,.44734,.183996,.87521,.307474,.738151,.600452,.040254,.991272,.125309,.129215,.908322,.397748,.27723,.441755,.853206,.297525,-.269204,.915952,.248817,-.596393,.763115,.230323,-.666677,.708853,.243568,-.61977,.745994,.285104,-.393811,.873836,.304544,.184057,.934507,.209632,.737815,.641591,.020112,.991272,.130253,.065279,.908109,.413556,.139622,.43791,.888089,.149541,-.270455,.951018,.126011,-.595752,.793176,.114322,-.666097,.737022,.123447,-.619068,.775536,.143315,-.390332,.909421,.153691,.184149,.970794,.106082,.73748,.666951,-366e-6,.991241,.13184,122e-6,.908078,.418775,-336e-6,.43788,.899014,458e-6,-.267037,.963683,92e-6,-.596423,.802637,-.001923,-.665792,.746117,-122e-6,-.617908,.786218,-61e-5,-.389996,.920804,31e-6,.182409,.983215,183e-6,.737388,.675436,-.020875,.991272,.130131,-.065645,.907376,.415082,-.139866,.439619,.887204,-.149937,-.268838,.951415,-.125706,-.597674,.791803,-.114414,-.665914,.737175,-.121586,-.619068,.775842,-.143284,-.393078,.908261,-.153996,.182318,.971099,-.105655,.73748,.667043,-.040986,.991272,.125065,-.128971,.908322,.397839,-.277444,.439985,.85403,-.297678,-.270821,.915403,-.247017,-.596423,.763695,-.230293,-.666677,.708853,-.242897,-.618915,.74694,-.28486,-.392315,.874569,-.305155,.183966,.934355,-.209235,.737785,.641743,-.059999,.991302,.116916,-.190649,.907834,.373424,-.408551,.438459,.800501,-.437391,-.269601,.857875,-.363994,-.59801,.714011,-.340068,-.667409,.662465,-.356914,-.619648,.698996,-.418378,-.393048,.818812,-.44789,.183874,.874966,-.307108,.738121,.600665,-.077486,.991333,.10596,-.246529,.908017,.338664,-.528001,.440535,.726005,-.566179,-.269875,.778832,-.471023,-.598468,.648,-.437757,-.667745,.602008,-.461531,-.620136,.634327,-.540147,-.395032,.743065,-.578845,.183844,.794397,-.397443,.737114,.546495,-.093051,.991333,.092502,-.296304,.908078,.295907,-.634846,.440626,.634632,-.680776,-.269967,.680898,-.566301,-.598621,.566485,-.5262,-.667898,.526261,-.554674,-.620319,.554552,-.649159,-.395215,.649892,-.695242,.183874,.694815,-.476638,.738456,.476943,-.106388,.991333,.076876,-.338969,.908017,.246101,-.726157,.440535,.527787,-.778741,-.269875,.566301,-.647877,-.598468,.471236,-.601978,-.667745,.437819,-.634419,-.620136,.461379,-.742454,-.395032,.540971,-.794733,.183905,.578356,-.544969,.738365,.397198,-.117252,.991302,.059328,-.373669,.907834,.190161,-.799921,.440321,.407697,-.857814,-.269601,.437513,-.71392,-.59801,.364208,-.663411,-.667318,.33845,-.698019,-.620472,.357372,-.818018,-.394513,.418531,-.87521,.183966,.44734,-.600452,.738151,.307474,-.125309,.991272,.040254,-.397748,.908322,.129215,-.853206,.441755,.27723,-.916257,-.267525,.298044,-.762688,-.597369,.24781,-.708335,-.666585,.232154,-.745994,-.61977,.243599,-.874569,-.392346,.284829,-.934751,.182165,.304971,-.641591,.737815,.209632,-.128544,.991485,.020234,-.415174,.907376,.065127,-.888089,.43791,.139622,-.951018,-.270455,.149541,-.792077,-.597644,.124058,-.736778,-.666036,.116245,-.77636,-.618213,.122623,-.909452,-.390301,.143315,-.970794,.184149,.153691,-.665792,.738609,.105411,-.13184,.991241,-366e-6,-.422132,.906522,-397e-6,-.898099,.439741,-122e-6,-.963195,-.268715,61e-6,-.802637,-.596423,92e-6,-.746178,-.6657,-31e-6,-.785577,-.618732,916e-6,-.920194,-.391369,0,-.983215,.182409,31e-6,-.675436,.737388,183e-6,-.130131,.991272,-.020875,-.415082,.907376,-.065645,-.886349,.44145,-.1395,-.951415,-.268838,-.149937,-.792627,-.596728,-.124882,-.737175,-.665914,-.114414,-.775842,-.619037,-.121586,-.90878,-.391644,-.143864,-.971099,.182257,-.154057,-.667043,.73748,-.105655,-.125065,.991272,-.040986,-.397839,.908322,-.128971,-.853328,.441725,-.276833,-.915983,-.269173,-.297433,-.762749,-.597369,-.247597,-.709525,-.666555,-.228523,-.74694,-.618885,-.242927,-.874569,-.392315,-.28486,-.934355,.183996,-.305124,-.6404,.738945,-.209296,-.116916,.991302,-.059999,-.373424,.907834,-.190649,-.79989,.440199,-.407849,-.857265,-.271218,-.437605,-.712973,-.598956,-.364513,-.663411,-.667318,-.33842,-.699088,-.619587,-.356822,-.818781,-.393078,-.418348,-.874966,.183874,-.44789,-.600665,.738121,-.307108,-.10596,.991333,-.077486,-.338664,.908017,-.246529,-.726005,.440535,-.528001,-.778161,-.271493,-.566301,-.648,-.598468,-.471023,-.602008,-.667745,-.437757,-.634327,-.620136,-.461562,-.74337,-.392163,-.541795,-.794397,.183844,-.578875,-.546495,.737114,-.397443,-.092502,.991333,-.093051,-.295083,.90878,-.2949,-.634632,.440626,-.634846,-.680898,-.269967,-.680776,-.566485,-.598621,-.566301,-.526261,-.667898,-.5262,-.554552,-.620319,-.554674,-.649892,-.395215,-.649159,-.695303,.182043,-.695242,-.476943,.738456,-.476638,-.076876,.991333,-.106388,-.246101,.908017,-.339,-.528153,.438704,-.727012,-.566301,-.269875,-.778741,-.471236,-.598468,-.647877,-.437819,-.667745,-.601978,-.461867,-.62096,-.63329,-.541002,-.395032,-.742454,-.578356,.183905,-.794763,-.397198,.738365,-.544969,-.059328,.991302,-.117252,-.190161,.907834,-.373669,-.407697,.440321,-.799921,-.437513,-.269601,-.857814,-.364208,-.59801,-.71392,-.33845,-.667318,-.663411,-.357341,-.620472,-.69805,-.418348,-.393048,-.818812,-.44734,.183996,-.87521,-.307474,.738151,-.600452,-.040254,.991272,-.125309,-.129215,.908322,-.397748,-.27723,.441755,-.853206,-.297525,-.269204,-.915952,-.248817,-.596393,-.763115,-.230323,-.666677,-.708853,-.243599,-.61977,-.745994,-.284829,-.392376,-.874569,-.304544,.184027,-.934507,-.209632,.737815,-.641591,-.020112,.991272,-.130253,-.065127,.907376,-.415174,-.139622,.43791,-.888089,-.149541,-.270455,-.951018,-.125095,-.596728,-.792596,-.114353,-.666097,-.737022,-.123447,-.619068,-.775536,-.143315,-.390301,-.909452,-.153691,.184118,-.970794,-.106082,.73748,-.666951,366e-6,.991241,-.13184,244e-6,.907346,-.420362,122e-6,.439741,-.898099,-61e-6,-.268715,-.963195,-92e-6,-.596423,-.802637,31e-6,-.6657,-.746178,92e-6,-.617939,-.786218,61e-5,-.389996,-.920804,-336e-6,.180548,-.983551,-183e-6,.737388,-.675436,.020875,.991272,-.130131,.065645,.907376,-.415082,.139988,.439711,-.887143,.149937,-.268838,-.951415,.124882,-.596728,-.792627,.116276,-.666036,-.736778,.121586,-.619068,-.775842,.143254,-.393109,-.908231,.153996,.182318,-.971099,.10593,.738609,-.665731,.040986,.991272,-.125065,.129826,.90759,-.399182,.276833,.441725,-.853359,.297372,-.269204,-.915983,.247597,-.597369,-.762749,.228523,-.666555,-.709525,.241768,-.619739,-.746605,.28486,-.392346,-.874569,.305155,.183996,-.934355,.209418,.736534,-.643117,.059999,.991302,-.116916,.190649,.907834,-.373424,.40727,.44203,-.799188,.437605,-.271218,-.857265,.363567,-.597034,-.715049,.33842,-.667318,-.663411,.356822,-.619587,-.699088,.418348,-.393078,-.818781,.44789,.183905,-.874935,.307108,.738121,-.600665,.077486,.991333,-.10596,.246529,.908017,-.338664,.528031,.440535,-.726005,.566301,-.271493,-.778161,.471023,-.598468,-.648,.439253,-.667837,-.600818,.461562,-.620136,-.634327,.541795,-.392163,-.74337,.578875,.183874,-.794397,.397443,.737114,-.546495,.093051,.991333,-.092502,.296304,.908078,-.295907,.634846,.440626,-.634632,.680776,-.269967,-.680898,.566301,-.598621,-.566485,.5262,-.667898,-.526261,.554674,-.620319,-.554552,.650014,-.393811,-.649892,.695242,.180181,-.695791,.476638,.738456,-.476943,.106388,.991333,-.076876,.339,.908017,-.246101,.726157,.440535,-.527787,.778741,-.269875,-.566301,.647877,-.598468,-.471236,.601978,-.667745,-.437819,.63329,-.62096,-.461867,.742454,-.395032,-.541002,.794794,.182073,-.578875,.544237,.739525,-.396069,.117252,.991302,-.059328,.373669,.907834,-.190161,.799921,.440321,-.407697,.857814,-.26957,-.437513,.714194,-.597034,-.365276,.663411,-.667318,-.33845,.69805,-.620472,-.357372,.818812,-.393048,-.418348,.875362,.182134,-.447768,.600452,.738151,-.307474,.125309,.991272,-.040254,.399365,.90762,-.129307,.854122,.440016,-.277139,.915952,-.269204,-.297525,.762688,-.597369,-.24781,.709372,-.666738,-.228492,.745994,-.61977,-.243568,.874569,-.392376,-.284829,.934538,.184057,-.304544,.640553,.738945,-.208808,.130253,.991272,-.020112,.413556,.908109,-.065279,.887173,.439741,-.139683,.951415,-.268838,-.15009,.792596,-.596728,-.125095,.736778,-.666036,-.116245,.77633,-.618275,-.122501,.909421,-.390332,-.143315,.970794,.184149,-.153691,.666951,.73748,-.106082,.373669,.925657,.059053,.37846,.925596,-214e-6,.245491,.968596,.038728,.248665,.968566,-183e-6,.183111,.982665,.028871,.185461,.982635,-153e-6,.154698,.98764,.024445,.156713,.98761,-92e-6,.149968,.988372,.023835,.151952,.988372,31e-6,.168889,.98526,.026948,.171148,.985229,153e-6,.222266,.974334,.035463,.225196,.974303,183e-6,.348674,.935575,.055574,.353252,.935514,214e-6,.669454,.73513,.106479,.677999,.735038,214e-6,.838862,.528703,.12946,.848903,.528489,-.003632,.35783,.926389,.117161,.236061,.968688,.076815,.176061,.982696,.057253,.148747,.987671,.048433,.144169,.988403,.04709,.162358,.98529,.053133,.21363,.974395,.069948,.335215,.935728,.109653,.643971,.735496,.210425,.807733,.529191,.259804,.336161,.925993,.171728,.220832,.968749,.112735,.164708,.982727,.084078,.139164,.987701,.071078,.134831,.988433,.069033,.15183,.985321,.077853,.199805,.974456,.102451,.313547,.93585,.16068,.602649,.735862,.308634,.756737,.529618,.383129,.305063,.926084,.2219,.200415,.96881,.145695,.14948,.982757,.108646,.126286,.987732,.09183,.122318,.988464,.089145,.13773,.985351,.100497,.181249,.974487,.132267,.284433,.935942,.207465,.546922,.736137,.398633,.687613,.529923,.496323,.26545,.926695,.265969,.175298,.96881,.174993,.130741,.982757,.130497,.110446,.987732,.110294,.106967,.988464,.107028,.120426,.985351,.12064,.158452,.974487,.158757,.248115,.936521,.247658,.478317,.736229,.478652,.60213,.530076,.597003,.222266,.926084,.304788,.146031,.96881,.20014,.110202,.982543,.149785,.092013,.987732,.126164,.09003,.988525,.12122,.100253,.985351,.137913,.131932,.974487,.181494,.206702,.936491,.283242,.398938,.734855,.548448,.502213,.529954,.683309,.172155,.925993,.335948,.113132,.968749,.220649,.084384,.982727,.164556,.069887,.987793,.138981,.068941,.988433,.134892,.077334,.985137,.153325,.102084,.974456,.199988,.160253,.93585,.313761,.308664,.734581,.604205,.38963,.529649,.75341,.117466,.92584,.359172,.077212,.968688,.235908,.057588,.982696,.175939,.048616,.987671,.148686,.046999,.988403,.1442,.052828,.98529,.16245,.069521,.974395,.213782,.109195,.935728,.335368,.209998,.735496,.644124,.266762,.529221,.805444,.059511,.925657,.373577,.039155,.968596,.24543,.029206,.982665,.18305,.024659,.98764,.154668,.023743,.988372,.149968,.026643,.98526,.16895,.035066,.974334,.222327,.055086,.935575,.348766,.106052,.73513,.669546,.136692,.528733,.837703,61e-5,.924986,.379986,183e-6,.968566,.248665,153e-6,.982635,.185461,92e-6,.98761,.156713,-31e-6,.988372,.151952,-153e-6,.985229,.171148,-183e-6,.974303,.225196,-214e-6,.935514,.353252,-214e-6,.735038,.677999,.003632,.528489,.848903,-.059053,.925657,.373669,-.039247,.968932,.244118,-.028871,.982665,.183111,-.024445,.98764,.154698,-.023835,.988372,.149968,-.026948,.98526,.168889,-.035463,.974334,.222266,-.055574,.935575,.348674,-.106479,.73513,.669454,-.12946,.528703,.838862,-.117008,.92584,.359325,-.076815,.968688,.236061,-.057253,.982696,.176061,-.048433,.987671,.148747,-.04709,.988403,.144169,-.053133,.98529,.162358,-.069948,.974395,.21363,-.109653,.935728,.335215,-.209632,.736686,.642903,-.259804,.529191,.807733,-.171728,.925993,.336161,-.112735,.968749,.220832,-.084078,.982727,.164708,-.071078,.987701,.139164,-.069033,.988433,.134831,-.077853,.985321,.15183,-.102451,.974456,.199805,-.16068,.93585,.313547,-.308634,.735893,.602649,-.386242,.529679,.75512,-.2219,.926084,.305063,-.145695,.96881,.200415,-.108646,.982757,.14948,-.09183,.987732,.126286,-.089145,.988464,.122318,-.100497,.985351,.13773,-.132267,.974487,.181249,-.207465,.935942,.284433,-.398633,.736137,.546922,-.496292,.529923,.687613,-.265969,.926695,.26545,-.174993,.96881,.175298,-.130497,.982757,.130741,-.110294,.987732,.110446,-.107028,.988464,.106967,-.12064,.985351,.120426,-.158757,.974487,.158452,-.249062,.935972,.248726,-.478652,.736229,.478317,-.597003,.530076,.60213,-.304788,.926084,.222266,-.20014,.96881,.146031,-.149266,.982757,.108921,-.126164,.987732,.092013,-.122379,.988464,.089084,-.137913,.985351,.100253,-.181494,.974487,.131932,-.283242,.936491,.206702,-.547197,.736137,.398297,-.683309,.529954,.502213,-.335948,.925993,.172155,-.220649,.968749,.113132,-.164556,.982727,.084384,-.139042,.987701,.071261,-.134892,.988433,.068941,-.151982,.985321,.077578,-.199988,.974456,.102084,-.313761,.93585,.160253,-.604205,.734581,.308664,-.75341,.529649,.38963,-.359172,.92584,.117466,-.235908,.968688,.077212,-.175939,.982696,.057588,-.148686,.987671,.048616,-.1442,.988403,.046999,-.161199,.985443,.053438,-.212348,.97467,.069826,-.335368,.935728,.109195,-.644124,.735496,.209998,-.805444,.529221,.266762,-.373577,.925657,.059511,-.24543,.968596,.039155,-.18305,.982665,.029206,-.154668,.98764,.024659,-.149968,.988372,.023743,-.16895,.98526,.026643,-.223792,.973998,.03473,-.350352,.934965,.054994,-.669546,.73513,.106052,-.837703,.528733,.136692,-.37846,.925596,214e-6,-.248665,.968566,183e-6,-.185461,.982635,153e-6,-.156713,.98761,92e-6,-.151952,.988372,-31e-6,-.171148,.985229,-153e-6,-.225196,.974303,-183e-6,-.351817,.936033,336e-6,-.677999,.735038,-214ee-6,.925596,-.37846,488e-6,.968902,-.247383,-153e-6,.982635,-.185461,-92e-6,.98761,-.156713,31e-6,.988372,-.151952,153e-6,.985229,-.171148,183e-6,.974303,-.225196,214e-6,.935514,-.353252,214e-6,.735038,-.677999,-.003632,.528489,-.848903,.059053,.925657,-.373638,.038728,.968596,-.245491,.028871,.982665,-.183111,.024445,.98764,-.154698,.023835,.988372,-.149968,.026948,.98526,-.168889,.035463,.974334,-.222266,.055574,.935575,-.348674,.106479,.73513,-.669454,.12946,.528703,-.838862,.117008,.92584,-.359325,.076815,.968688,-.236061,.057253,.982696,-.176061,.048433,.987671,-.148747,.04709,.988403,-.144169,.053133,.98529,-.162358,.069948,.974395,-.21363,.109653,.935728,-.335215,.210425,.735496,-.643971,.259804,.529191,-.807733,.171667,.926542,-.334666,.112735,.968749,-.220832,.084078,.982727,-.164708,.071078,.987701,-.139164,.069033,.988433,-.134831,.077853,.985321,-.15183,.102451,.974456,-.199805,.16068,.93585,-.313547,.308634,.735862,-.602649,.383129,.529618,-.756737,.2219,.926084,-.305063,.145695,.96881,-.200415,.108646,.982757,-.14948,.09183,.987732,-.126286,.089145,.988464,-.122318,.100497,.985351,-.13773,.132267,.974487,-.181249,.206153,.936491,-.283639,.397534,.737297,-.546159,.496323,.529923,-.687613,.265969,.926695,-.26545,.174993,.96881,-.175298,.130497,.982757,-.130741,.110294,.987732,-.110446,.107028,.988464,-.106967,.12064,.985351,-.120426,.157353,.974792,-.158086,.249062,.936003,-.248726,.479781,.734947,-.479171,.599475,.530045,-.599689,.304788,.926084,-.222266,.20014,.96881,-.146031,.149785,.982543,-.110202,.126164,.987732,-.092013,.122379,.988464,-.089084,.137913,.985351,-.100253,.181494,.974487,-.131932,.284738,.935881,-.207343,.547197,.736137,-.398297,.683309,.529923,-.502213,.335948,.925993,-.172155,.220649,.968749,-.113132,.164556,.982727,-.084384,.138981,.987793,-.069887,.134892,.988433,-.068941,.151982,.985321,-.077578,.199988,.974456,-.102084,.313761,.93585,-.160253,.604205,.734581,-.308664,.75341,.529649,-.38963,.359172,.92584,-.117466,.235908,.968688,-.077212,.175939,.982696,-.057588,.148686,.987671,-.048616,.1442,.988403,-.046999,.16245,.98529,-.052828,.212348,.97467,-.069826,.335368,.935728,-.109195,.644124,.735496,-.209998,.805444,.529221,-.266762,.373577,.925657,-.059511,.24543,.968596,-.039155,.18305,.982665,-.029206,.154668,.98764,-.024659,.149968,.988372,-.023743,.16895,.98526,-.026643,.222327,.974334,-.035066,.350352,.934965,-.054994,.669546,.73513,-.106052,.837703,.528733,-.136692]),_.setData(ht.Z.S_UV0,[.684148,.5,.681346,.442629,.679187,.443206,.681961,.5,.67834,.443432,.681102,.5,.67862,.443358,.681386,.5,.679843,.443031,.682625,.5,.681825,.442501,.684633,.5,.684383,.441818,.687224,.5,.687331,.44103,.690211,.5,.690487,.440187,.693408,.5,.693666,.439338,.696628,.5,.696683,.438531,.699685,.5,.673219,.388447,.671142,.389569,.670327,.390009,.670596,.389864,.671773,.389228,.67368,.388198,.676141,.38687,.678978,.385338,.682014,.383699,.685073,.382047,.687976,.380479,.660185,.338126,.658239,.339753,.657475,.340392,.657728,.340181,.65883,.339259,.660617,.337765,.662923,.335836,.665581,.333614,.668425,.331235,.671291,.328838,.674011,.326563,.642661,.292336,.640892,.294423,.640197,.295243,.640426,.294972,.641429,.293789,.643054,.291872,.645151,.289399,.647568,.286547,.650156,.283495,.652762,.280421,.655236,.277502,.621066,.251748,.619513,.254244,.618903,.255224,.619105,.2549,.619984,.253486,.62141,.251194,.62325,.248237,.625371,.244828,.62764,.24118,.629927,.237505,.632097,.234016,.595815,.217035,.594516,.21988,.594007,.220996,.594175,.220628,.594911,.219016,.596104,.216403,.597642,.213033,.599416,.209147,.601315,.204989,.603228,.2008,.605043,.196823,.567328,.188867,.566316,.191995,.565918,.193223,.56605,.192817,.566623,.191045,.567553,.188173,.568753,.184467,.570135,.180194,.571615,.175622,.573106,.171016,.574521,.166643,.536022,.167916,.535324,.171255,.535051,.172565,.535141,.172132,.535536,.170241,.536177,.167175,.537004,.163219,.537957,.158659,.538977,.153779,.540004,.148863,.540979,.144196,.502315,.154853,.501956,.158323,.501815,.159685,.501861,.159235,.502065,.157269,.502394,.154083,.502819,.149972,.503309,.145232,.503834,.14016,.504362,.13505,.504864,.1302,.466623,.15035,.466623,.153865,.466623,.155245,.466623,.154789,.466623,.152797,.466623,.149569,.466623,.145405,.466623,.140603,.466623,.135465,.466623,.130288,.466623,.125375,.427534,.154853,.428813,.158323,.429692,.159685,.430219,.159235,.430448,.157269,.430427,.154083,.43021,.149972,.429845,.145232,.429385,.14016,.428881,.13505,.428382,.1302,.391854,.167916,.394007,.171255,.395446,.172565,.396264,.172132,.39655,.170241,.396398,.167175,.395899,.16322,.395145,.158659,.394227,.153779,.393237,.148863,.392267,.144196,.359751,.188867,.362435,.191995,.364171,.193223,.365081,.192817,.365291,.191045,.364922,.188173,.364099,.184467,.362944,.180194,.361582,.175622,.360134,.171016,.358725,.166643,.33139,.217035,.334326,.21988,.336147,.220996,.336999,.220628,.337031,.219016,.336388,.216403,.335217,.213033,.333667,.209147,.331883,.204989,.330013,.2008,.328203,.196823,.306937,.251748,.309911,.254244,.311658,.255224,.312343,.2549,.312129,.253486,.311181,.251194,.309661,.248237,.307734,.244828,.305564,.24118,.303315,.237505,.301149,.234016,.286558,.292336,.289419,.294424,.290988,.295243,.291439,.294972,.290947,.293789,.289689,.291872,.287838,.289399,.285569,.286547,.283059,.283495,.280481,.280421,.278011,.277503,.270418,.338126,.273081,.339753,.274418,.340392,.274612,.340181,.273845,.339259,.272299,.337765,.270155,.335837,.267594,.333614,.2648,.331235,.261953,.328838,.259235,.326564,.258685,.388448,.261126,.389569,.262232,.390009,.26219,.389864,.261183,.389229,.259398,.388199,.257019,.38687,.254232,.385338,.251221,.383699,.248172,.382047,.24527,.38048,.251523,.44263,.253784,.443206,.254713,.443433,.254497,.443358,.253322,.443031,.251374,.442501,.24884,.441818,.245905,.44103,.242756,.440187,.23958,.439338,.236563,.438532,.249099,.5,.251286,.5,.252144,.5,.251861,.5,.250621,.5,.248613,.5,.246022,.5,.243035,.5,.239839,.5,.236618,.5,.233561,.5,.251901,.557371,.254059,.556794,.254907,.556568,.254627,.556642,.253404,.556969,.251421,.557499,.248864,.558182,.245915,.55897,.24276,.559813,.239581,.560662,.236563,.561469,.260027,.611553,.262104,.610431,.26292,.609991,.26265,.610136,.261473,.610772,.259566,.611802,.257105,.61313,.254268,.614662,.251232,.616301,.248174,.617953,.24527,.619521,.273061,.661874,.275007,.660247,.275771,.659608,.275519,.659819,.274416,.660741,.272629,.662235,.270324,.664164,.267666,.666386,.264821,.668765,.261956,.671162,.259236,.673437,.290585,.707664,.292355,.705577,.29305,.704757,.29282,.705028,.291817,.706211,.290192,.708128,.288095,.710601,.285678,.713453,.283091,.716505,.280485,.719579,.278011,.722498,.312181,.748252,.313734,.745756,.314343,.744776,.314142,.7451,.313262,.746514,.311836,.748806,.309997,.751763,.307876,.755172,.305606,.75882,.30332,.762495,.301149,.765984,.337431,.782965,.33873,.78012,.33924,.779004,.339071,.779372,.338336,.780984,.337143,.783597,.335604,.786967,.33383,.790853,.331931,.795011,.330019,.7992,.328203,.803177,.365918,.811133,.366931,.808005,.367328,.806777,.367197,.807183,.366623,.808955,.365693,.811827,.364494,.815533,.363111,.819806,.361631,.824378,.36014,.828984,.358725,.833357,.397224,.832084,.397922,.828745,.398196,.827435,.398105,.827868,.39771,.829759,.397069,.832825,.396243,.836781,.39529,.841341,.39427,.846221,.393243,.851137,.392267,.855804,.430932,.845147,.431291,.841677,.431432,.840315,.431385,.840765,.431182,.842731,.430852,.845917,.430427,.850028,.429937,.854768,.429412,.85984,.428884,.86495,.428383,.8698,.466623,.84965,.466623,.846135,.466623,.844755,.466623,.845211,.466623,.847203,.466623,.850431,.466623,.854595,.466623,.859397,.466623,.864535,.466623,.869712,.466623,.874625,.502315,.845147,.501956,.841677,.501815,.840315,.501862,.840765,.502065,.842731,.502394,.845917,.502819,.850028,.50331,.854768,.503834,.85984,.504363,.86495,.504864,.8698,.536022,.832084,.535325,.828745,.535051,.827435,.535141,.827868,.535536,.829759,.536177,.832825,.537004,.83678,.537957,.841341,.538977,.846221,.540004,.851137,.540979,.855804,.567328,.811133,.566316,.808005,.565919,.806777,.56605,.807183,.566623,.808955,.567553,.811827,.568753,.815533,.570136,.819806,.571616,.824378,.573106,.828984,.574522,.833357,.595815,.782965,.594517,.78012,.594007,.779004,.594175,.779372,.594911,.780984,.596104,.783597,.597643,.786967,.599417,.790853,.601315,.795011,.603228,.7992,.605043,.803177,.621066,.748252,.619513,.745756,.618903,.744776,.619105,.7451,.619985,.746514,.62141,.748806,.62325,.751763,.625371,.755172,.62764,.75882,.629927,.762495,.632097,.765984,.642661,.707664,.640892,.705576,.640197,.704757,.640426,.705028,.641429,.706211,.643054,.708128,.645151,.710601,.647568,.713453,.650156,.716505,.652762,.719579,.655236,.722497,.660185,.661874,.658239,.660247,.657475,.659608,.657728,.659819,.65883,.660741,.660617,.662235,.662923,.664163,.665581,.666386,.668425,.668765,.671291,.671162,.674011,.673436,.673219,.611552,.671142,.610431,.670327,.609991,.670596,.610136,.671773,.610771,.67368,.611801,.676141,.61313,.678978,.614662,.682014,.616301,.685073,.617953,.687976,.61952,.681346,.55737,.679187,.556794,.67834,.556567,.67862,.556642,.679843,.556969,.681825,.557499,.684383,.558182,.687331,.55897,.690487,.559813,.693666,.560662,.696683,.561468,.708148,.435468,.711299,.5,.719383,.432467,.722681,.5,.730157,.429588,.733596,.5,.740241,.426893,.743811,.5,.749405,.424445,.753095,.5,.757419,.422304,.761213,.5,.764053,.420531,.767933,.5,.769075,.419189,.773022,.5,.772258,.418339,.776246,.5,.77337,.418042,.777372,.5,.699007,.374523,.709816,.368687,.720183,.363089,.729886,.35785,.738703,.353089,.746413,.348926,.752796,.34548,.757628,.34287,.76069,.341217,.76176,.340639,.684346,.31792,.694473,.309451,.704186,.301328,.713276,.293726,.721537,.286817,.728761,.280776,.734741,.275775,.739269,.271989,.742138,.269589,.74314,.268751,.664635,.266415,.673845,.255549,.682679,.245129,.690946,.235376,.698459,.226513,.705029,.218763,.710467,.212348,.714586,.20749,.717195,.204412,.718106,.203337,.640343,.220761,.648424,.207772,.656174,.195315,.663427,.183656,.670018,.173061,.675782,.163796,.680553,.156127,.684166,.15032,.686455,.14664,.687255,.145355,.611941,.181715,.618701,.16691,.625183,.152711,.631251,.139422,.636765,.127345,.641586,.116784,.645577,.108043,.6486,.101423,.650514,.09723,.651183,.095764,.579898,.150031,.585167,.133752,.590221,.11814,.59495,.103528,.599248,.090249,.603007,.078637,.606118,.069025,.608473,.061747,.609966,.057136,.610488,.055524,.544685,.126465,.548316,.10909,.551798,.092426,.555057,.07683,.558019,.062657,.560609,.050264,.562753,.040004,.564377,.032236,.565405,.027314,.565765,.025594,.50677,.111771,.508637,.093713,.510428,.076394,.512104,.060184,.513627,.045454,.51496,.032573,.516062,.02191,.516897,.013836,.517426,.00872,.517611,.006933,.466623,.106706,.466623,.088412,.466623,.070867,.466623,.054446,.466623,.039523,.466623,.026473,.466623,.015672,.466623,.007493,.466623,.00231,.466623,499eesetData(ht.Z.S_INDICES,[0,1,2,3,0,2,3,2,4,4,5,3,5,4,6,6,7,5,7,6,8,8,9,7,9,8,10,10,11,9,11,10,12,12,13,11,13,12,14,14,15,13,15,14,16,16,17,15,17,16,18,18,19,17,19,18,20,20,21,19,1,22,23,23,2,1,2,23,24,24,4,2,4,24,25,25,6,4,6,25,26,26,8,6,8,26,27,27,10,8,10,27,28,28,12,10,12,28,29,29,14,12,14,29,30,30,16,14,16,30,31,31,18,16,18,31,32,32,20,18,22,33,34,34,23,22,23,34,35,35,24,23,24,35,36,36,25,24,25,36,37,37,26,25,26,37,38,38,27,26,27,38,39,39,28,27,28,39,40,40,29,28,29,40,41,41,30,29,30,41,42,42,31,30,31,42,43,43,32,31,33,44,45,45,34,33,34,45,46,46,35,34,35,46,47,47,36,35,36,47,48,48,37,36,37,48,49,49,38,37,38,49,50,50,39,38,39,50,51,51,40,39,40,51,52,52,41,40,41,52,53,53,42,41,42,53,54,54,43,42,44,55,56,56,45,44,45,56,57,57,46,45,46,57,58,58,47,46,47,58,59,59,48,47,48,59,60,60,49,48,49,60,61,61,50,49,50,61,62,62,51,50,51,62,63,63,52,51,52,63,64,64,53,52,53,64,65,65,54,53,55,66,67,67,56,55,56,67,68,68,57,56,57,68,69,69,58,57,58,69,70,70,59,58,59,70,71,71,60,59,60,71,72,72,61,60,61,72,73,73,62,61,62,73,74,74,63,62,63,74,75,75,64,63,64,75,76,76,65,64,66,77,78,78,67,66,67,78,79,79,68,67,68,79,80,80,69,68,69,80,81,81,70,69,70,81,82,82,71,70,71,82,83,83,72,71,72,83,84,84,73,72,73,84,85,85,74,73,74,85,86,86,75,74,75,86,87,87,76,75,77,88,89,89,78,77,78,89,90,90,79,78,79,90,91,91,80,79,80,91,92,92,81,80,81,92,93,93,82,81,82,93,94,94,83,82,83,94,95,95,84,83,84,95,96,96,85,84,85,96,97,97,86,85,86,97,98,98,87,86,88,99,100,100,89,88,89,100,101,101,90,89,90,101,102,102,91,90,91,102,103,103,92,91,92,103,104,104,93,92,93,104,105,105,94,93,94,105,106,106,95,94,95,106,107,107,96,95,96,107,108,108,97,96,97,108,109,109,98,97,99,110,111,111,100,99,100,111,112,112,101,100,101,112,113,113,102,101,102,113,114,114,103,102,103,114,115,115,104,103,104,115,116,116,105,104,105,116,117,117,106,105,106,117,118,118,107,106,107,118,119,119,108,107,108,119,120,120,109,108,110,121,122,122,111,110,111,122,123,123,112,111,112,123,124,124,113,112,113,124,125,125,114,113,114,125,126,126,115,114,115,126,127,127,116,115,116,127,128,128,117,116,117,128,129,129,118,117,118,129,130,130,119,118,119,130,131,131,120,119,121,132,133,133,122,121,122,133,134,134,123,122,123,134,135,135,124,123,124,135,136,136,125,124,125,136,137,137,126,125,126,137,138,138,127,126,127,138,139,139,128,127,128,139,140,140,129,128,129,140,141,141,130,129,130,141,142,142,131,130,132,143,144,144,133,132,133,144,145,145,134,133,134,145,146,146,135,134,135,146,147,147,136,135,136,147,148,148,137,136,137,148,149,149,138,137,138,149,150,150,139,138,139,150,151,151,140,139,140,151,152,152,141,140,141,152,153,153,142,141,143,154,155,155,144,143,144,155,156,156,145,144,145,156,157,157,146,145,146,157,158,158,147,146,147,158,159,159,148,147,148,159,160,160,149,148,149,160,161,161,150,149,150,161,162,162,151,150,151,162,163,163,152,151,152,163,164,164,153,152,154,165,166,166,155,154,155,166,167,167,156,155,156,167,168,168,157,156,157,168,169,169,158,157,158,169,170,170,159,158,159,170,171,171,160,159,160,171,172,172,161,160,161,172,173,173,162,161,162,173,174,174,163,162,163,174,175,175,164,163,165,176,177,177,166,165,166,177,178,178,167,166,167,178,179,179,168,167,168,179,180,180,169,168,169,180,181,181,170,169,170,181,182,182,171,170,171,182,183,183,172,171,172,183,184,184,173,172,173,184,185,185,174,173,174,185,186,186,175,174,176,187,188,188,177,176,177,188,189,189,178,177,178,189,190,190,179,178,179,190,191,191,180,179,180,191,192,192,181,180,181,192,193,193,182,181,182,193,194,194,183,182,183,194,195,195,184,183,184,195,196,196,185,184,185,196,197,197,186,185,187,198,199,199,188,187,188,199,200,200,189,188,189,200,201,201,190,189,190,201,202,202,191,190,191,202,203,203,192,191,192,203,204,204,193,192,193,204,205,205,194,193,194,205,206,206,195,194,195,206,207,207,196,195,196,207,208,208,197,196,198,209,210,210,199,198,199,210,211,211,200,199,200,211,212,212,201,200,201,212,213,213,202,201,202,213,214,214,203,202,203,214,215,215,204,203,204,215,216,216,205,204,205,216,217,217,206,205,206,217,218,218,207,206,207,218,219,219,208,207,209,220,221,221,210,209,210,221,222,222,211,210,211,222,223,223,212,211,212,223,224,224,213,212,213,224,225,225,214,213,214,225,226,226,215,214,215,226,227,227,216,215,216,227,228,228,217,216,217,228,229,229,218,217,218,229,230,230,219,218,220,231,232,232,221,220,221,232,233,233,222,221,222,233,234,234,223,222,223,234,235,235,224,223,224,235,236,236,225,224,225,236,237,237,226,225,226,237,238,238,227,226,227,238,239,239,228,227,228,239,240,240,229,228,229,240,241,241,230,229,231,242,243,243,232,231,232,243,244,244,233,232,233,244,245,245,234,233,234,245,246,246,235,234,235,246,247,247,236,235,236,247,248,248,237,236,237,248,249,249,238,237,238,249,250,250,239,238,239,250,251,251,240,239,240,251,252,252,241,240,242,253,254,254,243,242,243,254,255,255,244,243,244,255,256,256,245,244,245,256,257,257,246,245,246,257,258,258,247,246,247,258,259,259,248,247,248,259,260,260,249,248,249,260,261,261,250,249,250,261,262,262,251,250,251,262,263,263,252,251,253,264,265,265,254,253,254,265,266,266,255,254,255,266,267,267,256,255,256,267,268,268,257,256,257,268,269,269,258,257,258,269,270,270,259,258,259,270,271,271,260,259,260,271,272,272,261,260,261,272,273,273,262,261,262,273,274,274,263,262,264,275,276,276,265,264,265,276,277,277,266,265,266,277,278,278,267,266,267,278,279,279,268,267,268,279,280,280,269,268,269,280,281,281,270,269,270,281,282,282,271,270,271,282,283,283,272,271,272,283,284,284,273,272,273,284,285,285,274,273,275,286,287,287,276,275,276,287,288,288,277,276,277,288,289,289,278,277,278,289,290,290,279,278,279,290,291,291,280,279,280,291,292,292,281,280,281,292,293,293,282,281,282,293,294,294,283,282,283,294,295,295,284,283,284,295,296,296,285,284,286,297,298,298,287,286,287,298,299,299,288,287,288,299,300,300,289,288,289,300,301,301,290,289,290,301,302,302,291,290,291,302,303,303,292,291,292,303,304,304,293,292,293,304,305,305,294,293,294,305,306,306,295,294,295,306,307,307,296,295,297,308,309,309,298,297,298,309,310,310,299,298,299,310,311,311,300,299,300,311,312,312,301,300,301,312,313,313,302,301,302,313,314,314,303,302,303,314,315,315,304,303,304,315,316,316,305,304,305,316,317,317,306,305,306,317,318,318,307,306,308,319,320,320,309,308,309,320,321,321,310,309,310,321,322,322,311,310,311,322,323,323,312,311,312,323,324,324,313,312,313,324,325,325,314,313,314,325,326,326,315,314,315,326,327,327,316,315,316,327,328,328,317,316,317,328,329,329,318,317,319,330,331,331,320,319,320,331,332,332,321,320,321,332,333,333,322,321,322,333,334,334,323,322,323,334,335,335,324,323,324,335,336,336,325,324,325,336,337,337,326,325,326,337,338,338,327,326,327,338,339,339,328,327,328,339,340,340,329,328,330,341,342,342,331,330,331,342,343,343,332,331,332,343,344,344,333,332,333,344,345,345,334,333,334,345,346,346,335,334,335,346,347,347,336,335,336,347,348,348,337,336,337,348,349,349,338,337,338,349,350,350,339,338,339,350,351,351,340,339,341,352,353,353,342,341,342,353,354,354,343,342,343,354,355,355,344,343,344,355,356,356,345,344,345,356,357,357,346,345,346,357,358,358,347,346,347,358,359,359,348,347,348,359,360,360,349,348,349,360,361,361,350,349,350,361,362,362,351,350,352,363,364,364,353,352,353,364,365,365,354,353,354,365,366,366,355,354,355,366,367,367,356,355,356,367,368,368,357,356,357,368,369,369,358,357,358,369,370,370,359,358,359,370,371,371,360,359,360,371,372,372,361,360,361,372,373,373,362,361,363,374,375,375,364,363,364,375,376,376,365,364,365,376,377,377,366,365,366,377,378,378,367,366,367,378,379,379,368,367,368,379,380,380,369,368,369,380,381,381,370,369,370,381,382,382,371,370,371,382,383,383,372,371,372,383,384,384,373,372,374,385,386,386,375,374,375,386,387,387,376,375,376,387,388,388,377,376,377,388,389,389,378,377,378,389,390,390,379,378,379,390,391,391,380,379,380,391,392,392,381,380,381,392,393,393,382,381,382,393,394,394,383,382,383,394,395,395,384,383,385,396,397,397,386,385,386,397,398,398,387,386,387,398,399,399,388,387,388,399,400,400,389,388,389,400,401,401,390,389,390,401,402,402,391,390,391,402,403,403,392,391,392,403,404,404,393,392,393,404,405,405,394,393,394,405,406,406,395,394,396,407,408,408,397,396,397,408,409,409,398,397,398,409,410,410,399,398,399,410,411,411,400,399,400,411,412,412,401,400,401,412,413,413,402,401,402,413,414,414,403,402,403,414,415,415,404,403,404,415,416,416,405,404,405,416,417,417,406,405,407,418,419,419,408,407,408,419,420,420,409,408,409,420,421,421,410,409,410,421,422,422,411,410,411,422,423,423,412,411,412,423,424,424,413,412,413,424,425,425,414,413,414,425,426,426,415,414,415,426,427,427,416,415,416,427,428,428,417,416,418,429,430,430,419,418,419,430,431,431,420,419,420,431,432,432,421,420,421,432,433,433,422,421,422,433,434,434,423,422,423,434,435,435,424,423,424,435,436,436,425,424,425,436,437,437,426,425,426,437,438,438,427,426,427,438,439,439,428,427,429,0,3,3,430,429,430,3,5,5,431,430,431,5,7,7,432,431,432,7,9,9,433,432,433,9,11,11,434,433,434,11,13,13,435,434,435,13,15,15,436,435,436,15,17,17,437,436,437,17,19,19,438,437,438,19,21,21,439,438,21,20,440,440,441,21,441,440,442,442,443,441,443,442,444,444,445,443,445,444,446,446,447,445,447,446,448,448,449,447,449,448,450,450,451,449,451,450,452,452,453,451,453,452,454,454,455,453,455,454,456,456,457,455,457,456,458,458,459,457,20,32,460,460,440,20,440,460,461,461,442,440,442,461,462,462,444,442,444,462,463,463,446,444,446,463,464,464,448,446,448,464,465,465,450,448,450,465,466,466,452,450,452,466,467,467,454,452,454,467,468,468,456,454,456,468,469,469,458,456,32,43,470,470,460,32,460,470,471,471,461,460,461,471,472,472,462,461,462,472,473,473,463,462,463,473,474,474,464,463,464,474,475,475,465,464,465,475,476,476,466,465,466,476,477,477,467,466,467,477,478,478,468,467,468,478,479,479,469,468,43,54,480,480,470,43,470,480,481,481,471,470,471,481,482,482,472,471,472,482,483,483,473,472,473,483,484,484,474,473,474,484,485,485,475,474,475,485,486,486,476,475,476,486,487,487,477,476,477,487,488,488,478,477,478,488,489,489,479,478,54,65,490,490,480,54,480,490,491,491,481,480,481,491,492,492,482,481,482,492,493,493,483,482,483,493,494,494,484,483,484,494,495,495,485,484,485,495,496,496,486,485,486,496,497,497,487,486,487,497,498,498,488,487,488,498,499,499,489,488,65,76,500,500,490,65,490,500,501,501,491,490,491,501,502,502,492,491,492,502,503,503,493,492,493,503,504,504,494,493,494,504,505,505,495,494,495,505,506,506,496,495,496,506,507,507,497,496,497,507,508,508,498,497,498,508,509,509,499,498,76,87,510,510,500,76,500,510,511,511,501,500,501,511,512,512,502,501,502,512,513,513,503,502,503,513,514,514,504,503,504,514,515,515,505,504,505,515,516,516,506,505,506,516,517,517,507,506,507,517,518,518,508,507,508,518,519,519,509,508,87,98,520,520,510,87,510,520,521,521,511,510,511,521,522,522,512,511,512,522,523,523,513,512,513,523,524,524,514,513,514,524,525,525,515,514,515,525,526,526,516,515,516,526,527,527,517,516,517,527,528,528,518,517,518,528,529,529,519,518,98,109,530,530,520,98,520,530,531,531,521,520,521,531,532,532,522,521,522,532,533,533,523,522,523,533,534,534,524,523,524,534,535,535,525,524,525,535,536,536,526,525,526,536,537,537,527,526,527,537,538,538,528,527,528,538,539,539,529,528,109,120,540,540,530,109,530,540,541,541,531,530,531,541,542,542,532,531,532,542,543,543,533,532,533,543,544,544,534,533,534,544,545,545,535,534,535,545,546,546,536,535,536,546,547,547,537,536,537,547,548,548,538,537,538,548,549,549,539,538,120,131,550,550,540,120,540,550,551,551,541,540,541,551,552,552,542,541,542,552,553,553,543,542,543,553,554,554,544,543,544,554,555,555,545,544,545,555,556,556,546,545,546,556,557,557,547,546,547,557,558,558,548,547,548,558,559,559,549,548,131,142,560,560,550,131,550,560,561,561,551,550,551,561,562,562,552,551,552,562,563,563,553,552,553,563,564,564,554,553,554,564,565,565,555,554,555,565,566,566,556,555,556,566,567,567,557,556,557,567,568,568,558,557,558,568,569,569,559,558,142,153,570,570,560,142,560,570,571,571,561,560,561,571,572,572,562,561,562,572,573,573,563,562,563,573,574,574,564,563,564,574,575,575,565,564,565,575,576,576,566,565,566,576,577,577,567,566,567,577,578,578,568,567,568,578,579,579,569,568,153,164,580,580,570,153,570,580,581,581,571,570,571,581,582,582,572,571,572,582,583,583,573,572,573,583,584,584,574,573,574,584,585,585,575,574,575,585,586,586,576,575,576,586,587,587,577,576,577,587,588,588,578,577,578,588,589,589,579,578,164,175,590,590,580,164,580,590,591,591,581,580,581,591,592,592,582,581,582,592,593,593,583,582,583,593,594,594,584,583,584,594,595,595,585,584,585,595,596,596,586,585,586,596,597,597,587,586,587,597,598,598,588,587,588,598,599,599,589,588,175,186,600,600,590,175,590,600,601,601,591,590,591,601,602,602,592,591,592,602,603,603,593,592,593,603,604,604,594,593,594,604,605,605,595,594,595,605,606,606,596,595,596,606,607,607,597,596,597,607,608,608,598,597,598,608,609,609,599,598,186,197,610,610,600,186,600,610,611,611,601,600,601,611,612,612,602,601,602,612,613,613,603,602,603,613,614,614,604,603,604,614,615,615,605,604,605,615,616,616,606,605,606,616,617,617,607,606,607,617,618,618,608,607,608,618,619,619,609,608,197,208,620,620,610,197,610,620,621,621,611,610,611,621,622,622,612,611,612,622,623,623,613,612,613,623,624,624,614,613,614,624,625,625,615,614,615,625,626,626,616,615,616,626,627,627,617,616,617,627,628,628,618,617,618,628,629,629,619,618,208,219,630,630,620,208,620,630,631,631,621,620,621,631,632,632,622,621,622,632,633,633,623,622,623,633,634,634,624,623,624,634,635,635,625,624,625,635,636,636,626,625,626,636,637,637,627,626,627,637,638,638,628,627,628,638,639,639,629,628,219,230,640,640,630,219,630,640,641,641,631,630,631,641,642,642,632,631,632,642,643,643,633,632,633,643,644,644,634,633,634,644,645,645,635,634,635,645,646,646,636,635,636,646,647,647,637,636,637,647,648,648,638,637,638,648,649,649,639,638,230,241,650,650,640,230,640,650,651,651,641,640,641,651,652,652,642,641,642,652,653,653,643,642,643,653,654,654,644,643,644,654,655,655,645,644,645,655,656,656,646,645,646,656,657,657,647,646,647,657,658,658,648,647,648,658,659,659,649,648,241,252,660,660,650,241,650,660,661,661,651,650,651,661,662,662,652,651,652,662,663,663,653,652,653,663,664,664,654,653,654,664,665,665,655,654,655,665,666,666,656,655,656,666,667,667,657,656,657,667,668,668,658,657,658,668,669,669,659,658,252,263,670,670,660,252,660,670,671,671,661,660,661,671,672,672,662,661,662,672,673,673,663,662,663,673,674,674,664,663,664,674,675,675,665,664,665,675,676,676,666,665,666,676,677,677,667,666,667,677,678,678,668,667,668,678,679,679,669,668,263,274,680,680,670,263,670,680,681,681,671,670,671,681,682,682,672,671,672,682,683,683,673,672,673,683,684,684,674,673,674,684,685,685,675,674,675,685,686,686,676,675,676,686,687,687,677,676,677,687,688,688,678,677,678,688,689,689,679,678,274,285,690,690,680,274,680,690,691,691,681,680,681,691,692,692,682,681,682,692,693,693,683,682,683,693,694,694,684,683,684,694,695,695,685,684,685,695,696,696,686,685,686,696,697,697,687,686,687,697,698,698,688,687,688,698,699,699,689,688,285,296,700,700,690,285,690,700,701,701,691,690,691,701,702,702,692,691,692,702,703,703,693,692,693,703,704,704,694,693,694,704,705,705,695,694,695,705,706,706,696,695,696,706,707,707,697,696,697,707,708,708,698,697,698,708,709,709,699,698,296,307,710,710,700,296,700,710,711,711,701,700,701,711,712,712,702,701,702,712,713,713,703,702,703,713,714,714,704,703,704,714,715,715,705,704,705,715,716,716,706,705,706,716,717,717,707,706,707,717,718,718,708,707,708,718,719,719,709,708,307,318,720,720,710,307,710,720,721,721,711,710,711,721,722,722,712,711,712,722,723,723,713,712,713,723,724,724,714,713,714,724,725,725,715,714,715,725,726,726,716,715,716,726,727,727,717,716,717,727,728,728,718,717,718,728,729,729,719,718,318,329,730,730,720,318,720,730,731,731,721,720,721,731,732,732,722,721,722,732,733,733,723,722,723,733,734,734,724,723,724,734,735,735,725,724,725,735,736,736,726,725,726,736,737,737,727,726,727,737,738,738,728,727,728,738,739,739,729,728,329,340,740,740,730,329,730,740,741,741,731,730,731,741,742,742,732,731,732,742,743,743,733,732,733,743,744,744,734,733,734,744,745,745,735,734,735,745,746,746,736,735,736,746,747,747,737,736,737,747,748,748,738,737,738,748,749,749,739,738,340,351,750,750,740,340,740,750,751,751,741,740,741,751,752,752,742,741,742,752,753,753,743,742,743,753,754,754,744,743,744,754,755,755,745,744,745,755,756,756,746,745,746,756,757,757,747,746,747,757,758,758,748,747,748,758,759,759,749,748,351,362,760,760,750,351,750,760,761,761,751,750,751,761,762,762,752,751,752,762,763,763,753,752,753,763,764,764,754,753,754,764,765,765,755,754,755,765,766,766,756,755,756,766,767,767,757,756,757,767,768,768,758,757,758,768,769,769,759,758,362,373,770,770,760,362,760,770,771,771,761,760,761,771,772,772,762,761,762,772,773,773,763,762,763,773,774,774,764,763,764,774,775,775,765,764,765,775,776,776,766,765,766,776,777,777,767,766,767,777,778,778,768,767,768,778,779,779,769,768,373,384,780,780,770,373,770,780,781,781,771,770,771,781,782,782,772,771,772,782,783,783,773,772,773,783,784,784,774,773,774,784,785,785,775,774,775,785,786,786,776,775,776,786,787,787,777,776,777,787,788,788,778,777,778,788,789,789,779,778,384,395,790,790,780,384,780,790,791,791,781,780,781,791,792,792,782,781,782,792,793,793,783,782,783,793,794,794,784,783,784,794,795,795,785,784,785,795,796,796,786,785,786,796,797,797,787,786,787,797,798,798,788,787,788,798,799,799,789,788,395,406,800,800,790,395,790,800,801,801,791,790,791,801,802,802,792,791,792,802,803,803,793,792,793,803,804,804,794,793,794,804,805,805,795,794,795,805,806,806,796,795,796,806,807,807,797,796,797,807,808,808,798,797,798,808,809,809,799,798,406,417,810,810,800,406,800,810,811,811,801,800,801,811,812,812,802,801,802,812,813,813,803,802,803,813,814,814,804,803,804,814,815,815,805,804,805,815,816,816,806,805,806,816,817,817,807,806,807,817,818,818,808,807,808,818,819,819,809,808,417,428,820,820,810,417,810,820,821,821,811,810,811,821,822,822,812,811,812,822,823,823,813,812,813,823,824,824,814,813,814,824,825,825,815,814,815,825,826,826,816,815,816,826,827,827,817,816,817,827,828,828,818,817,818,828,829,829,819,818,428,439,830,830,820,428,820,830,831,831,821,820,821,831,832,832,822,821,822,832,833,833,823,822,823,833,834,834,824,823,824,834,835,835,825,824,825,835,836,836,826,825,826,836,837,837,827,826,827,837,838,838,828,827,828,838,839,839,829,828,439,21,441,441,830,439,830,441,443,443,831,830,831,443,445,445,832,831,832,445,447,447,833,832,833,447,449,449,834,833,834,449,451,451,835,834,835,451,453,453,836,835,836,453,455,455,837,836,837,455,457,457,838,837,838,457,459,459,839,838,459,458,840,840,841,459,841,840,842,842,843,841,843,842,844,844,845,843,845,844,846,846,847,845,847,846,848,848,849,847,849,848,850,850,851,849,851,850,852,852,853,851,853,852,854,854,855,853,855,854,856,856,857,855,857,856,858,858,859,857,458,469,860,860,840,458,840,860,861,861,842,840,842,861,862,862,844,842,844,862,863,863,846,844,846,863,864,864,848,846,848,864,865,865,850,848,850,865,866,866,852,850,852,866,867,867,854,852,854,867,868,868,856,854,856,868,869,869,858,856,469,479,870,870,860,469,860,870,871,871,861,860,861,871,872,872,862,861,862,872,873,873,863,862,863,873,874,874,864,863,864,874,875,875,865,864,865,875,876,876,866,865,866,876,877,877,867,866,867,877,878,878,868,867,868,878,879,879,869,868,479,489,880,880,870,479,870,880,881,881,871,870,871,881,882,882,872,871,872,882,883,883,873,872,873,883,884,884,874,873,874,884,885,885,875,874,875,885,886,886,876,875,876,886,887,887,877,876,877,887,888,888,878,877,878,888,889,889,879,878,489,499,890,890,880,489,880,890,891,891,881,880,881,891,892,892,882,881,882,892,893,893,883,882,883,893,894,894,884,883,884,894,895,895,885,884,885,895,896,896,886,885,886,896,897,897,887,886,887,897,898,898,888,887,888,898,899,899,889,888,499,509,900,900,890,499,890,900,901,901,891,890,891,901,902,902,892,891,892,902,903,903,893,892,893,903,904,904,894,893,894,904,905,905,895,894,895,905,906,906,896,895,896,906,907,907,897,896,897,907,908,908,898,897,898,908,909,909,899,898,509,519,910,910,900,509,900,910,911,911,901,900,901,911,912,912,902,901,902,912,913,913,903,902,903,913,914,914,904,903,904,914,915,915,905,904,905,915,916,916,906,905,906,916,917,917,907,906,907,917,918,918,908,907,908,918,919,919,909,908,519,529,920,920,910,519,910,920,921,921,911,910,911,921,922,922,912,911,912,922,923,923,913,912,913,923,924,924,914,913,914,924,925,925,915,914,915,925,926,926,916,915,916,926,927,927,917,916,917,927,928,928,918,917,918,928,929,929,919,918,529,539,930,930,920,529,920,930,931,931,921,920,921,931,932,932,922,921,922,932,933,933,923,922,923,933,934,934,924,923,924,934,935,935,925,924,925,935,936,936,926,925,926,936,937,937,927,926,927,937,938,938,928,927,928,938,939,939,929,928,539,549,940,940,930,539,930,940,941,941,931,930,931,941,942,942,932,931,932,942,943,943,933,932,933,943,944,944,934,933,934,944,945,945,935,934,935,945,946,946,936,935,936,946,947,947,937,936,937,947,948,948,938,937,938,948,949,949,939,938,549,559,950,950,940,549,940,950,951,951,941,940,941,951,952,952,942,941,942,952,953,953,943,942,943,953,954,954,944,943,944,954,955,955,945,944,945,955,956,956,946,945,946,956,957,957,947,946,947,957,958,958,948,947,948,958,959,959,949,948,559,569,960,960,950,559,950,960,961,961,951,950,951,961,962,962,952,951,952,962,963,963,953,952,953,963,964,964,954,953,954,964,965,965,955,954,955,965,966,966,956,955,956,966,967,967,957,956,957,967,968,968,958,957,958,968,969,969,959,958,569,579,970,970,960,569,960,970,971,971,961,960,961,971,972,972,962,961,962,972,973,973,963,962,963,973,974,974,964,963,964,974,975,975,965,964,965,975,976,976,966,965,966,976,977,977,967,966,967,977,978,978,968,967,968,978,979,979,969,968,579,589,980,980,970,579,970,980,981,981,971,970,971,981,982,982,972,971,972,982,983,983,973,972,973,983,984,984,974,973,974,984,985,985,975,974,975,985,986,986,976,975,976,986,987,987,977,976,977,987,988,988,978,977,978,988,989,989,979,978,589,599,990,990,980,589,980,990,991,991,981,980,981,991,992,992,982,981,982,992,993,993,983,982,983,993,994,994,984,983,984,994,995,995,985,984,985,995,996,996,986,985,986,996,997,997,987,986,987,997,998,998,988,987,988,998,999,999,989,988,599,609,1e3,1e3,990,599,990,1e3,1001,1001,991,990,991,1001,1002,1002,992,991,992,1002,1003,1003,993,992,993,1003,1004,1004,994,993,994,1004,1005,1005,995,994,995,1005,1006,1006,996,995,996,1006,1007,1007,997,996,997,1007,1008,1008,998,997,998,1008,1009,1009,999,998,609,619,1010,1010,1e3,609,1e3,1010,1011,1011,1001,1e3,1001,1011,1012,1012,1002,1001,1002,1012,1013,1013,1003,1002,1003,1013,1014,1014,1004,1003,1004,1014,1015,1015,1005,1004,1005,1015,1016,1016,1006,1005,1006,1016,1017,1017,1007,1006,1007,1017,1018,1018,1008,1007,1008,1018,1019,1019,1009,1008,619,629,1020,1020,1010,619,1010,1020,1021,1021,1011,1010,1011,1021,1022,1022,1012,1011,1012,1022,1023,1023,1013,1012,1013,1023,1024,1024,1014,1013,1014,1024,1025,1025,1015,1014,1015,1025,1026,1026,1016,1015,1016,1026,1027,1027,1017,1016,1017,1027,1028,1028,1018,1017,1018,1028,1029,1029,1019,1018,629,639,1030,1030,1020,629,1020,1030,1031,1031,1021,1020,1021,1031,1032,1032,1022,1021,1022,1032,1033,1033,1023,1022,1023,1033,1034,1034,1024,1023,1024,1034,1035,1035,1025,1024,1025,1035,1036,1036,1026,1025,1026,1036,1037,1037,1027,1026,1027,1037,1038,1038,1028,1027,1028,1038,1039,1039,1029,1028,639,649,1040,1040,1030,639,1030,1040,1041,1041,1031,1030,1031,1041,1042,1042,1032,1031,1032,1042,1043,1043,1033,1032,1033,1043,1044,1044,1034,1033,1034,1044,1045,1045,1035,1034,1035,1045,1046,1046,1036,1035,1036,1046,1047,1047,1037,1036,1037,1047,1048,1048,1038,1037,1038,1048,1049,1049,1039,1038,649,659,1050,1050,1040,649,1040,1050,1051,1051,1041,1040,1041,1051,1052,1052,1042,1041,1042,1052,1053,1053,1043,1042,1043,1053,1054,1054,1044,1043,1044,1054,1055,1055,1045,1044,1045,1055,1056,1056,1046,1045,1046,1056,1057,1057,1047,1046,1047,1057,1058,1058,1048,1047,1048,1058,1059,1059,1049,1048,659,669,1060,1060,1050,659,1050,1060,1061,1061,1051,1050,1051,1061,1062,1062,1052,1051,1052,1062,1063,1063,1053,1052,1053,1063,1064,1064,1054,1053,1054,1064,1065,1065,1055,1054,1055,1065,1066,1066,1056,1055,1056,1066,1067,1067,1057,1056,1057,1067,1068,1068,1058,1057,1058,1068,1069,1069,1059,1058,669,679,1070,1070,1060,669,1060,1070,1071,1071,1061,1060,1061,1071,1072,1072,1062,1061,1062,1072,1073,1073,1063,1062,1063,1073,1074,1074,1064,1063,1064,1074,1075,1075,1065,1064,1065,1075,1076,1076,1066,1065,1066,1076,1077,1077,1067,1066,1067,1077,1078,1078,1068,1067,1068,1078,1079,1079,1069,1068,679,689,1080,1080,1070,679,1070,1080,1081,1081,1071,1070,1071,1081,1082,1082,1072,1071,1072,1082,1083,1083,1073,1072,1073,1083,1084,1084,1074,1073,1074,1084,1085,1085,1075,1074,1075,1085,1086,1086,1076,1075,1076,1086,1087,1087,1077,1076,1077,1087,1088,1088,1078,1077,1078,1088,1089,1089,1079,1078,689,699,1090,1090,1080,689,1080,1090,1091,1091,1081,1080,1081,1091,1092,1092,1082,1081,1082,1092,1093,1093,1083,1082,1083,1093,1094,1094,1084,1083,1084,1094,1095,1095,1085,1084,1085,1095,1096,1096,1086,1085,1086,1096,1097,1097,1087,1086,1087,1097,1098,1098,1088,1087,1088,1098,1099,1099,1089,1088,699,709,1100,1100,1090,699,1090,1100,1101,1101,1091,1090,1091,1101,1102,1102,1092,1091,1092,1102,1103,1103,1093,1092,1093,1103,1104,1104,1094,1093,1094,1104,1105,1105,1095,1094,1095,1105,1106,1106,1096,1095,1096,1106,1107,1107,1097,1096,1097,1107,1108,1108,1098,1097,1098,1108,1109,1109,1099,1098,709,719,1110,1110,1100,709,1100,1110,1111,1111,1101,1100,1101,1111,1112,1112,1102,1101,1102,1112,1113,1113,1103,1102,1103,1113,1114,1114,1104,1103,1104,1114,1115,1115,1105,1104,1105,1115,1116,1116,1106,1105,1106,1116,1117,1117,1107,1106,1107,1117,1118,1118,1108,1107,1108,1118,1119,1119,1109,1108,719,729,1120,1120,1110,719,1110,1120,1121,1121,1111,1110,1111,1121,1122,1122,1112,1111,1112,1122,1123,1123,1113,1112,1113,1123,1124,1124,1114,1113,1114,1124,1125,1125,1115,1114,1115,1125,1126,1126,1116,1115,1116,1126,1127,1127,1117,1116,1117,1127,1128,1128,1118,1117,1118,1128,1129,1129,1119,1118,729,739,1130,1130,1120,729,1120,1130,1131,1131,1121,1120,1121,1131,1132,1132,1122,1121,1122,1132,1133,1133,1123,1122,1123,1133,1134,1134,1124,1123,1124,1134,1135,1135,1125,1124,1125,1135,1136,1136,1126,1125,1126,1136,1137,1137,1127,1126,1127,1137,1138,1138,1128,1127,1128,1138,1139,1139,1129,1128,739,749,1140,1140,1130,739,1130,1140,1141,1141,1131,1130,1131,1141,1142,1142,1132,1131,1132,1142,1143,1143,1133,1132,1133,1143,1144,1144,1134,1133,1134,1144,1145,1145,1135,1134,1135,1145,1146,1146,1136,1135,1136,1146,1147,1147,1137,1136,1137,1147,1148,1148,1138,1137,1138,1148,1149,1149,1139,1138,749,759,1150,1150,1140,749,1140,1150,1151,1151,1141,1140,1141,1151,1152,1152,1142,1141,1142,1152,1153,1153,1143,1142,1143,1153,1154,1154,1144,1143,1144,1154,1155,1155,1145,1144,1145,1155,1156,1156,1146,1145,1146,1156,1157,1157,1147,1146,1147,1157,1158,1158,1148,1147,1148,1158,1159,1159,1149,1148,759,769,1160,1160,1150,759,1150,1160,1161,1161,1151,1150,1151,1161,1162,1162,1152,1151,1152,1162,1163,1163,1153,1152,1153,1163,1164,1164,1154,1153,1154,1164,1165,1165,1155,1154,1155,1165,1166,1166,1156,1155,1156,1166,1167,1167,1157,1156,1157,1167,1168,1168,1158,1157,1158,1168,1169,1169,1159,1158,769,779,1170,1170,1160,769,1160,1170,1171,1171,1161,1160,1161,1171,1172,1172,1162,1161,1162,1172,1173,1173,1163,1162,1163,1173,1174,1174,1164,1163,1164,1174,1175,1175,1165,1164,1165,1175,1176,1176,1166,1165,1166,1176,1177,1177,1167,1166,1167,1177,1178,1178,1168,1167,1168,1178,1179,1179,1169,1168,779,789,1180,1180,1170,779,1170,1180,1181,1181,1171,1170,1171,1181,1182,1182,1172,1171,1172,1182,1183,1183,1173,1172,1173,1183,1184,1184,1174,1173,1174,1184,1185,1185,1175,1174,1175,1185,1186,1186,1176,1175,1176,1186,1187,1187,1177,1176,1177,1187,1188,1188,1178,1177,1178,1188,1189,1189,1179,1178,789,799,1190,1190,1180,789,1180,1190,1191,1191,1181,1180,1181,1191,1192,1192,1182,1181,1182,1192,1193,1193,1183,1182,1183,1193,1194,1194,1184,1183,1184,1194,1195,1195,1185,1184,1185,1195,1196,1196,1186,1185,1186,1196,1197,1197,1187,1186,1187,1197,1198,1198,1188,1187,1188,1198,1199,1199,1189,1188,799,809,1200,1200,1190,799,1190,1200,1201,1201,1191,1190,1191,1201,1202,1202,1192,1191,1192,1202,1203,1203,1193,1192,1193,1203,1204,1204,1194,1193,1194,1204,1205,1205,1195,1194,1195,1205,1206,1206,1196,1195,1196,1206,1207,1207,1197,1196,1197,1207,1208,1208,1198,1197,1198,1208,1209,1209,1199,1198,809,819,1210,1210,1200,809,1200,1210,1211,1211,1201,1200,1201,1211,1212,1212,1202,1201,1202,1212,1213,1213,1203,1202,1203,1213,1214,1214,1204,1203,1204,1214,1215,1215,1205,1204,1205,1215,1216,1216,1206,1205,1206,1216,1217,1217,1207,1206,1207,1217,1218,1218,1208,1207,1208,1218,1219,1219,1209,1208,819,829,1220,1220,1210,819,1210,1220,1221,1221,1211,1210,1211,1221,1222,1222,1212,1211,1212,1222,1223,1223,1213,1212,1213,1223,1224,1224,1214,1213,1214,1224,1225,1225,1215,1214,1215,1225,1226,1226,1216,1215,1216,1226,1227,1227,1217,1216,1217,1227,1228,1228,1218,1217,1218,1228,1229,1229,1219,1218,829,839,1230,1230,1220,829,1220,1230,1231,1231,1221,1220,1221,1231,1232,1232,1222,1221,1222,1232,1233,1233,1223,1222,1223,1233,1234,1234,1224,1223,1224,1234,1235,1235,1225,1224,1225,1235,1236,1236,1226,1225,1226,1236,1237,1237,1227,1226,1227,1237,1238,1238,1228,1227,1228,1238,1239,1239,1229,1228,839,459,841,841,1230,839,1230,841,843,843,1231,1230,1231,843,845,845,1232,1231,1232,845,847,847,1233,1232,1233,847,849,849,1234,1233,1234,849,851,851,1235,1234,1235,851,853,853,1236,1235,1236,853,855,855,1237,1236,1237,855,857,857,1238,1237,1238,857,859,859,1239,1238,859,858,1240,1240,1241,859,1241,1240,1242,1242,1243,1241,1243,1242,1244,1244,1245,1243,1245,1244,1246,1246,1247,1245,1247,1246,1248,1248,1249,1247,1249,1248,1250,1250,1251,1249,1251,1250,1252,1252,1253,1251,1253,1252,1254,1254,1255,1253,1255,1254,1256,1256,1257,1255,1257,1256,1258,858,869,1259,1259,1240,858,1240,1259,1260,1260,1242,1240,1242,1260,1261,1261,1244,1242,1244,1261,1262,1262,1246,1244,1246,1262,1263,1263,1248,1246,1248,1263,1264,1264,1250,1248,1250,1264,1265,1265,1252,1250,1252,1265,1266,1266,1254,1252,1254,1266,1267,1267,1256,1254,1256,1267,1258,869,879,1268,1268,1259,869,1259,1268,1269,1269,1260,1259,1260,1269,1270,1270,1261,1260,1261,1270,1271,1271,1262,1261,1262,1271,1272,1272,1263,1262,1263,1272,1273,1273,1264,1263,1264,1273,1274,1274,1265,1264,1265,1274,1275,1275,1266,1265,1266,1275,1276,1276,1267,1266,1267,1276,1258,879,889,1277,1277,1268,879,1268,1277,1278,1278,1269,1268,1269,1278,1279,1279,1270,1269,1270,1279,1280,1280,1271,1270,1271,1280,1281,1281,1272,1271,1272,1281,1282,1282,1273,1272,1273,1282,1283,1283,1274,1273,1274,1283,1284,1284,1275,1274,1275,1284,1285,1285,1276,1275,1276,1285,1258,889,899,1286,1286,1277,889,1277,1286,1287,1287,1278,1277,1278,1287,1288,1288,1279,1278,1279,1288,1289,1289,1280,1279,1280,1289,1290,1290,1281,1280,1281,1290,1291,1291,1282,1281,1282,1291,1292,1292,1283,1282,1283,1292,1293,1293,1284,1283,1284,1293,1294,1294,1285,1284,1285,1294,1258,899,909,1295,1295,1286,899,1286,1295,1296,1296,1287,1286,1287,1296,1297,1297,1288,1287,1288,1297,1298,1298,1289,1288,1289,1298,1299,1299,1290,1289,1290,1299,1300,1300,1291,1290,1291,1300,1301,1301,1292,1291,1292,1301,1302,1302,1293,1292,1293,1302,1303,1303,1294,1293,1294,1303,1258,909,919,1304,1304,1295,909,1295,1304,1305,1305,1296,1295,1296,1305,1306,1306,1297,1296,1297,1306,1307,1307,1298,1297,1298,1307,1308,1308,1299,1298,1299,1308,1309,1309,1300,1299,1300,1309,1310,1310,1301,1300,1301,1310,1311,1311,1302,1301,1302,1311,1312,1312,1303,1302,1303,1312,1258,919,929,1313,1313,1304,919,1304,1313,1314,1314,1305,1304,1305,1314,1315,1315,1306,1305,1306,1315,1316,1316,1307,1306,1307,1316,1317,1317,1308,1307,1308,1317,1318,1318,1309,1308,1309,1318,1319,1319,1310,1309,1310,1319,1320,1320,1311,1310,1311,1320,1321,1321,1312,1311,1312,1321,1258,929,939,1322,1322,1313,929,1313,1322,1323,1323,1314,1313,1314,1323,1324,1324,1315,1314,1315,1324,1325,1325,1316,1315,1316,1325,1326,1326,1317,1316,1317,1326,1327,1327,1318,1317,1318,1327,1328,1328,1319,1318,1319,1328,1329,1329,1320,1319,1320,1329,1330,1330,1321,1320,1321,1330,1258,939,949,1331,1331,1322,939,1322,1331,1332,1332,1323,1322,1323,1332,1333,1333,1324,1323,1324,1333,1334,1334,1325,1324,1325,1334,1335,1335,1326,1325,1326,1335,1336,1336,1327,1326,1327,1336,1337,1337,1328,1327,1328,1337,1338,1338,1329,1328,1329,1338,1339,1339,1330,1329,1330,1339,1258,949,959,1340,1340,1331,949,1331,1340,1341,1341,1332,1331,1332,1341,1342,1342,1333,1332,1333,1342,1343,1343,1334,1333,1334,1343,1344,1344,1335,1334,1335,1344,1345,1345,1336,1335,1336,1345,1346,1346,1337,1336,1337,1346,1347,1347,1338,1337,1338,1347,1348,1348,1339,1338,1339,1348,1258,959,969,1349,1349,1340,959,1340,1349,1350,1350,1341,1340,1341,1350,1351,1351,1342,1341,1342,1351,1352,1352,1343,1342,1343,1352,1353,1353,1344,1343,1344,1353,1354,1354,1345,1344,1345,1354,1355,1355,1346,1345,1346,1355,1356,1356,1347,1346,1347,1356,1357,1357,1348,1347,1348,1357,1258,969,979,1358,1358,1349,969,1349,1358,1359,1359,1350,1349,1350,1359,1360,1360,1351,1350,1351,1360,1361,1361,1352,1351,1352,1361,1362,1362,1353,1352,1353,1362,1363,1363,1354,1353,1354,1363,1364,1364,1355,1354,1355,1364,1365,1365,1356,1355,1356,1365,1366,1366,1357,1356,1357,1366,1258,979,989,1367,1367,1358,979,1358,1367,1368,1368,1359,1358,1359,1368,1369,1369,1360,1359,1360,1369,1370,1370,1361,1360,1361,1370,1371,1371,1362,1361,1362,1371,1372,1372,1363,1362,1363,1372,1373,1373,1364,1363,1364,1373,1374,1374,1365,1364,1365,1374,1375,1375,1366,1365,1366,1375,1258,989,999,1376,1376,1367,989,1367,1376,1377,1377,1368,1367,1368,1377,1378,1378,1369,1368,1369,1378,1379,1379,1370,1369,1370,1379,1380,1380,1371,1370,1371,1380,1381,1381,1372,1371,1372,1381,1382,1382,1373,1372,1373,1382,1383,1383,1374,1373,1374,1383,1384,1384,1375,1374,1375,1384,1258,999,1009,1385,1385,1376,999,1376,1385,1386,1386,1377,1376,1377,1386,1387,1387,1378,1377,1378,1387,1388,1388,1379,1378,1379,1388,1389,1389,1380,1379,1380,1389,1390,1390,1381,1380,1381,1390,1391,1391,1382,1381,1382,1391,1392,1392,1383,1382,1383,1392,1393,1393,1384,1383,1384,1393,1258,1009,1019,1394,1394,1385,1009,1385,1394,1395,1395,1386,1385,1386,1395,1396,1396,1387,1386,1387,1396,1397,1397,1388,1387,1388,1397,1398,1398,1389,1388,1389,1398,1399,1399,1390,1389,1390,1399,1400,1400,1391,1390,1391,1400,1401,1401,1392,1391,1392,1401,1402,1402,1393,1392,1393,1402,1258,1019,1029,1403,1403,1394,1019,1394,1403,1404,1404,1395,1394,1395,1404,1405,1405,1396,1395,1396,1405,1406,1406,1397,1396,1397,1406,1407,1407,1398,1397,1398,1407,1408,1408,1399,1398,1399,1408,1409,1409,1400,1399,1400,1409,1410,1410,1401,1400,1401,1410,1411,1411,1402,1401,1402,1411,1258,1029,1039,1412,1412,1403,1029,1403,1412,1413,1413,1404,1403,1404,1413,1414,1414,1405,1404,1405,1414,1415,1415,1406,1405,1406,1415,1416,1416,1407,1406,1407,1416,1417,1417,1408,1407,1408,1417,1418,1418,1409,1408,1409,1418,1419,1419,1410,1409,1410,1419,1420,1420,1411,1410,1411,1420,1258,1039,1049,1421,1421,1412,1039,1412,1421,1422,1422,1413,1412,1413,1422,1423,1423,1414,1413,1414,1423,1424,1424,1415,1414,1415,1424,1425,1425,1416,1415,1416,1425,1426,1426,1417,1416,1417,1426,1427,1427,1418,1417,1418,1427,1428,1428,1419,1418,1419,1428,1429,1429,1420,1419,1420,1429,1258,1049,1059,1430,1430,1421,1049,1421,1430,1431,1431,1422,1421,1422,1431,1432,1432,1423,1422,1423,1432,1433,1433,1424,1423,1424,1433,1434,1434,1425,1424,1425,1434,1435,1435,1426,1425,1426,1435,1436,1436,1427,1426,1427,1436,1437,1437,1428,1427,1428,1437,1438,1438,1429,1428,1429,1438,1258,1059,1069,1439,1439,1430,1059,1430,1439,1440,1440,1431,1430,1431,1440,1441,1441,1432,1431,1432,1441,1442,1442,1433,1432,1433,1442,1443,1443,1434,1433,1434,1443,1444,1444,1435,1434,1435,1444,1445,1445,1436,1435,1436,1445,1446,1446,1437,1436,1437,1446,1447,1447,1438,1437,1438,1447,1258,1069,1079,1448,1448,1439,1069,1439,1448,1449,1449,1440,1439,1440,1449,1450,1450,1441,1440,1441,1450,1451,1451,1442,1441,1442,1451,1452,1452,1443,1442,1443,1452,1453,1453,1444,1443,1444,1453,1454,1454,1445,1444,1445,1454,1455,1455,1446,1445,1446,1455,1456,1456,1447,1446,1447,1456,1258,1079,1089,1457,1457,1448,1079,1448,1457,1458,1458,1449,1448,1449,1458,1459,1459,1450,1449,1450,1459,1460,1460,1451,1450,1451,1460,1461,1461,1452,1451,1452,1461,1462,1462,1453,1452,1453,1462,1463,1463,1454,1453,1454,1463,1464,1464,1455,1454,1455,1464,1465,1465,1456,1455,1456,1465,1258,1089,1099,1466,1466,1457,1089,1457,1466,1467,1467,1458,1457,1458,1467,1468,1468,1459,1458,1459,1468,1469,1469,1460,1459,1460,1469,1470,1470,1461,1460,1461,1470,1471,1471,1462,1461,1462,1471,1472,1472,1463,1462,1463,1472,1473,1473,1464,1463,1464,1473,1474,1474,1465,1464,1465,1474,1258,1099,1109,1475,1475,1466,1099,1466,1475,1476,1476,1467,1466,1467,1476,1477,1477,1468,1467,1468,1477,1478,1478,1469,1468,1469,1478,1479,1479,1470,1469,1470,1479,1480,1480,1471,1470,1471,1480,1481,1481,1472,1471,1472,1481,1482,1482,1473,1472,1473,1482,1483,1483,1474,1473,1474,1483,1258,1109,1119,1484,1484,1475,1109,1475,1484,1485,1485,1476,1475,1476,1485,1486,1486,1477,1476,1477,1486,1487,1487,1478,1477,1478,1487,1488,1488,1479,1478,1479,1488,1489,1489,1480,1479,1480,1489,1490,1490,1481,1480,1481,1490,1491,1491,1482,1481,1482,1491,1492,1492,1483,1482,1483,1492,1258,1119,1129,1493,1493,1484,1119,1484,1493,1494,1494,1485,1484,1485,1494,1495,1495,1486,1485,1486,1495,1496,1496,1487,1486,1487,1496,1497,1497,1488,1487,1488,1497,1498,1498,1489,1488,1489,1498,1499,1499,1490,1489,1490,1499,1500,1500,1491,1490,1491,1500,1501,1501,1492,1491,1492,1501,1258,1129,1139,1502,1502,1493,1129,1493,1502,1503,1503,1494,1493,1494,1503,1504,1504,1495,1494,1495,1504,1505,1505,1496,1495,1496,1505,1506,1506,1497,1496,1497,1506,1507,1507,1498,1497,1498,1507,1508,1508,1499,1498,1499,1508,1509,1509,1500,1499,1500,1509,1510,1510,1501,1500,1501,1510,1258,1139,1149,1511,1511,1502,1139,1502,1511,1512,1512,1503,1502,1503,1512,1513,1513,1504,1503,1504,1513,1514,1514,1505,1504,1505,1514,1515,1515,1506,1505,1506,1515,1516,1516,1507,1506,1507,1516,1517,1517,1508,1507,1508,1517,1518,1518,1509,1508,1509,1518,1519,1519,1510,1509,1510,1519,1258,1149,1159,1520,1520,1511,1149,1511,1520,1521,1521,1512,1511,1512,1521,1522,1522,1513,1512,1513,1522,1523,1523,1514,1513,1514,1523,1524,1524,1515,1514,1515,1524,1525,1525,1516,1515,1516,1525,1526,1526,1517,1516,1517,1526,1527,1527,1518,1517,1518,1527,1528,1528,1519,1518,1519,1528,1258,1159,1169,1529,1529,1520,1159,1520,1529,1530,1530,1521,1520,1521,1530,1531,1531,1522,1521,1522,1531,1532,1532,1523,1522,1523,1532,1533,1533,1524,1523,1524,1533,1534,1534,1525,1524,1525,1534,1535,1535,1526,1525,1526,1535,1536,1536,1527,1526,1527,1536,1537,1537,1528,1527,1528,1537,1258,1169,1179,1538,1538,1529,1169,1529,1538,1539,1539,1530,1529,1530,1539,1540,1540,1531,1530,1531,1540,1541,1541,1532,1531,1532,1541,1542,1542,1533,1532,1533,1542,1543,1543,1534,1533,1534,1543,1544,1544,1535,1534,1535,1544,1545,1545,1536,1535,1536,1545,1546,1546,1537,1536,1537,1546,1258,1179,1189,1547,1547,1538,1179,1538,1547,1548,1548,1539,1538,1539,1548,1549,1549,1540,1539,1540,1549,1550,1550,1541,1540,1541,1550,1551,1551,1542,1541,1542,1551,1552,1552,1543,1542,1543,1552,1553,1553,1544,1543,1544,1553,1554,1554,1545,1544,1545,1554,1555,1555,1546,1545,1546,1555,1258,1189,1199,1556,1556,1547,1189,1547,1556,1557,1557,1548,1547,1548,1557,1558,1558,1549,1548,1549,1558,1559,1559,1550,1549,1550,1559,1560,1560,1551,1550,1551,1560,1561,1561,1552,1551,1552,1561,1562,1562,1553,1552,1553,1562,1563,1563,1554,1553,1554,1563,1564,1564,1555,1554,1555,1564,1258,1199,1209,1565,1565,1556,1199,1556,1565,1566,1566,1557,1556,1557,1566,1567,1567,1558,1557,1558,1567,1568,1568,1559,1558,1559,1568,1569,1569,1560,1559,1560,1569,1570,1570,1561,1560,1561,1570,1571,1571,1562,1561,1562,1571,1572,1572,1563,1562,1563,1572,1573,1573,1564,1563,1564,1573,1258,1209,1219,1574,1574,1565,1209,1565,1574,1575,1575,1566,1565,1566,1575,1576,1576,1567,1566,1567,1576,1577,1577,1568,1567,1568,1577,1578,1578,1569,1568,1569,1578,1579,1579,1570,1569,1570,1579,1580,1580,1571,1570,1571,1580,1581,1581,1572,1571,1572,1581,1582,1582,1573,1572,1573,1582,1258,1219,1229,1583,1583,1574,1219,1574,1583,1584,1584,1575,1574,1575,1584,1585,1585,1576,1575,1576,1585,1586,1586,1577,1576,1577,1586,1587,1587,1578,1577,1578,1587,1588,1588,1579,1578,1579,1588,1589,1589,1580,1579,1580,1589,1590,1590,1581,1580,1581,1590,1591,1591,1582,1581,1582,1591,1258,1229,1239,1592,1592,1583,1229,1583,1592,1593,1593,1584,1583,1584,1593,1594,1594,1585,1584,1585,1594,1595,1595,1586,1585,1586,1595,1596,1596,1587,1586,1587,1596,1597,1597,1588,1587,1588,1597,1598,1598,1589,1588,1589,1598,1599,1599,1590,1589,1590,1599,1600,1600,1591,1590,1591,1600,1258,1239,859,1241,1241,1592,1239,1592,1241,1243,1243,1593,1592,1593,1243,1245,1245,1594,1593,1594,1245,1247,1247,1595,1594,1595,1247,1249,1249,1596,1595,1596,1249,1251,1251,1597,1596,1597,1251,1253,1253,1598,1597,1598,1253,1255,1255,1599,1598,1599,1255,1257,1257,1600,1599,1600,1257,1258,1601,1602,1603,1603,1604,1601,1604,1603,1605,1605,1606,1604,1606,1605,1607,1607,1608,1606,1608,1607,1609,1609,1610,1608,1610,1609,1611,1611,1612,1610,1612,1611,1613,1613,1614,1612,1614,1613,1615,1615,1616,1614,1616,1615,1617,1617,1618,1616,1618,1617,1619,1619,1620,1618,1620,1619,1621,1621,1622,1620,1602,1623,1624,1624,1603,1602,1603,1624,1625,1625,1605,1603,1605,1625,1626,1626,1607,1605,1607,1626,1627,1627,1609,1607,1609,1627,1628,1628,1611,1609,1611,1628,1629,1629,1613,1611,1613,1629,1630,1630,1615,1613,1615,1630,1631,1631,1617,1615,1617,1631,1632,1632,1619,1617,1619,1632,1633,1633,1621,1619,1623,1634,1635,1635,1624,1623,1624,1635,1636,1636,1625,1624,1625,1636,1637,1637,1626,1625,1626,1637,1638,1638,1627,1626,1627,1638,1639,1639,1628,1627,1628,1639,1640,1640,1629,1628,1629,1640,1641,1641,1630,1629,1630,1641,1642,1642,1631,1630,1631,1642,1643,1643,1632,1631,1632,1643,1644,1644,1633,1632,1634,1645,1646,1646,1635,1634,1635,1646,1647,1647,1636,1635,1636,1647,1648,1648,1637,1636,1637,1648,1649,1649,1638,1637,1638,1649,1650,1650,1639,1638,1639,1650,1651,1651,1640,1639,1640,1651,1652,1652,1641,1640,1641,1652,1653,1653,1642,1641,1642,1653,1654,1654,1643,1642,1643,1654,1655,1655,1644,1643,1645,1656,1657,1657,1646,1645,1646,1657,1658,1658,1647,1646,1647,1658,1659,1659,1648,1647,1648,1659,1660,1660,1649,1648,1649,1660,1661,1661,1650,1649,1650,1661,1662,1662,1651,1650,1651,1662,1663,1663,1652,1651,1652,1663,1664,1664,1653,1652,1653,1664,1665,1665,1654,1653,1654,1665,1666,1666,1655,1654,1656,1667,1668,1668,1657,1656,1657,1668,1669,1669,1658,1657,1658,1669,1670,1670,1659,1658,1659,1670,1671,1671,1660,1659,1660,1671,1672,1672,1661,1660,1661,1672,1673,1673,1662,1661,1662,1673,1674,1674,1663,1662,1663,1674,1675,1675,1664,1663,1664,1675,1676,1676,1665,1664,1665,1676,1677,1677,1666,1665,1667,1678,1679,1679,1668,1667,1668,1679,1680,1680,1669,1668,1669,1680,1681,1681,1670,1669,1670,1681,1682,1682,1671,1670,1671,1682,1683,1683,1672,1671,1672,1683,1684,1684,1673,1672,1673,1684,1685,1685,1674,1673,1674,1685,1686,1686,1675,1674,1675,1686,1687,1687,1676,1675,1676,1687,1688,1688,1677,1676,1678,1689,1690,1690,1679,1678,1679,1690,1691,1691,1680,1679,1680,1691,1692,1692,1681,1680,1681,1692,1693,1693,1682,1681,1682,1693,1694,1694,1683,1682,1683,1694,1695,1695,1684,1683,1684,1695,1696,1696,1685,1684,1685,1696,1697,1697,1686,1685,1686,1697,1698,1698,1687,1686,1687,1698,1699,1699,1688,1687,1689,1700,1701,1701,1690,1689,1690,1701,1702,1702,1691,1690,1691,1702,1703,1703,1692,1691,1692,1703,1704,1704,1693,1692,1693,1704,1705,1705,1694,1693,1694,1705,1706,1706,1695,1694,1695,1706,1707,1707,1696,1695,1696,1707,1708,1708,1697,1696,1697,1708,1709,1709,1698,1697,1698,1709,1710,1710,1699,1698,1700,1711,1712,1712,1701,1700,1701,1712,1713,1713,1702,1701,1702,1713,1714,1714,1703,1702,1703,1714,1715,1715,1704,1703,1704,1715,1716,1716,1705,1704,1705,1716,1717,1717,1706,1705,1706,1717,1718,1718,1707,1706,1707,1718,1719,1719,1708,1707,1708,1719,1720,1720,1709,1708,1709,1720,1721,1721,1710,1709,1711,1722,1723,1723,1712,1711,1712,1723,1724,1724,1713,1712,1713,1724,1725,1725,1714,1713,1714,1725,1726,1726,1715,1714,1715,1726,1727,1727,1716,1715,1716,1727,1728,1728,1717,1716,1717,1728,1729,1729,1718,1717,1718,1729,1730,1730,1719,1718,1719,1730,1731,1731,1720,1719,1720,1731,1732,1732,1721,1720,1722,1733,1734,1734,1723,1722,1723,1734,1735,1735,1724,1723,1724,1735,1736,1736,1725,1724,1725,1736,1737,1737,1726,1725,1726,1737,1738,1738,1727,1726,1727,1738,1739,1739,1728,1727,1728,1739,1740,1740,1729,1728,1729,1740,1741,1741,1730,1729,1730,1741,1742,1742,1731,1730,1731,1742,1743,1743,1732,1731,1733,1744,1745,1745,1734,1733,1734,1745,1746,1746,1735,1734,1735,1746,1747,1747,1736,1735,1736,1747,1748,1748,1737,1736,1737,1748,1749,1749,1738,1737,1738,1749,1750,1750,1739,1738,1739,1750,1751,1751,1740,1739,1740,1751,1752,1752,1741,1740,1741,1752,1753,1753,1742,1741,1742,1753,1754,1754,1743,1742,1744,1755,1756,1756,1745,1744,1745,1756,1757,1757,1746,1745,1746,1757,1758,1758,1747,1746,1747,1758,1759,1759,1748,1747,1748,1759,1760,1760,1749,1748,1749,1760,1761,1761,1750,1749,1750,1761,1762,1762,1751,1750,1751,1762,1763,1763,1752,1751,1752,1763,1764,1764,1753,1752,1753,1764,1765,1765,1754,1753,1755,1766,1767,1767,1756,1755,1756,1767,1768,1768,1757,1756,1757,1768,1769,1769,1758,1757,1758,1769,1770,1770,1759,1758,1759,1770,1771,1771,1760,1759,1760,1771,1772,1772,1761,1760,1761,1772,1773,1773,1762,1761,1762,1773,1774,1774,1763,1762,1763,1774,1775,1775,1764,1763,1764,1775,1776,1776,1765,1764,1766,1777,1778,1778,1767,1766,1767,1778,1779,1779,1768,1767,1768,1779,1780,1780,1769,1768,1769,1780,1781,1781,1770,1769,1770,1781,1782,1782,1771,1770,1771,1782,1783,1783,1772,1771,1772,1783,1784,1784,1773,1772,1773,1784,1785,1785,1774,1773,1774,1785,1786,1786,1775,1774,1775,1786,1787,1787,1776,1775,1777,1788,1789,1789,1778,1777,1778,1789,1790,1790,1779,1778,1779,1790,1791,1791,1780,1779,1780,1791,1792,1792,1781,1780,1781,1792,1793,1793,1782,1781,1782,1793,1794,1794,1783,1782,1783,1794,1795,1795,1784,1783,1784,1795,1796,1796,1785,1784,1785,1796,1797,1797,1786,1785,1786,1797,1798,1798,1787,1786,1788,1799,1800,1800,1789,1788,1789,1800,1801,1801,1790,1789,1790,1801,1802,1802,1791,1790,1791,1802,1803,1803,1792,1791,1792,1803,1804,1804,1793,1792,1793,1804,1805,1805,1794,1793,1794,1805,1806,1806,1795,1794,1795,1806,1807,1807,1796,1795,1796,1807,1808,1808,1797,1796,1797,1808,1809,1809,1798,1797,1799,1810,1811,1811,1800,1799,1800,1811,1812,1812,1801,1800,1801,1812,1813,1813,1802,1801,1802,1813,1814,1814,1803,1802,1803,1814,1815,1815,1804,1803,1804,1815,1816,1816,1805,1804,1805,1816,1817,1817,1806,1805,1806,1817,1818,1818,1807,1806,1807,1818,1819,1819,1808,1807,1808,1819,1820,1820,1809,1808,1810,1601,1604,1604,1811,1810,1811,1604,1606,1606,1812,1811,1812,1606,1608,1608,1813,1812,1813,1608,1610,1610,1814,1813,1814,1610,1612,1612,1815,1814,1815,1612,1614,1614,1816,1815,1816,1614,1616,1616,1817,1816,1817,1616,1618,1618,1818,1817,1818,1618,1620,1620,1819,1818,1819,1620,1622,1622,1820,1819,1622,1621,1821,1821,1822,1622,1822,1821,1823,1823,1824,1822,1824,1823,1825,1825,1826,1824,1826,1825,1827,1827,1828,1826,1828,1827,1829,1829,1830,1828,1830,1829,1831,1831,1832,1830,1832,1831,1833,1833,1834,1832,1834,1833,1835,1835,1836,1834,1836,1835,1837,1837,1838,1836,1838,1837,1839,1839,649,1838,1621,1633,1840,1840,1821,1621,1821,1840,1841,1841,1823,1821,1823,1841,1842,1842,1825,1823,1825,1842,1843,1843,1827,1825,1827,1843,1844,1844,1829,1827,1829,1844,1845,1845,1831,1829,1831,1845,1846,1846,1833,1831,1833,1846,1847,1847,1835,1833,1835,1847,1848,1848,1837,1835,1837,1848,1849,1849,1839,1837,1633,1644,1850,1850,1840,1633,1840,1850,1851,1851,1841,1840,1841,1851,1852,1852,1842,1841,1842,1852,1853,1853,1843,1842,1843,1853,1854,1854,1844,1843,1844,1854,1855,1855,1845,1844,1845,1855,1856,1856,1846,1845,1846,1856,1857,1857,1847,1846,1847,1857,1858,1858,1848,1847,1848,1858,1859,1859,1849,1848,1644,1655,1860,1860,1850,1644,1850,1860,1861,1861,1851,1850,1851,1861,1862,1862,1852,1851,1852,1862,1863,1863,1853,1852,1853,1863,1864,1864,1854,1853,1854,1864,1865,1865,1855,1854,1855,1865,1866,1866,1856,1855,1856,1866,1867,1867,1857,1856,1857,1867,1868,1868,1858,1857,1858,1868,1869,1869,1859,1858,1655,1666,1870,1870,1860,1655,1860,1870,1871,1871,1861,1860,1861,1871,1872,1872,1862,1861,1862,1872,1873,1873,1863,1862,1863,1873,1874,1874,1864,1863,1864,1874,1875,1875,1865,1864,1865,1875,1876,1876,1866,1865,1866,1876,1877,1877,1867,1866,1867,1877,1878,1878,1868,1867,1868,1878,1879,1879,1869,1868,1666,1677,1880,1880,1870,1666,1870,1880,1881,1881,1871,1870,1871,1881,1882,1882,1872,1871,1872,1882,1883,1883,1873,1872,1873,1883,1884,1884,1874,1873,1874,1884,1885,1885,1875,1874,1875,1885,1886,1886,1876,1875,1876,1886,1887,1887,1877,1876,1877,1887,1888,1888,1878,1877,1878,1888,1889,1889,1879,1878,1677,1688,1890,1890,1880,1677,1880,1890,1891,1891,1881,1880,1881,1891,1892,1892,1882,1881,1882,1892,1893,1893,1883,1882,1883,1893,1894,1894,1884,1883,1884,1894,1895,1895,1885,1884,1885,1895,1896,1896,1886,1885,1886,1896,1897,1897,1887,1886,1887,1897,1898,1898,1888,1887,1888,1898,1899,1899,1889,1888,1688,1699,1900,1900,1890,1688,1890,1900,1901,1901,1891,1890,1891,1901,1902,1902,1892,1891,1892,1902,1903,1903,1893,1892,1893,1903,1904,1904,1894,1893,1894,1904,1905,1905,1895,1894,1895,1905,1906,1906,1896,1895,1896,1906,1907,1907,1897,1896,1897,1907,1908,1908,1898,1897,1898,1908,1909,1909,1899,1898,1699,1710,1910,1910,1900,1699,1900,1910,1911,1911,1901,1900,1901,1911,1912,1912,1902,1901,1902,1912,1913,1913,1903,1902,1903,1913,1914,1914,1904,1903,1904,1914,1915,1915,1905,1904,1905,1915,1916,1916,1906,1905,1906,1916,1917,1917,1907,1906,1907,1917,1918,1918,1908,1907,1908,1918,1919,1919,1909,1908,1710,1721,1920,1920,1910,1710,1910,1920,1921,1921,1911,1910,1911,1921,1922,1922,1912,1911,1912,1922,1923,1923,1913,1912,1913,1923,1924,1924,1914,1913,1914,1924,1925,1925,1915,1914,1915,1925,1926,1926,1916,1915,1916,1926,1927,1927,1917,1916,1917,1927,1928,1928,1918,1917,1918,1928,1929,1929,1919,1918,1721,1732,1930,1930,1920,1721,1920,1930,1931,1931,1921,1920,1921,1931,1932,1932,1922,1921,1922,1932,1933,1933,1923,1922,1923,1933,1934,1934,1924,1923,1924,1934,1935,1935,1925,1924,1925,1935,1936,1936,1926,1925,1926,1936,1937,1937,1927,1926,1927,1937,1938,1938,1928,1927,1928,1938,1939,1939,1929,1928,1732,1743,1940,1940,1930,1732,1930,1940,1941,1941,1931,1930,1931,1941,1942,1942,1932,1931,1932,1942,1943,1943,1933,1932,1933,1943,1944,1944,1934,1933,1934,1944,1945,1945,1935,1934,1935,1945,1946,1946,1936,1935,1936,1946,1947,1947,1937,1936,1937,1947,1948,1948,1938,1937,1938,1948,1949,1949,1939,1938,1743,1754,1950,1950,1940,1743,1940,1950,1951,1951,1941,1940,1941,1951,1952,1952,1942,1941,1942,1952,1953,1953,1943,1942,1943,1953,1954,1954,1944,1943,1944,1954,1955,1955,1945,1944,1945,1955,1956,1956,1946,1945,1946,1956,1957,1957,1947,1946,1947,1957,1958,1958,1948,1947,1948,1958,1959,1959,1949,1948,1754,1765,1960,1960,1950,1754,1950,1960,1961,1961,1951,1950,1951,1961,1962,1962,1952,1951,1952,1962,1963,1963,1953,1952,1953,1963,1964,1964,1954,1953,1954,1964,1965,1965,1955,1954,1955,1965,1966,1966,1956,1955,1956,1966,1967,1967,1957,1956,1957,1967,1968,1968,1958,1957,1958,1968,1969,1969,1959,1958,1765,1776,1970,1970,1960,1765,1960,1970,1971,1971,1961,1960,1961,1971,1972,1972,1962,1961,1962,1972,1973,1973,1963,1962,1963,1973,1974,1974,1964,1963,1964,1974,1975,1975,1965,1964,1965,1975,1976,1976,1966,1965,1966,1976,1977,1977,1967,1966,1967,1977,1978,1978,1968,1967,1968,1978,1979,1979,1969,1968,1776,1787,1980,1980,1970,1776,1970,1980,1981,1981,1971,1970,1971,1981,1982,1982,1972,1971,1972,1982,1983,1983,1973,1972,1973,1983,1984,1984,1974,1973,1974,1984,1985,1985,1975,1974,1975,1985,1986,1986,1976,1975,1976,1986,1987,1987,1977,1976,1977,1987,1988,1988,1978,1977,1978,1988,1989,1989,1979,1978,1787,1798,1990,1990,1980,1787,1980,1990,1991,1991,1981,1980,1981,1991,1992,1992,1982,1981,1982,1992,1993,1993,1983,1982,1983,1993,1994,1994,1984,1983,1984,1994,1995,1995,1985,1984,1985,1995,1996,1996,1986,1985,1986,1996,1997,1997,1987,1986,1987,1997,1998,1998,1988,1987,1988,1998,1999,1999,1989,1988,1798,1809,2e3,2e3,1990,1798,1990,2e3,2001,2001,1991,1990,1991,2001,2002,2002,1992,1991,1992,2002,2003,2003,1993,1992,1993,2003,2004,2004,1994,1993,1994,2004,2005,2005,1995,1994,1995,2005,2006,2006,1996,1995,1996,2006,2007,2007,1997,1996,1997,2007,2008,2008,1998,1997,1998,2008,2009,2009,1999,1998,1809,1820,2010,2010,2e3,1809,2e3,2010,2011,2011,2001,2ee3,3e3,2990,2989,2600,2610,3001,3001,2991,2600,2991,3001,3002,3002,2992,2991,2992,3002,3003,3003,2993,2992,2993,3003,3004,3004,2994,2993,2994,3004,3005,3005,2995,2994,2995,3005,3006,3006,2996,2995,2996,3006,3007,3007,2997,2996,2997,3007,3008,3008,2998,2997,2998,3008,3009,3009,2999,2998,2999,3009,3010,3010,3e3,2999,2610,2620,3011,3011,3001,2610,3001,3011,3012,3012,3002,3001,3002,3012,3013,3013,3003,3002,3003,3013,3014,3014,3004,3003,3004,3014,3015,3015,3005,3004,3005,3015,3016,3016,3006,3005,3006,3016,3017,3017,3007,3006,3007,3017,3018,3018,3008,3007,3008,3018,3019,3019,3009,3008,3009,3019,3020,3020,3010,3009,2620,2630,3021,3021,3011,2620,3011,3021,3022,3022,3012,3011,3012,3022,3023,3023,3013,3012,3013,3023,3024,3024,3014,3013,3014,3024,3025,3025,3015,3014,3015,3025,3026,3026,3016,3015,3016,3026,3027,3027,3017,3016,3017,3027,3028,3028,3018,3017,3018,3028,3029,3029,3019,3018,3019,3029,3030,3030,3020,3019,2630,2640,3031,3031,3021,2630,3021,3031,3032,3032,3022,3021,3022,3032,3033,3033,3023,3022,3023,3033,3034,3034,3024,3023,3024,3034,3035,3035,3025,3024,3025,3035,3036,3036,3026,3025,3026,3036,3037,3037,3027,3026,3027,3037,3038,3038,3028,3027,3028,3038,3039,3039,3029,3028,3029,3039,3040,3040,3030,3029,2640,2650,3041,3041,3031,2640,3031,3041,3042,3042,3032,3031,3032,3042,3043,3043,3033,3032,3033,3043,3044,3044,3034,3033,3034,3044,3045,3045,3035,3034,3035,3045,3046,3046,3036,3035,3036,3046,3047,3047,3037,3036,3037,3047,3048,3048,3038,3037,3038,3048,3049,3049,3039,3038,3039,3049,3050,3050,3040,3039,2650,2660,3051,3051,3041,2650,3041,3051,3052,3052,3042,3041,3042,3052,3053,3053,3043,3042,3043,3053,3054,3054,3044,3043,3044,3054,3055,3055,3045,3044,3045,3055,3056,3056,3046,3045,3046,3056,3057,3057,3047,3046,3047,3057,3058,3058,3048,3047,3048,3058,3059,3059,3049,3048,3049,3059,3060,3060,3050,3049,2660,2670,3061,3061,3051,2660,3051,3061,3062,3062,3052,3051,3052,3062,3063,3063,3053,3052,3053,3063,3064,3064,3054,3053,3054,3064,3065,3065,3055,3054,3055,3065,3066,3066,3056,3055,3056,3066,3067,3067,3057,3056,3057,3067,3068,3068,3058,3057,3058,3068,3069,3069,3059,3058,3059,3069,3070,3070,3060,3059,2670,2680,3071,3071,3061,2670,3061,3071,3072,3072,3062,3061,3062,3072,3073,3073,3063,3062,3063,3073,3074,3074,3064,3063,3064,3074,3075,3075,3065,3064,3065,3075,3076,3076,3066,3065,3066,3076,3077,3077,3067,3066,3067,3077,3078,3078,3068,3067,3068,3078,3079,3079,3069,3068,3069,3079,3080,3080,3070,3069,2680,2690,3081,3081,3071,2680,3071,3081,3082,3082,3072,3071,3072,3082,3083,3083,3073,3072,3073,3083,3084,3084,3074,3073,3074,3084,3085,3085,3075,3074,3075,3085,3086,3086,3076,3075,3076,3086,3087,3087,3077,3076,3077,3087,3088,3088,3078,3077,3078,3088,3089,3089,3079,3078,3079,3089,3090,3090,3080,3079,2690,2700,3091,3091,3081,2690,3081,3091,3092,3092,3082,3081,3082,3092,3093,3093,3083,3082,3083,3093,3094,3094,3084,3083,3084,3094,3095,3095,3085,3084,3085,3095,3096,3096,3086,3085,3086,3096,3097,3097,3087,3086,3087,3097,3098,3098,3088,3087,3088,3098,3099,3099,3089,3088,3089,3099,3100,3100,3090,3089,2700,2710,3101,3101,3091,2700,3091,3101,3102,3102,3092,3091,3092,3102,3103,3103,3093,3092,3093,3103,3104,3104,3094,3093,3094,3104,3105,3105,3095,3094,3095,3105,3106,3106,3096,3095,3096,3106,3107,3107,3097,3096,3097,3107,3108,3108,3098,3097,3098,3108,3109,3109,3099,3098,3099,3109,3110,3110,3100,3099,2710,2720,3111,3111,3101,2710,3101,3111,3112,3112,3102,3101,3102,3112,3113,3113,3103,3102,3103,3113,3114,3114,3104,3103,3104,3114,3115,3115,3105,3104,3105,3115,3116,3116,3106,3105,3106,3116,3117,3117,3107,3106,3107,3117,3118,3118,3108,3107,3108,3118,3119,3119,3109,3108,3109,3119,3120,3120,3110,3109,2720,2730,3121,3121,3111,2720,3111,3121,3122,3122,3112,3111,3112,3122,3123,3123,3113,3112,3113,3123,3124,3124,3114,3113,3114,3124,3125,3125,3115,3114,3115,3125,3126,3126,3116,3115,3116,3126,3127,3127,3117,3116,3117,3127,3128,3128,3118,3117,3118,3128,3129,3129,3119,3118,3119,3129,3130,3130,3120,3119,2730,2740,3131,3131,3121,2730,3121,3131,3132,3132,3122,3121,3122,3132,3133,3133,3123,3122,3123,3133,3134,3134,3124,3123,3124,3134,3135,3135,3125,3124,3125,3135,3136,3136,3126,3125,3126,3136,3137,3137,3127,3126,3127,3137,3138,3138,3128,3127,3128,3138,3139,3139,3129,3128,3129,3139,3140,3140,3130,3129,2740,2750,3141,3141,3131,2740,3131,3141,3142,3142,3132,3131,3132,3142,3143,3143,3133,3132,3133,3143,3144,3144,3134,3133,3134,3144,3145,3145,3135,3134,3135,3145,3146,3146,3136,3135,3136,3146,3147,3147,3137,3136,3137,3147,3148,3148,3138,3137,3138,3148,3149,3149,3139,3138,3139,3149,3150,3150,3140,3139,2750,2760,3151,3151,3141,2750,3141,3151,3152,3152,3142,3141,3142,3152,3153,3153,3143,3142,3143,3153,3154,3154,3144,3143,3144,3154,3155,3155,3145,3144,3145,3155,3156,3156,3146,3145,3146,3156,3157,3157,3147,3146,3147,3157,3158,3158,3148,3147,3148,3158,3159,3159,3149,3148,3149,3159,3160,3160,3150,3149,2760,2770,3161,3161,3151,2760,3151,3161,3162,3162,3152,3151,3152,3162,3163,3163,3153,3152,3153,3163,3164,3164,3154,3153,3154,3164,3165,3165,3155,3154,3155,3165,3166,3166,3156,3155,3156,3166,3167,3167,3157,3156,3157,3167,3168,3168,3158,3157,3158,3168,3169,3169,3159,3158,3159,3169,3170,3170,3160,3159,2770,2780,3171,3171,3161,2770,3161,3171,3172,3172,3162,3161,3162,3172,3173,3173,3163,3162,3163,3173,3174,3174,3164,3163,3164,3174,3175,3175,3165,3164,3165,3175,3176,3176,3166,3165,3166,3176,3177,3177,3167,3166,3167,3177,3178,3178,3168,3167,3168,3178,3179,3179,3169,3168,3169,3179,3180,3180,3170,3169,2780,2790,3181,3181,3171,2780,3171,3181,3182,3182,3172,3171,3172,3182,3183,3183,3173,3172,3173,3183,3184,3184,3174,3173,3174,3184,3185,3185,3175,3174,3175,3185,3186,3186,3176,3175,3176,3186,3187,3187,3177,3176,3177,3187,3188,3188,3178,3177,3178,3188,3189,3189,3179,3178,3179,3189,3190,3190,3180,3179,2790,2800,3191,3191,3181,2790,3181,3191,3192,3192,3182,3181,3182,3192,3193,3193,3183,3182,3183,3193,3194,3194,3184,3183,3184,3194,3195,3195,3185,3184,3185,3195,3196,3196,3186,3185,3186,3196,3197,3197,3187,3186,3187,3197,3198,3198,3188,3187,3188,3198,3199,3199,3189,3188,3189,3199,3200,3200,3190,3189,2800,2810,3201,3201,3191,2800,3191,3201,3202,3202,3192,3191,3192,3202,3203,3203,3193,3192,3193,3203,3204,3204,3194,3193,3194,3204,3205,3205,3195,3194,3195,3205,3206,3206,3196,3195,3196,3206,3207,3207,3197,3196,3197,3207,3208,3208,3198,3197,3198,3208,3209,3209,3199,3198,3199,3209,3210,3210,3200,3199,2810,2820,3211,3211,3201,2810,3201,3211,3212,3212,3202,3201,3202,3212,3213,3213,3203,3202,3203,3213,3214,3214,3204,3203,3204,3214,3215,3215,3205,3204,3205,3215,3216,3216,3206,3205,3206,3216,3217,3217,3207,3206,3207,3217,3218,3218,3208,3207,3208,3218,3219,3219,3209,3208,3209,3219,3220,3220,3210,3209,2820,2830,3221,3221,3211,2820,3211,3221,3222,3222,3212,3211,3212,3222,3223,3223,3213,3212,3213,3223,3224,3224,3214,3213,3214,3224,3225,3225,3215,3214,3215,3225,3226,3226,3216,3215,3216,3226,3227,3227,3217,3216,3217,3227,3228,3228,3218,3217,3218,3228,3229,3229,3219,3218,3219,3229,3230,3230,3220,3219,2830,2840,3231,3231,3221,2830,3221,3231,3232,3232,3222,3221,3222,3232,3233,3233,3223,3222,3223,3233,3234,3234,3224,3223,3224,3234,3235,3235,3225,3224,3225,3235,3236,3236,3226,3225,3226,3236,3237,3237,3227,3226,3227,3237,3238,3238,3228,3227,3228,3238,3239,3239,3229,3228,3229,3239,3240,3240,3230,3229,2840,2460,2842,2842,3231,2840,3231,2842,2844,2844,3232,3231,3232,2844,2846,2846,3233,3232,3233,2846,2848,2848,3234,3233,3234,2848,2850,2850,3235,3234,3235,2850,2852,2852,3236,3235,3236,2852,2854,2854,3237,3236,3237,2854,2856,2856,3238,3237,3238,2856,2858,2858,3239,3238,3239,2858,2860,2860,3240,3239]);let i=v.Z.generatorTangents2(_.getData(ht.Z.S_INDICES),_.getData(ht.Z.S_POSITIONS),_.getData(ht.Z.S_UV0),_.getData(ht.Z.S_NORMALS));_.setData(ht.Z.S_TANGENTS,i),this.setMesh(_),this.updateBound()}}class me extends e.Z{static Alignment={Screen:1,Camera:2,AxialY:3,AxialZ:4};constructor(t,e){super(t,e),t instanceof o.Z||i.Z.error("owner必须是Geometry或其子类!"),this._m_Orient=new M.Z,this._m_Look=new m.Z,this._m_Left=new m.Z,this._m_Alignment=me.Alignment.Screen,this._m_TempQ=new R.Z,this._m_TempQ2=new R.Z,this._m_TempVec3_1=new m.Z,this._m_TempVec3_2=new m.Z,this._m_AlignmentCamera=this._m_Scene.getComponent("mainCamera"),this._m_Scene.on("render",(t=>{this._doUpdate()}))}setAlignmentCamera(t){this._m_AlignmentCamera=t}getAlignmentCamera(){return this._m_AlignmentCamera}setAlignment(t){this._m_Alignment=t}getAlignment(){return this._m_Alignment}_update(){this._rotateBillboard()}_rotateBillboard(){switch(this._m_Alignment){case me.Alignment.Screen:this._rotateScreenAligned();break;case me.Alignment.Camera:break;case me.Alignment.AxialY:this._rotateAxial(m.Z.S_UNIT_AXIS_Y);break;case me.Alignment.AxialZ:this._rotateAxial(m.Z.S_UNIT_AXIS_Z)}}_rotateScreenAligned(){this._m_Look.setTo(this._m_AlignmentCamera.getDir()).negateLocal(),this._m_Look.cross(this._m_AlignmentCamera.getUp(),this._m_Left),this._m_Left.negateLocal(),this._m_Orient.fromAxis(this._m_Left,this._m_AlignmentCamera.getUp(),this._m_Look),this._m_TempQ.fromMat44(this._m_Orient);let t=this._m_Owner.getParent();t&&(M.Z.decomposeMat4(t.getWorldMatrix(),this._m_TempVec3_1,this._m_TempQ2,this._m_TempVec3_2),this._m_TempQ=this._m_TempQ2.inverse().mult(this._m_TempQ)),this._m_Owner.setLocalRotation(this._m_TempQ)}_rotateAxial(t){M.Z.decomposeMat4(this._m_Owner.getWorldMatrix(),this._m_TempVec3_1,this._m_TempQ2,this._m_TempVec3_2),this._m_Look.setTo(this._m_AlignmentCamera.getEye()).sub(this._m_TempVec3_1);let e=this._m_Owner.getParent();if(e){M.Z.decomposeMat4(e.getWorldMatrix(),this._m_TempVec3_1,this._m_TempQ2,this._m_TempVec3_2),this._m_TempQ2.multVec3(this._m_Look,this._m_Left),this._m_Left._m_X*=1/this._m_TempVec3_2._m_X,this._m_Left._m_Y*=1/this._m_TempVec3_2._m_Y,this._m_Left._m_Z*=1/this._m_TempVec3_2._m_Z;let _=this._m_Left._m_X*this._m_Left._m_X+this._m_Left._m_Z*this._m_Left._m_Z;if(_<1.1920928955078125e-7)return;let i=1/Math.sqrt(_);1==t._m_Y?(this._m_Left._m_X*=i,this._m_Left._m_Y=0,this._m_Left._m_Z*=i,this._m_Orient.setRC(0,0,this._m_Left._m_Z),this._m_Orient.setRC(0,1,0),this._m_Orient.setRC(0,2,-this._m_Left._m_X),this._m_Orient.setRC(1,0,0),this._m_Orient.setRC(1,1,1),this._m_Orient.setRC(1,2,0),this._m_Orient.setRC(2,0,this._m_Left._m_X),this._m_Orient.setRC(2,1,0),this._m_Orient.setRC(2,2,this._m_Left._m_Z)):1==t._m_Z&&(this._m_Left._m_X*=i,this._m_Left._m_Y*=i,this._m_Left._m_Z=0,this._m_Orient.setRC(0,0,this._m_Left._m_Y),this._m_Orient.setRC(0,1,-this._m_Left._m_X),this._m_Orient.setRC(0,2,0),this._m_Orient.setRC(1,0,-this._m_Left._m_Y),this._m_Orient.setRC(1,1,this._m_Left._m_X),this._m_Orient.setRC(1,2,0),this._m_Orient.setRC(2,0,0),this._m_Orient.setRC(2,1,0),this._m_Orient.setRC(2,2,1)),this._m_TempQ.fromMat44(this._m_Orient),this._m_Owner.setLocalRotation(this._m_TempQ)}}}const le={Scene:S,Bone:p,AnimationProcessor:C,AnimationAction:T,ActionClip:E,SkinGeometry:A,Skeleton:L,Joint:w,TrackBinding:F,TrackMixer:b,AnimKeyframe:O,AnimKeyframeEnum:y,QuaternionKeyframe:B,Vector3Keyframe:Z,Vector4Keyframe:class extends O{constructor(t,e,_,i,n){super(t),this._m_Value=new N.Z(e,_,i,n)}setInterpolationMode(t){super.setInterpolationMode(t),t==O.S_LINEAR&&(this.interpolation=N.Z.inter)}},Canvas:n,Filter:V.Z,CameraIps:G,FirstPersonController:W,Input:U,SceneBrowsingController:H,DirectionalLight:X.Z,GIProbe:d,Light:r.Z,PointLight:J,Probe:l,RefProbe:class extends l{getType(){return"RefProbe"}getTypeId(){return 5}constructor(t,e){super(t,e)}},SpotLight:$,Material:tt.Z,MaterialDef:et.Z,SubPass:_t.Z,SubShader:it.Z,SubShaderDef:nt.Z,SubShaderSource:class{constructor(t){this._m_ShaderSource=null,this._m_ShaderSource=new P.Z,this._m_ShaderSource.set(P.Z.VERTEX_SHADER,t.getVsSrc()),this._m_ShaderSource.set(P.Z.FRAGMENT_SHADER,t.getFsSrc())}getShaderSource(){return this._m_ShaderSource}},Technology:st.Z,TechnologyDef:at.Z,AABBBoundingBox:rt.Z,BoundingSphere:c,BoundingVolume:u.Z,Matrix44:M.Z,MoreMath:I.Z,Plane:f.Z,Quaternion:R.Z,Vector2:ot.Z,Vector3:m.Z,Vector4:N.Z,Box:mt,Cylinder:re,Torus:oe,GroupPlane:lt,Grid:ae,Sphere:ut,Teapot:he,SkyBox:ct,FramePicture:gt.Z,Geometry:D.Z,Node:o.Z,Picture:h.Z,LodControl:dt,OctCullingControl:Ct,OctNode:St,Base:Tt.Z,Clustered:Dt,Deferred:Et.Z,Forward:Pt.Z,ForwardPlus:Mt,TileDeferred:xt.Z,DefaultRenderProgram:At.Z,MultiPassIBLLightingRenderProgram:Lt.Z,MultiPassLightingRenderProgram:Rt.Z,SinglePassIBLLightingRenderProgram:It.Z,SinglePassLightingRenderProgram:vt.Z,TilePassIBLLightingRenderProgram:wt.Z,TilePassLightingRenderProgram:Ft.Z,IDrawable:class{constructor(){}isDrawable(){}isFramePicture(){}isOpaque(){}isTranslucent(){}isTransparent(){}draw(t){}},Internal:ft.Z,Render:_.Z,RenderQueue:bt.Z,Camera:s.Z,BasicShadowProcess:Y.Z,DirectionalLightShadowProcess:Ot.Z,PointLightShadowProcess:q,Shadow:K.Z,SplitOccluders:Zt.Z,SpotLightShadowProcess:Q,AssetLoader:Bt.Z,Events:yt.Z,Log:i.Z,MeshFactor:pt,ProbeTools:Ut,Queue:a,TempVars:x.Z,TextImage:class{_m_TextureCanvas;_m_Context;_m_Pixelsize;_m_Width;_m_Height;_m_BackgroundColor="#a0d7ff";_m_TextColor="black";_m_AlignLeftOffset=.5;_m_AlignTopOffset=.7;_m_CurLabel=null;constructor(t,e,_,i,n){this._m_Pixelsize=i||60,this._m_BackgroundColor=n||this._m_BackgroundColor,this._m_Width=t,this._m_Height=e,this._m_TextureCanvas=document.createElement("canvas"),this._m_TextureCanvas.width=t,this._m_TextureCanvas.height=e,this._m_TextureCanvas.style.width=t+"px",this._m_TextureCanvas.style.height=e+"px",this._m_TextureCanvas.style.padding="0",this._m_TextureCanvas.style.margin="0",this._m_TextureCanvas.style.top="0",this._m_TextureCanvas.style.background=this._m_BackgroundColor,this._m_TextureCanvas.style.position="absolute",this._m_TextureCanvas.style.opacity="1.0",this._m_TextureCanvas.style.visibility="hidden",this._m_TextureCanvas.style["z-index"]=1,document.getElementsByTagName("body")[0].appendChild(this._m_TextureCanvas),this._m_Context=this._m_TextureCanvas.getContext("2d"),this._m_Context.translate(this._m_Width,this._m_Height),this._m_Context.scale(-1,-1),this.setText(_)}getImage(){return this._m_TextureCanvas}setPixelSize(t){this._m_Pixelsize=t,this.setText(this._m_CurLabel)}setBackgroundColor(t){this._m_BackgroundColor=t,this.setText(this._m_CurLabel)}setText(t){this._m_CurLabel=t,this._m_Context.fillStyle=this._m_BackgroundColor,this._m_Context.fillRect(0,0,this._m_Width,this._m_Height),this._m_Context.fillStyle=this._m_TextColor,this._m_Context.font=this._m_Pixelsize+"px sans-serif",this._m_Context.textAlign="center";let e=0+this._m_Width*this._m_AlignLeftOffset,_=0+this._m_Height*this._m_AlignTopOffset;this._m_Context.fillText(t,e,_,this._m_Width)}setTextColor(t){this._m_TextColor=t,this.setText(this._m_CurLabel)}setAlign(t,e){this._m_AlignLeftOffset=t,this._m_AlignTopOffset=e,this.setText(this._m_CurLabel)}},Tools:v.Z,BoolVars:Wt.Z,FloatVars:Vt.Z,Texture2DTargetVars:Ht.Z,Texture2DVars:Xt.Z,TextureCubeVars:j,Vars:k.Z,Vec2Vars:Yt.Z,Vec4Vars:kt,ArrayBuf:zt.Z,Buffer:jt.l,FrameBuffer:Nt.Z,FrameContext:Kt.Z,Mesh:ht.Z,RenderState:qt.Z,Shader:Jt.Z,ShaderProgram:Qt.Z,ShaderSource:P.Z,SizeOf:$t.Z,Texture:te.Z,UniformBuffer:g.Z,UniformBufferI:z.Z,Component:e.Z,BillboardControl:me,Globals:ee.Z,RenderEngine:class{constructor(){this._m_Scenes=[],this._m_SceneIds={},this._m_Stop=!1}addScene(t){this._m_SceneIds[t.id]||(this._m_SceneIds[t.id]=t,this._m_Scenes.push(t))}removeScene(t){this._m_SceneIds[t.id]&&(this._m_SceneIds[t.id]=null,this._m_Scenes.remove(t))}launch(){this._m_Stop=!1;let t=this,e=Date.now(),_=()=>{let i=Date.now(),n=.001*(i-e);e=i,this._m_Scenes.forEach((t=>{t.update(n),t.render(n)})),t._m_Stop||requestAnimationFrame(_)};requestAnimationFrame(_)}close(){this._m_Stop=!0}},GLTFLoader:_e,OBJLoader:ie,RadianceLoader:ne.Z,hdrpng:se.Z}})(),__webpack_exports__=__webpack_exports__.default,__webpack_exports__})()}));