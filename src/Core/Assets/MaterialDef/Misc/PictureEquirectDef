// 渲染等距图
Def PictureEquirectDef{
    Params{
        vec4 color;
        sampler2D colorMap;
        float alphaDiscard;
        vec3 sphData[9];
    }
    SubTechnology DefaultPass{
        Vars{
            vec2 uv0;
        }
        Vs_Shader{
            void main(){
                Context.OutPosition = Context.ModelMatrix * vec4(Context.InPosition, 1.0f);
                uv0 = Context.InUv0;
            }
        }
        Fs_Shader{
            #define PI 3.14159265358979323846264
            vec3 Decode( vec2 f )
            {
                vec2 ang = f * 2.0f - 1.0f;

                vec2 scth;
                scth.x = sin(ang.x * PI);
                scth.y = cos(ang.y * PI);
                vec2 scphi = vec2( sqrt( 1.0f - ang.y * ang.y ), ang.y );

                vec3 n;
                n.x = scth.y * scphi.x;
                n.y = scth.x * scphi.x;
                n.z = scphi.y;
                return n;
            }
            vec3 sphericalHarmonics( const in vec3 normal, const vec3 sph[9] ){
                float x = normal.x;
                float y = normal.y;
                float z = normal.z;

                vec3 result = (
                    sph[0] +

                    sph[1] * y +
                    sph[2] * z +
                    sph[3] * x +

                    sph[4] * y * x +
                    sph[5] * y * z +
                    sph[6] * (3.0f * z * z - 1.0f) +
                    sph[7] * (z * x) +
                    sph[8] * (x*x - y*y)
                );

                return max(result, vec3(0.0f));
            }
            void main(){
                Context.OutColor = vec4(1.0f);
                // 使用自定义颜色输出
                #ifdef Params.color
                    Context.OutColor *= Params.color;
                #endif
                // 使用纹理
                #ifdef Params.colorMap
                    Context.OutColor *= texture(Params.colorMap, uv0);
                    #ifdef Params.alphaDiscard
                        if(Context.OutColor.a < Params.alphaDiscard){
                            discard;
                        }
                    #endif
                #endif
                // 使用球谐系数
                #ifdef Params.sphData
                    Context.OutColor *= vec4(sphericalHarmonics(Decode(uv0), Params.sphData), 1.0f);
                    //Context.OutColor *= vec4(vec3(1, 0, 0), 1.0f);
                #endif
            }
        }
    }
    Technology{
        Sub_Pass{
            Pass DefaultPass{
            }
        }
    }
}
