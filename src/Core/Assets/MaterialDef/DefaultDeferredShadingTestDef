// 测试默认延迟渲染路径
Def DefaultDeferredShadingTestDef{
    Params{
        vec4 color;
    }
    SubTechnology GreenColorPass{
        Vars{
            vec4 fragPos;
        }
        Vs_Shader{
            void main(){
                //Context.OutPosition = Context.ProjectViewMatrix * Context.ModelMatrix * vec4(Context.InPosition, 1.0f);
                Context.OutPosition = Context.ProjectMatrix * Context.ViewMatrix * Context.ModelMatrix * vec4(Context.InPosition, 1.0f);
                //fragPos = Context.OutPosition.xyz;
            }
        }
        Fs_Shader{
            void main(){
                Context.OutColor = vec4(0.0f, 1.0f, 0.0f, 1.0f);
            }
        }
    }
    SubTechnology GBufferPass{
        Vars{
            vec3 fragPos;
        }
        Vs_Shader{
            void main(){
                vec4 worldPos = Context.ModelMatrix * vec4(Context.InPosition, 1.0f);
                Context.OutPosition = Context.ProjectViewMatrix * worldPos;
                //Context.OutPosition = Context.ProjectMatrix * Context.ViewMatrix * Context.ModelMatrix * vec4(Context.InPosition, 1.0f);
                fragPos = worldPos.xyz;
            }
        }
        Fs_Shader{
            void main(){
                Context.OutGBuffer0.xyz = fragPos;
                Context.OutGBuffer1 = vec4(1.0f, 0.2f, 0.2f, 1.0);
                Context.OutGBuffer2.rgb = vec3(1.0f, 1.0f, 1.0f);
                Context.OutGBuffer2.a = 1.0f;
            }
        }
    }
    SubTechnology DeferredShadingPass{
        Vars{
            vec4 wordPosition;
            vec2 uv0;
            mat4 pvInverse;
        }
        Vs_Shader{
            void main(){
                Context.OutPosition = vec4(Context.InPosition, 1.0f);
                wordPosition = Context.OutPosition;
                uv0 = Context.InUv0;
                pvInverse = inverse(Context.ProjectViewMatrix);
            }
        }
        Fs_Shader{
            vec3 getPosition(in float depth, in vec2 newTexCoord){

                vec4 pos;
                pos.xy = (newTexCoord * vec2(2.0)) - vec2(1.0);
                pos.z  = depth * 2.0 - 1.0;
                pos.w  = 1.0;
                pos    = pvInverse * pos;
                pos.xyz /= pos.w;
                return pos.xyz;
            }
            void main(){
                vec3 pos = texture(Context.InGBuffer0, uv0).rgb;
                vec3 pos2 = getPosition(texture(Context.InGDepth, uv0).r, uv0);
                Context.OutColor = vec4(pos2, 1.0f);
                //Context.OutColor = vec4(gl_FragDepth, gl_FragDepth, gl_FragDepth, 1.0f);
                //Context.OutColor = vec4(vec3(1.0f, 0, 0), 1.0f);
                //Context.OutColor = texture(Context.InGAlbedoSpec, uv0).rgba;
                //Context.OutColor = vec4(1.0f, 0.0f, 0.0f, 1.0f);
            }
        }
    }
    Technology{
        Sub_Pass{
            Pass GreenColorPass{
            }
        }
    }
    Technology TestDeferredShading{
        Sub_Pass DeferredShading{
            Pass GBufferPass{
            }
            Pass DeferredShadingPass{
            }
        }
    }
}
