#version 300 es
#define diffuseColor diffuseColor
#define shininess shininess
#define normalMap normalMap
#define diffuseMap diffuseMap

precision mediump float;

out vec4 _outColor;
uniform vec3 _ambientLightColor;
uniform int _curLightCount;
uniform vec4 _wLightData[12];
layout (std140) uniform VIEW
{
vec3 _cameraPosition;
};

in vec2 wUv0;
in vec3 wNormal;
in vec4 wTangent;
in vec3 wPosition;

uniform vec4 diffuseColor;
uniform sampler2D diffuseMap;
uniform sampler2D normalMap;
uniform float shininess;
vec4 getDiffuseColor(){
vec4 _diffuseColor = vec4(1.0f);
#ifdef diffuseColor
_diffuseColor = diffuseColor;
#endif
#ifdef diffuseMap
_diffuseColor = _diffuseColor * texture(diffuseMap, wUv0);
#endif
return _diffuseColor;
}
vec3 getNormal(){
vec3 normal = normalize( wNormal );
#ifdef normalMap
vec3 normalHeight = texture(normalMap, wUv0).xyz;
vec3 tangent = normalize(wTangent.xyz);
mat3 tbnMat = mat3(tangent, wTangent.w * cross(normal, tangent), normal);
normal = normalize(tbnMat * ( normalHeight * 2.0f - 1.0f ));
#endif
return normal;
}
float getShininess(){
#ifdef shininess
return shininess;
#else
return 32.0f;
#endif
}
void ComputeLightDir(in vec3 worldPos, in float lightType, in vec4 position, out vec4 lightDir, out vec3 lightVec){
float posLight = step(0.5f, lightType);

lightVec = position.xyz * sign(posLight - 0.5f) - (worldPos * posLight);
float dist = length(lightVec);


lightDir.w = (1.0f - position.w * dist) / (1.0f + position.w * dist * dist);
lightDir.w = clamp(lightDir.w, 1.0f - posLight, 1.0f);

lightDir.xyz = lightVec / vec3(dist);
}
void diffuseLighting(){
vec4 lightColor;
vec4 lightData1;
vec4 lightDir = vec4(0.0f);
vec3 lightVec = vec3(0.0f);
float diffuseBRDF = 0.0f;
vec3 viewDir = normalize(_cameraPosition.xyz - wPosition.xyz);
vec4 _diffuseColor = getDiffuseColor();
vec3 normal = getNormal();
float _shininess = getShininess();

_outColor.rgb = _diffuseColor.rgb * _ambientLightColor;
for( int i = 0;i < _curLightCount;i+=3 ){
lightColor = _wLightData[i];
lightData1 = _wLightData[i + 1];
ComputeLightDir(wPosition, lightColor.w, lightData1, lightDir, lightVec);

float ndotl = max(0.0f, dot(normal, lightDir));
float ndotv = max(0.0f, dot(normal, viewDir));
diffuseBRDF = ndotl * pow(max(ndotl * ndotv, 0.1f), -1.0f) * 0.5f;

_outColor.rgb += lightColor.rgb * ( _diffuseColor.rgb * vec3( diffuseBRDF ));
}
_outColor.a = _diffuseColor.a;
}
void main(){
diffuseLighting();
}
