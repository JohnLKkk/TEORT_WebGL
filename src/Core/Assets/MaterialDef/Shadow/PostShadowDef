// PostShadowDef
Def PostShadowDef{
    Params{
        // ShadowInfo
        float shadowIntensity;
        int filterMode;
        bool hardwareShadow;
        bool backfaceShadows;
        float pcfEdge;
        vec2 fadeInfo;
    }
    SubTechnology PostShadowPass{
        Vars{
            vec2 wUv0;
            mat4 pvInverse;
            vec4 pvRow2;
        }
        Vs_Shader{
            void main(){
                Context.OutPosition = vec4(Context.InPosition, 1.0f);
                pvInverse = inverse(Context.ProjectViewMatrix);
                // glsl是列矩阵,这里我获取第二行(只需要变换得到z即可测试PSSM)
                pvRow2 = vec4(Context.ProjectViewMatrix[0][2], Context.ProjectViewMatrix[1][2], Context.ProjectViewMatrix[2][2], Context.ProjectViewMatrix[3][2]);
                wUv0 = Context.InUv0;
            }
        }
        Fs_Shader{
            //#extension GL_ARB_gpu_shader5 : enable
            float shadowBorderScale = 1.0f;
            #ifdef HARDWARE_SHADOWS
                #define SHADOWMAP sampler2DShadow
                #define SHADOWCOMPAREOFFSET(tex,coord,offset) textureProjOffset(tex, coord, offset)
                #define SHADOWCOMPARE(tex,coord) textureProj(tex, coord)
                #define SHADOWGATHER(tex,coord) textureGather(tex, coord.xy, coord.z)
            #else
                #define SHADOWMAP sampler2D
                #define SHADOWCOMPAREOFFSET(tex,coord,offset) step(coord.z, textureProjOffset(tex, coord, offset).r)
                #define SHADOWCOMPARE(tex,coord) step(coord.z, textureProj(tex, coord).r)
                #define SHADOWGATHER(tex,coord) step(coord.z, textureGather(tex, coord.xy))
            #endif

            #define FILTER_MODE 1

            #if FILTER_MODE == 10
                #define GETSHADOW Shadow_Nearest
                #define KERNEL 1.0
            #elif FILTER_MODE == 1
                #ifdef HARDWARE_SHADOWS
                    #define GETSHADOW Shadow_Nearest
                #else
                    #define GETSHADOW Shadow_DoBilinear_2x2
                #endif
                #define KERNEL 1.0
            #endif

            #if (FILTER_MODE == 2)
                #define GETSHADOW Shadow_DoDither_2x2
                #define KERNEL 1.0
            #elif FILTER_MODE == 3
                #define GETSHADOW Shadow_DoPCF
                #define KERNEL 4.0
            #elif FILTER_MODE == 4
                #define GETSHADOW Shadow_DoPCFPoisson
                #define KERNEL 4.0
            #elif FILTER_MODE == 5
                #define GETSHADOW Shadow_DoPCF
                #define KERNEL 8.0
            #endif

            float Shadow_DoShadowCompare(in SHADOWMAP tex,in vec4 projCoord){
                return SHADOWCOMPARE(tex, projCoord);
            }

            float Shadow_BorderCheck(in vec2 coord){
                // 最快的“hack”方法（使用 4-5 条指令）
                vec4 t = vec4(coord.xy, 0.0f, 1.0f);
                t = step(t.wwxy, t.xyzz);
                return dot(t,t);
            }

            float Shadow_Nearest(in SHADOWMAP tex,in vec4 projCoord){
                float border = Shadow_BorderCheck(projCoord.xy);
                if (border > 0.0f){
                    return 1.0f;
                }
                return SHADOWCOMPARE(tex, projCoord);
            }

            //----------------------------------ShadowFilter--------------------------------------
            float Shadow_DoShadowCompareOffset(in SHADOWMAP tex,in vec4 projCoord,in vec2 offset){
                vec4 coord = vec4(projCoord.xy + offset.xy * Context.SMapSizeInverse * shadowBorderScale, projCoord.zw);
                return SHADOWCOMPARE(tex, coord);
            }


            float Shadow_DoDither_2x2(in SHADOWMAP tex, in vec4 projCoord){
                float border = Shadow_BorderCheck(projCoord.xy);
                if (border > 0.0f)
                    return 1.0f;

                float shadow = 0.0f;
                vec2 o = vec2(ivec2(mod(floor(gl_FragCoord.xy), 2.0f))); //Strict type checking in GLSL ES
                shadow += Shadow_DoShadowCompareOffset(tex, projCoord, (vec2(-1.5f, 1.5f)+o));
                shadow += Shadow_DoShadowCompareOffset(tex, projCoord, (vec2( 0.5f, 1.5f)+o));
                shadow += Shadow_DoShadowCompareOffset(tex, projCoord, (vec2(-1.5f, -0.5f)+o));
                shadow += Shadow_DoShadowCompareOffset(tex, projCoord, (vec2( 0.5f, -0.5f)+o));
                shadow *= 0.25f;
                return shadow;
            }

            float Shadow_DoBilinear_2x2(in SHADOWMAP tex, in vec4 projCoord){
                float border = Shadow_BorderCheck(projCoord.xy);
                if (border > 0.0f){
                    return 1.0f;
                }

                vec4 gather = vec4(0.0f);
                #if defined GL_ARB_gpu_shader5 || defined GL_OES_gpu_shader5
                    vec4 coord = vec4(projCoord.xyz / projCoord.www, 0.0f);
                    gather = SHADOWGATHER(tex, coord);
                #else
                    gather.x = SHADOWCOMPAREOFFSET(tex, projCoord, ivec2(0, 1));
                    gather.y = SHADOWCOMPAREOFFSET(tex, projCoord, ivec2(1, 1));
                    gather.z = SHADOWCOMPAREOFFSET(tex, projCoord, ivec2(1, 0));
                    gather.w = SHADOWCOMPAREOFFSET(tex, projCoord, ivec2(0, 0));
                #endif

               vec2 f = fract( projCoord.xy * Context.ShadowMapSize );
               vec2 mx = mix( gather.wx, gather.zy, f.x );
               return mix( mx.x, mx.y, f.y );
            }

            float Shadow_DoPCF(in SHADOWMAP tex,in vec4 projCoord){

                float shadow = 0.0f;
                float border = Shadow_BorderCheck(projCoord.xy);
                if (border > 0.0f)
                    return 1.0f;

                float bound = KERNEL * 0.5f - 0.5f;
                bound *= Params.pcfEdge;
                for (float y = -bound; y <= bound; y += Params.pcfEdge){
                    for (float x = -bound; x <= bound; x += Params.pcfEdge){
                        shadow += Shadow_DoShadowCompareOffset(tex, projCoord, vec2(x,y));
                    }
                }

                shadow = shadow / (KERNEL * KERNEL);
                return shadow;
            }

            //12 tap poisson disk
            const vec2 poissonDisk0 =  vec2(-0.1711046f, -0.425016f);
            const vec2 poissonDisk1 =  vec2(-0.7829809f, 0.2162201f);
            const vec2 poissonDisk2 =  vec2(-0.2380269f, -0.8835521f);
            const vec2 poissonDisk3 =  vec2(0.4198045f, 0.1687819f);
            const vec2 poissonDisk4 =  vec2(-0.684418f, -0.3186957f);
            const vec2 poissonDisk5 =  vec2(0.6026866f, -0.2587841f);
            const vec2 poissonDisk6 =  vec2(-0.2412762f, 0.3913516f);
            const vec2 poissonDisk7 =  vec2(0.4720655f, -0.7664126f);
            const vec2 poissonDisk8 =  vec2(0.9571564f, 0.2680693f);
            const vec2 poissonDisk9 =  vec2(-0.5238616f, 0.802707f);
            const vec2 poissonDisk10 = vec2(0.5653144f, 0.60262f);
            const vec2 poissonDisk11 = vec2(0.0123658f, 0.8627419f);


            float Shadow_DoPCFPoisson(in SHADOWMAP tex, in vec4 projCoord){
                float shadow = 0.0f;
                float border = Shadow_BorderCheck(projCoord.xy);
                if (border > 0.0f){
                    return 1.0f;
                }

                vec2 texelSize = Context.SMapSizeInverse * 4.0f * Params.pcfEdge * shadowBorderScale;

                shadow += SHADOWCOMPARE(tex, vec4(projCoord.xy + poissonDisk0 * texelSize, projCoord.zw));
                shadow += SHADOWCOMPARE(tex, vec4(projCoord.xy + poissonDisk1 * texelSize, projCoord.zw));
                shadow += SHADOWCOMPARE(tex, vec4(projCoord.xy + poissonDisk2 * texelSize, projCoord.zw));
                shadow += SHADOWCOMPARE(tex, vec4(projCoord.xy + poissonDisk3 * texelSize, projCoord.zw));
                shadow += SHADOWCOMPARE(tex, vec4(projCoord.xy + poissonDisk4 * texelSize, projCoord.zw));
                shadow += SHADOWCOMPARE(tex, vec4(projCoord.xy + poissonDisk5 * texelSize, projCoord.zw));
                shadow += SHADOWCOMPARE(tex, vec4(projCoord.xy + poissonDisk6 * texelSize, projCoord.zw));
                shadow += SHADOWCOMPARE(tex, vec4(projCoord.xy + poissonDisk7 * texelSize, projCoord.zw));
                shadow += SHADOWCOMPARE(tex, vec4(projCoord.xy + poissonDisk8 * texelSize, projCoord.zw));
                shadow += SHADOWCOMPARE(tex, vec4(projCoord.xy + poissonDisk9 * texelSize, projCoord.zw));
                shadow += SHADOWCOMPARE(tex, vec4(projCoord.xy + poissonDisk10 * texelSize, projCoord.zw));
                shadow += SHADOWCOMPARE(tex, vec4(projCoord.xy + poissonDisk11 * texelSize, projCoord.zw));

                // 除以 12
                return shadow * 0.08333333333f;
            }
            //----------------------------------ShadowFilter--------------------------------------


            vec3 getPosition(in float depth, in vec2 newTexCoord){

                vec4 pos;
                pos.xy = (newTexCoord * vec2(2.0f)) - vec2(1.0f);
                pos.z  = depth * 2.0f - 1.0f;
                pos.w  = 1.0f;
                pos    = pvInverse * pos;
                pos.xyz /= pos.w;
                return pos.xyz;
            }
            //#define GETSHADOW Shadow_Nearest
            // 基于PSSM实现的CSM
            float getDirectionalLightShadows(in vec4 splits,in float shadowPosition, in SHADOWMAP shadowMap0, in SHADOWMAP shadowMap1, in SHADOWMAP shadowMap2,in SHADOWMAP shadowMap3, in vec4 projCoord0,in vec4 projCoord1,in vec4 projCoord2,in vec4 projCoord3){
                float shadow = 1.0f;
                if(shadowPosition < splits.x){
                    shadow = GETSHADOW(shadowMap0, projCoord0 );
                }
                else if( shadowPosition <  splits.y){
                    shadowBorderScale = 0.5f;
                    shadow = GETSHADOW(shadowMap1, projCoord1);
                }
                else if( shadowPosition <  splits.z){
                    shadowBorderScale = 0.25f;
                    shadow = GETSHADOW(shadowMap2, projCoord2);
                }
                else if( shadowPosition <  splits.w){
                    shadowBorderScale = 0.125f;
                    shadow = GETSHADOW(shadowMap3, projCoord3);
                }
                return shadow;
            }
            vec3 approximateNormal(in vec4 worldPos,in vec2 texCoord, in sampler2D depthMap, in vec2 resolutionInverse){
                float step = resolutionInverse.x;
                float stepy = resolutionInverse.y;
                float depth2 = texture(depthMap, texCoord + vec2(step, -stepy)).r;
                float depth3 = texture(depthMap, texCoord + vec2(-step, -stepy)).r;
                vec4 worldPos2 = vec4(getPosition(depth2, texCoord + vec2(step, -stepy)),1.0f);
                vec4 worldPos3 = vec4(getPosition(depth3, texCoord + vec2(-step, -stepy)),1.0f);

                vec3 v1 = (worldPos - worldPos2).xyz;
                vec3 v2 = (worldPos3 - worldPos2).xyz;
                return normalize(cross(v1, v2));
            }
            const mat4 biasMat = mat4(0.5f, 0.0f, 0.0f, 0.0f,
                                      0.0f, 0.5f, 0.0f, 0.0f,
                                      0.0f, 0.0f, 0.5f, 0.0f,
                                      0.5f, 0.5f, 0.5f, 1.0f);
            void main(){
                float depth = texture(Context.InDepth, wUv0).r;
                Context.OutColor = texture(Context.InScreen, wUv0);

                // 跳过不需要的部分,depth为1.0的基本上是背景或sky部分
                if(depth >= 1.0f){
                    return;
                }

                // 深度重建世界坐标
                vec4 wPosition = vec4(getPosition(depth, wUv0), 1.0f);

                vec3 lightDir;
                #ifdef Context.Pssm
                    lightDir = Context.LightDir;
                #else
                    lightDir = wPosition.xyz - Context.LightPos;
                #endif

                #ifdef Params.backfaceShadows
                    // 丢弃背面时,由于在forward pipeline下无法获取该点法线,所以只能通过近似算法获取法线
                    // 该近似算法依赖于深度信息,所以很容易造成Shadow Acne
                    if(!Params.backfaceShadows){
                        vec3 normal = approximateNormal(wPosition, wUv0, Context.InDepth, Context.ResolutionInverse);
                        float ndotl = dot(normal, lightDir);
                        if(ndotl > 0.0f){
                            return;
                        }
                    }
                #endif

                #if !defined(Context.PointLightShadows)
                    #if !defined(Context.Pssm)
                        if( dot(Context.LightDir, lightDir) < 0.0f){
                            return;
                        }
                    #endif
                #endif

                // 将坐标转换到光源空间
                vec4 projCoord0 = biasMat * Context.LightViewProjectMatrix0 * wPosition;
                vec4 projCoord1 = biasMat * Context.LightViewProjectMatrix1 * wPosition;
                vec4 projCoord2 = biasMat * Context.LightViewProjectMatrix2 * wPosition;
                vec4 projCoord3 = biasMat * Context.LightViewProjectMatrix3 * wPosition;
                #ifdef POINTLIGHT
                   vec4 projCoord4 = biasMat * Context.LightViewProjectMatrix4 * wPosition;
                   vec4 projCoord5 = biasMat * Context.LightViewProjectMatrix5 * wPosition;
                #endif

                // 计算阴影
                float shadow = 1.0f;

                #if defined(Context.Pssm)
                    float shadowPosition = pvRow2.x * wPosition.x +  pvRow2.y * wPosition.y +  pvRow2.z * wPosition.z +  pvRow2.w;
                #else
                    #if defined(Params.fadeInfo)
                        float shadowPosition = pvRow2.x * wPosition.x +  pvRow2.y * wPosition.y +  pvRow2.z * wPosition.z +  pvRow2.w;
                    #endif
                #endif

                #ifdef Context.PointLightShadows
                #else
                    #ifdef Context.Pssm
                        // directionalLight shadow
                        shadow = getDirectionalLightShadows(Context.Splits, shadowPosition, Context.InShadowMap0, Context.InShadowMap1, Context.InShadowMap2, Context.InShadowMap3, projCoord0, projCoord1, projCoord2, projCoord3);
                    #else
                        // spotLight shadow
                    #endif
                #endif

                #ifdef Params.fadeInfo
                    shadow = clamp(max(0.0f, mix(shadow, 1.0f,(shadowPosition - Params.fadeInfo.x) * Params.fadeInfo.y)), 0.0f, 1.0f);
                #endif
                #ifdef Params.shadowIntensity
                    shadow = shadow * Params.shadowIntensity + (1.0f - Params.shadowIntensity);
                #else
                    shadow = shadow * 0.7f + 0.3f;
                #endif
                Context.OutColor = Context.OutColor * vec4(shadow, shadow, shadow, 1.0f);
            }
        }
    }
    Technology{
        Sub_Pass PostFilter{
            Pass PostShadowPass{
            }
        }
    }
}
