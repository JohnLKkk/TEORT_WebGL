// PreShadowDef
// 这个材质定义用于捕获ShadowMap,因此,它很简单,只是简单的将深度信息渲染到指定缓冲中
Def PreShadowDef{
    Params{
        bool debug;
    }
    SubTechnology PreShadowPass{
        Vars{
            vec2 wUv0;
        }
        Vs_Shader{
            void main(){
                #ifdef Context.Skins
                    mat4 skinMat =
                            Context.InWeight0.x * Context.Joints[int(Context.InJoint0.x)] +
                            Context.InWeight0.y * Context.Joints[int(Context.InJoint0.y)] +
                            Context.InWeight0.z * Context.Joints[int(Context.InJoint0.z)] +
                            Context.InWeight0.w * Context.Joints[int(Context.InJoint0.w)];
                    // vec4 pos = Context.ModelMatrix * skinMat * vec4(Context.InPosition, 1.0f);
                    vec4 pos = skinMat * vec4(Context.InPosition, 1.0f);
                #else
                    vec4 pos = Context.ModelMatrix * vec4(Context.InPosition, 1.0f);
                #endif
                wUv0 = Context.InUv0;
                Context.OutPosition = Context.ProjectViewMatrix * pos;
            }
        }
        Fs_Shader{
            void main(){
                // 事实上这个fs可以不做任意事,但是考虑到部分webGL实现兼容性,在这里输出一个随意值
                Context.OutColor = vec4(1.0f);
                #ifdef Params.debug
                    if(Params.debug){
                        Context.OutColor = vec4(vec3(gl_FragCoord.z), 1.0f);
                    }
                #endif
            }
        }
    }
    Technology{
        Sub_Pass PreFrame{
            Pass PreShadowPass{
            }
        }
    }
}
