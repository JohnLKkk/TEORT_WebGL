// 默认的延迟光照材质定义
Def DeferredLightingDef{
    Params{
        sampler2D diffuseMap;
        sampler2D normalMap;
        sampler2D specularMap;
        sampler2D normalMap;
        vec4 ambientColor;
        vec4 diffuseColor;
        vec4 specularColor;
        float shininess;
        // 完全透明剔除因子(0-1),低于该值的透明片段被完全剔除而不进行混合
        float alphaDiscard;
    }
    SubTechnology GBufferPass{
        Vars{
            vec3 wNormal;
            vec4 wTangent;
            vec3 wPosition;
            vec2 wUv0;
            // 三种成分用于调和光照,可来自材质颜色的定义,也可以来自vertex_light
            vec3 ambientSumAdjust;
            vec4 diffuseSumAdjust;
            vec3 specularSumAdjust;
        }
        Vs_Shader{
            void main(){
                #ifdef Context.Skins
                    mat4 skinMat =
                            Context.InWeight0.x * Context.Joints[int(Context.InJoint0.x)] +
                            Context.InWeight0.y * Context.Joints[int(Context.InJoint0.y)] +
                            Context.InWeight0.z * Context.Joints[int(Context.InJoint0.z)] +
                            Context.InWeight0.w * Context.Joints[int(Context.InJoint0.w)];
                    // vec4 pos = Context.ModelMatrix * skinMat * vec4(Context.InPosition, 1.0f);
                    vec4 pos = skinMat * vec4(Context.InPosition, 1.0f);
                #else
                    vec4 pos = Context.ModelMatrix * vec4(Context.InPosition, 1.0f);
                #endif


                //wPosition = (Context.ModelMatrix * vec4(Context.InPosition, 1.0f)).xyz;
                wPosition = pos.xyz;
                mat3 nMat = mat3(transpose(inverse(Context.ModelMatrix)));
                vec3 norm = normalize(nMat * Context.InNormal);
                wTangent = vec4(normalize(nMat * Context.InTangent.xyz), Context.InTangent.w);
                //t = normalize(t - dot(t, norm) * norm);
                //vec3 b = cross(norm, t);
                //tbnMat = mat3(t, b, norm);
                wNormal = norm;
                wUv0 = Context.InUv0;


                // 如果是顶点光照,则在这里将光源变化到切线空间
                ambientSumAdjust = Params.ambientColor.rgb;
                diffuseSumAdjust = vec4(1.0f);
                specularSumAdjust = vec3(1.0f);
                Context.OutPosition = Context.ProjectViewMatrix * pos;
            }
        }
        Fs_Shader{
            void main(){

                vec4 _diffuseColor = vec4(1.0f);
                vec4 _specularColor = vec4(1.0f);

                #ifdef Params.diffuseColor
                    _diffuseColor = Params.diffuseColor;
                #endif
                #ifdef Params.diffuseMap
                    _diffuseColor = _diffuseColor * texture(Params.diffuseMap, wUv0);
                    #ifdef Params.alphaDiscard
                        // discard性能比较差,建议还是使用半透明渲染比较合适s
                        if(_diffuseColor.a < Params.alphaDiscard){
                            discard;
                        }
                    #endif
                #endif

                #ifdef Params.specularColor
                    _specularColor = Params.specularColor;
                #endif
                #ifdef Params.specularMap
                    _specularColor = _specularColor * texture(Params.specularMap, wUv0);
                #endif

                vec3 normal = normalize( wNormal );
                #ifdef Params.normalMap
                    vec3 normalHeight = texture(Params.normalMap, wUv0).xyz;
                    vec3 tangent = normalize(wTangent.xyz);
                    mat3 tbnMat = mat3(tangent, wTangent.w * cross(normal, tangent), normal);
                    normal = normalize(tbnMat * ( normalHeight * 2.0f - 1.0f ));
                #endif

                float _shininess = 32.0;
                #ifdef Params.shininess
                    _shininess = Params.shininess;
                #endif




                Context.OutGBuffer0.xyz = _diffuseColor.rgb * diffuseSumAdjust.rgb;
                Context.OutGBuffer0.w   = diffuseSumAdjust.a * _diffuseColor.a * 0.1f + _shininess;
                Context.OutGBuffer1.xyz = normal.xyz;
                Context.OutGBuffer2.rgb = _specularColor.rgb * specularSumAdjust.rgb * 10.0f + ambientSumAdjust * 0.1f;
                Context.OutGBuffer2.a = _shininess;
            }
        }
    }
    SubTechnology DeferredShadingPass{
        Vars{
            vec4 wordPosition;
            vec2 uv0;
            mat4 pvInverse;
        }
        Advanced{
            RenderProgram SinglePassLighting;
        }
        Vs_Shader{
            void main(){
                Context.OutPosition = vec4(Context.InPosition, 1.0f);
                wordPosition = Context.OutPosition;
                uv0 = Context.InUv0;
                pvInverse = inverse(Context.ProjectViewMatrix);
            }
        }
        Fs_Shader{
            vec3 getPosition(in float depth, in vec2 newTexCoord){

                vec4 pos;
                pos.xy = (newTexCoord * vec2(2.0)) - vec2(1.0);
                pos.z  = depth * 2.0 - 1.0;
                pos.w  = 1.0;
                pos    = pvInverse * pos;
                pos.xyz /= pos.w;
                return pos.xyz;
            }
            // 计算光照方向
            // 对于DirLight,PointLight以及SpotLight,lightType依次为0.0,1.0,2.0
            // 输出光照方向
            // lightDir.w存储衰减率(对于DirLight,衰减值一直为1,对于Point或Spot,衰减值随着半径而变小,衰减值越小,表示衰减度越大)
            void ComputeLightDir(in vec3 worldPos, in float lightType, in vec4 position, out vec4 lightDir, out vec3 lightVec){
                // 只有lightType = 0.0时,posLight为0.0,否则posLight为1.0
                float posLight = step(0.5f, lightType);

                // 计算光照位置
                // 对于DirLight,lightVec = position.xyz * sign(-0.5f) = position.xyz * -1.0f;其中position代表DirLight的方向
                // 对于PointLight和SpotLight,lightVec = position.xyz * sign(1.0f - 0.5f) - (worldPos * 1.0f) = positions.xyz * 1.0f - worldPos;其中position代表Light的位置
                lightVec = position.xyz * sign(posLight - 0.5f) - (worldPos * posLight);
                float dist = length(lightVec);

                // 对于DirLight,lightDir.w = 1.0f
                //lightDir.w = clamp(1.0f - position.w * dist * posLight, 0.0f, 1.0f);

                lightDir.w = (1.0f - position.w * dist) / (1.0f + position.w * dist * dist);
                lightDir.w = clamp(lightDir.w, 1.0f - posLight, 1.0f);

                // 归一化
                lightDir.xyz = lightVec / vec3(dist);
            }
            // 基于BlinnPhong光照模型计算光照因子
            // brdf.x保存漫反射部分;brdf.y保存镜面反射部分
            void ComputeLighting(in vec3 normal, in vec3 viewDir, in vec3 lightDir, in float attenuation, in float shininess, out vec2 brdf){
                // diffuse部分
                float diffuseBRDF = max(0.0f, dot(normal, lightDir));
                // specular部分
                // 半角向量代替viewDir参与光照计算
                vec3 H = normalize(viewDir + lightDir);
                float HdotN = max(0.0f, dot(H, normal));
                float specularBRDF = pow( HdotN, shininess );

                // 衰减,对于PointLight和SpotLight来说有效,对于DirLight而言,attenuation一直为1
                brdf.x = diffuseBRDF * attenuation;
                brdf.y = specularBRDF * attenuation;
            }
            // 返回Spot范围衰减
            float ComputeSpotFalloff(in vec4 spotDirection, in vec3 lightDir){
                float curAngleCos = dot(lightDir, -spotDirection.xyz);
                float innerAngleCos = floor(spotDirection.w) * 0.001f;
                float outerAngleCos = fract(spotDirection.w);
                float innerMinusOuter = innerAngleCos - outerAngleCos;

                #ifndef Context.Srgb
                    // 使用二次衰减（请注意^ 4）
                    return pow(clamp((curAngleCos - outerAngleCos) / innerMinusOuter, 0.0f, 1.0f), 4.0f);
                #else
                    // 线性空间衰减
                    return clamp((curAngleCos - outerAngleCos) / innerMinusOuter, step(spotDirection.w, 0.001f), 1.0f);
                #endif
            }
            void main(){
                float depth = texture(Context.InGDepth, uv0).r;
                if(depth >= 1.0){
                    Context.OutColor = vec4(0.0f, 0.0f, 0.0f, 1.0f);
                    return;
                }
                vec3 wPosition = getPosition(depth, uv0);
                vec4 _diffuseColor = texture(Context.InGBuffer0, uv0);
                vec4 _specularColorDecode = texture(Context.InGBuffer2, uv0);
                vec3 _specularColor = floor(_specularColorDecode.rgb) * 0.1f;
                vec3 _ambientColor = min(fract(_specularColorDecode.rgb) * 10.0f, vec3(1.0f));
                float _shininess = floor(_diffuseColor.w);
                float alpha     = min(fract(_diffuseColor.w) * 10.0f, 1.0f);
                vec3 normal = texture(Context.InGBuffer1, uv0).xyz;
                // 计算光照
                vec4 lightColor;
                vec4 lightData1;
                vec4 lightDir = vec4(0.0f);
                vec3 lightVec = vec3(0.0f);
                vec2 lightBRDF = vec2(0.0f);
                vec3 viewDir = normalize(Context.CameraPosition.xyz - wPosition.xyz);

                Context.OutColor.rgb = _diffuseColor.rgb * Context.AmbientLightColor * _ambientColor;
                for( int i = 0;i < Context.CurLightCount;i+=3 ){
                    // 后期改为Context.GetLightDir(Context.LightData[i]);
                    lightColor = Context.WLightData[i];
                    lightData1 = Context.WLightData[i + 1];
                    ComputeLightDir(wPosition, lightColor.w, lightData1, lightDir, lightVec);
                    //lightBRDF.x = max( 0.0f, dot( normal, lightDir.xyz ) );

                    // BlinnPhongLighting
                    //vec3 h = normalize( viewDir + lightDir.xzy );
                    //lightBRDF.y = pow( max( 0.0f, dot( normal, h ) ), 32.0f );
                    // 标准PhongLighting
                    //vec3 refDir = reflect( lightData1.xyz, normal );
                    //lightBRDF.y = pow( max( 0.0f, dot( viewDir, refDir ) ), 32.0f);

                    // 计算SpotLight的衰减
                    float spotFallOff = 1.0;
                    if( lightColor.w > 1.0f )
                    {
                        // 计算SpotLight的范围衰减
                        spotFallOff = ComputeSpotFalloff( Context.WLightData[i + 2], lightDir.xyz );
                    }

                    // 如果存在法线纹理,则进一步计算lightDir

                    // 计算反射率
                    ComputeLighting(normal, viewDir, lightDir.xyz, lightDir.w * spotFallOff, _shininess, lightBRDF);

                    // 最终光照值
                    //Context.OutColor.rgb += lightColor.rgb * (vec3(lightBRDF.x) * _diffuseColor.rgb + vec3(lightBRDF.y) * _specularColor.rgb);
                    Context.OutColor.rgb += lightColor.rgb * ( _diffuseColor.rgb * vec3( lightBRDF.x ) + _specularColor.rgb * vec3( lightBRDF.y ));
                    //Context.OutColor.rgb = vec3(spotFallOff);
                }
                Context.OutColor.a = alpha;
            }
        }
    }
    SubTechnology DeferredShadingPass2{
        Vars{
            vec4 wordPosition;
            vec2 uv0;
            mat4 pvInverse;
        }
        Advanced{
            RenderProgram MultiPassLighting;
        }
        Vs_Shader{
            void main(){
                Context.OutPosition = vec4(Context.InPosition, 1.0f);
                wordPosition = Context.OutPosition;
                uv0 = Context.InUv0;
                pvInverse = inverse(Context.ProjectViewMatrix);
            }
        }
        Fs_Shader{
            vec3 getPosition(in float depth, in vec2 newTexCoord){

                vec4 pos;
                pos.xy = (newTexCoord * vec2(2.0)) - vec2(1.0);
                pos.z  = depth * 2.0 - 1.0;
                pos.w  = 1.0;
                pos    = pvInverse * pos;
                pos.xyz /= pos.w;
                return pos.xyz;
            }
            // 计算光照方向
            // 对于DirLight,PointLight以及SpotLight,lightType依次为0.0,1.0,2.0
            // 输出光照方向
            // lightDir.w存储衰减率(对于DirLight,衰减值一直为1,对于Point或Spot,衰减值随着半径而变小,衰减值越小,表示衰减度越大)
            void ComputeLightDir(in vec3 worldPos, in float lightType, in vec4 position, out vec4 lightDir, out vec3 lightVec){
                // 只有lightType = 0.0时,posLight为0.0,否则posLight为1.0
                float posLight = step(0.5f, lightType);

                // 计算光照位置
                // 对于DirLight,lightVec = position.xyz * sign(-0.5f) = position.xyz * -1.0f;其中position代表DirLight的方向
                // 对于PointLight和SpotLight,lightVec = position.xyz * sign(1.0f - 0.5f) - (worldPos * 1.0f) = positions.xyz * 1.0f - worldPos;其中position代表Light的位置
                lightVec = position.xyz * sign(posLight - 0.5f) - (worldPos * posLight);
                float dist = length(lightVec);

                // 对于DirLight,lightDir.w = 1.0f
                //lightDir.w = clamp(1.0f - position.w * dist * posLight, 0.0f, 1.0f);

                lightDir.w = (1.0f - position.w * dist) / (1.0f + position.w * dist * dist);
                lightDir.w = clamp(lightDir.w, 1.0f - posLight, 1.0f);

                // 归一化
                lightDir.xyz = lightVec / vec3(dist);
            }
            // 基于BlinnPhong光照模型计算光照因子
            // brdf.x保存漫反射部分;brdf.y保存镜面反射部分
            void ComputeLighting(in vec3 normal, in vec3 viewDir, in vec3 lightDir, in float attenuation, in float shininess, out vec2 brdf){
                // diffuse部分
                float diffuseBRDF = max(0.0f, dot(normal, lightDir));
                // specular部分
                // 半角向量代替viewDir参与光照计算
                vec3 H = normalize(viewDir + lightDir);
                float HdotN = max(0.0f, dot(H, normal));
                float specularBRDF = pow( HdotN, shininess );

                // 衰减,对于PointLight和SpotLight来说有效,对于DirLight而言,attenuation一直为1
                brdf.x = diffuseBRDF * attenuation;
                brdf.y = specularBRDF * attenuation;
            }
            // 返回Spot范围衰减
            float ComputeSpotFalloff(in vec4 spotDirection, in vec3 lightDir){
                float curAngleCos = dot(lightDir, -spotDirection.xyz);
                float innerAngleCos = floor(spotDirection.w) * 0.001f;
                float outerAngleCos = fract(spotDirection.w);
                float innerMinusOuter = innerAngleCos - outerAngleCos;

                #ifndef Context.Srgb
                    // 使用二次衰减（请注意^ 4）
                    return pow(clamp((curAngleCos - outerAngleCos) / innerMinusOuter, 0.0f, 1.0f), 4.0f);
                #else
                    // 线性空间衰减
                    return clamp((curAngleCos - outerAngleCos) / innerMinusOuter, step(spotDirection.w, 0.001f), 1.0f);
                #endif
            }
            void main(){
                float depth = texture(Context.InGDepth, uv0).r;
                if(depth >= 1.0){
                    Context.OutColor = vec4(0.0f, 0.0f, 0.0f, 1.0f);
                    return;
                }
                vec3 wPosition = getPosition(depth, uv0);
                vec4 _diffuseColor = texture(Context.InGBuffer0, uv0);
                vec4 _specularColorDecode = texture(Context.InGBuffer2, uv0);
                vec3 _specularColor = floor(_specularColorDecode.rgb) * 0.1f;
                vec3 _ambientColor = min(fract(_specularColorDecode.rgb) * 10.0f, vec3(1.0f));
                float _shininess = floor(_diffuseColor.w);
                float alpha     = min(fract(_diffuseColor.w) * 10.0f, 1.0f);
                vec3 normal = texture(Context.InGBuffer1, uv0).xyz;
                // 计算光照
                vec4 lightColor;
                vec4 lightData1;
                vec4 lightDir = vec4(0.0f);
                vec3 lightVec = vec3(0.0f);
                vec2 lightBRDF = vec2(0.0f);
                vec3 viewDir = normalize(Context.CameraPosition.xyz - wPosition.xyz);

                Context.OutColor.rgb = _diffuseColor.rgb * Context.AmbientLightColor * _ambientColor;


                // 不必担心这个分支，不会影响性能
                if(Context.MultiId == 0){
                    for( int i = 0;i < Context.CurLightCount;i+=3 ){
                        // 后期改为Context.GetLightDir(Context.LightData[i]);
                        lightColor = Context.WLightData[i];
                        lightData1 = Context.WLightData[i + 1];
                        ComputeLightDir(wPosition, lightColor.w, lightData1, lightDir, lightVec);
                        //lightBRDF.x = max( 0.0f, dot( normal, lightDir.xyz ) );

                        // BlinnPhongLighting
                        //vec3 h = normalize( viewDir + lightDir.xzy );
                        //lightBRDF.y = pow( max( 0.0f, dot( normal, h ) ), 32.0f );
                        // 标准PhongLighting
                        //vec3 refDir = reflect( lightData1.xyz, normal );
                        //lightBRDF.y = pow( max( 0.0f, dot( viewDir, refDir ) ), 32.0f);

                        // 计算SpotLight的衰减
                        float spotFallOff = 1.0;
                        if( lightColor.w > 1.0f )
                        {
                            // 计算SpotLight的范围衰减
                            spotFallOff = ComputeSpotFalloff( Context.WLightData[i + 2], lightDir.xyz );
                        }

                        // 如果存在法线纹理,则进一步计算lightDir

                        // 计算反射率
                        ComputeLighting(normal, viewDir, lightDir.xyz, lightDir.w * spotFallOff, _shininess, lightBRDF);

                        // 最终光照值
                        //Context.OutColor.rgb += lightColor.rgb * (vec3(lightBRDF.x) * _diffuseColor.rgb + vec3(lightBRDF.y) * _specularColor.rgb);
                        Context.OutColor.rgb += lightColor.rgb * ( _diffuseColor.rgb * vec3( lightBRDF.x ) + _specularColor.rgb * vec3( lightBRDF.y ));
                        //Context.OutColor.rgb = vec3(spotFallOff);
                    }
                }
                else{
                    // point和spot
                    lightColor = Context.WLight_Data_0;
                    lightData1 = Context.WLight_Data_1;
                    ComputeLightDir(wPosition, lightColor.w, lightData1, lightDir, lightVec);
                    //lightBRDF.x = max( 0.0f, dot( normal, lightDir.xyz ) );

                    // BlinnPhongLighting
                    //vec3 h = normalize( viewDir + lightDir.xzy );
                    //lightBRDF.y = pow( max( 0.0f, dot( normal, h ) ), 32.0f );
                    // 标准PhongLighting
                    //vec3 refDir = reflect( lightData1.xyz, normal );
                    //lightBRDF.y = pow( max( 0.0f, dot( viewDir, refDir ) ), 32.0f);

                    // 计算SpotLight的衰减
                    float spotFallOff = 1.0;
                    if( lightColor.w > 1.0f )
                    {
                        // 计算SpotLight的范围衰减
                        spotFallOff = ComputeSpotFalloff( Context.WLight_Data_2, lightDir.xyz );
                    }

                    // 如果存在法线纹理,则进一步计算lightDir

                    // 计算反射率
                    ComputeLighting(normal, viewDir, lightDir.xyz, lightDir.w * spotFallOff, _shininess, lightBRDF);

                    // 最终光照值
                    //Context.OutColor.rgb += lightColor.rgb * (vec3(lightBRDF.x) * _diffuseColor.rgb + vec3(lightBRDF.y) * _specularColor.rgb);
                    Context.OutColor.rgb += lightColor.rgb * ( _diffuseColor.rgb * vec3( lightBRDF.x ) + _specularColor.rgb * vec3( lightBRDF.y ));
                }


                Context.OutColor.a = alpha;
            }
        }
    }
    SubTechnology GlobalPass{
        Vars{
            vec4 wordPosition;
            vec2 uv0;
            mat4 pvInverse;
        }
        Advanced{
            RenderProgram TilePassLighting;
        }
        Vs_Shader{
            void main(){
                Context.OutPosition = vec4(Context.InPosition, 1.0f);
                wordPosition = Context.OutPosition;
                uv0 = Context.InUv0;
                pvInverse = inverse(Context.ProjectViewMatrix);
            }
        }
        Fs_Shader{
            vec3 getPosition(in float depth, in vec2 newTexCoord){

                vec4 pos;
                pos.xy = (newTexCoord * vec2(2.0)) - vec2(1.0);
                pos.z  = depth * 2.0 - 1.0;
                pos.w  = 1.0;
                pos    = pvInverse * pos;
                pos.xyz /= pos.w;
                return pos.xyz;
            }
            // 计算光照方向
            // 对于DirLight,PointLight以及SpotLight,lightType依次为0.0,1.0,2.0
            // 输出光照方向
            // lightDir.w存储衰减率(对于DirLight,衰减值一直为1,对于Point或Spot,衰减值随着半径而变小,衰减值越小,表示衰减度越大)
            void ComputeLightDir(in vec3 worldPos, in float lightType, in vec4 position, out vec4 lightDir, out vec3 lightVec){
                // 只有lightType = 0.0时,posLight为0.0,否则posLight为1.0
                float posLight = step(0.5f, lightType);

                // 计算光照位置
                // 对于DirLight,lightVec = position.xyz * sign(-0.5f) = position.xyz * -1.0f;其中position代表DirLight的方向
                // 对于PointLight和SpotLight,lightVec = position.xyz * sign(1.0f - 0.5f) - (worldPos * 1.0f) = positions.xyz * 1.0f - worldPos;其中position代表Light的位置
                lightVec = position.xyz * sign(posLight - 0.5f) - (worldPos * posLight);
                float dist = length(lightVec);

                // 对于DirLight,lightDir.w = 1.0f
                //lightDir.w = clamp(1.0f - position.w * dist * posLight, 0.0f, 1.0f);

                lightDir.w = (1.0f - position.w * dist) / (1.0f + position.w * dist * dist);
                lightDir.w = clamp(lightDir.w, 1.0f - posLight, 1.0f);

                // 归一化
                lightDir.xyz = lightVec / vec3(dist);
            }
            // 基于BlinnPhong光照模型计算光照因子
            // brdf.x保存漫反射部分;brdf.y保存镜面反射部分
            void ComputeLighting(in vec3 normal, in vec3 viewDir, in vec3 lightDir, in float attenuation, in float shininess, out vec2 brdf){
                // diffuse部分
                float diffuseBRDF = max(0.0f, dot(normal, lightDir));
                // specular部分
                // 半角向量代替viewDir参与光照计算
                vec3 H = normalize(viewDir + lightDir);
                float HdotN = max(0.0f, dot(H, normal));
                float specularBRDF = pow( HdotN, shininess );

                // 衰减,对于PointLight和SpotLight来说有效,对于DirLight而言,attenuation一直为1
                brdf.x = diffuseBRDF * attenuation;
                brdf.y = specularBRDF * attenuation;
            }
            // 返回Spot范围衰减
            float ComputeSpotFalloff(in vec4 spotDirection, in vec3 lightDir){
                float curAngleCos = dot(lightDir, -spotDirection.xyz);
                float innerAngleCos = floor(spotDirection.w) * 0.001f;
                float outerAngleCos = fract(spotDirection.w);
                float innerMinusOuter = innerAngleCos - outerAngleCos;
                float falloff = clamp((curAngleCos - outerAngleCos) / innerMinusOuter, 0.0f, 1.0f);
                //if(curAngleCos > innerMinusOuter)
                //    falloff = 1.0f;
                //else
                //    falloff = 0.0f;

                #ifndef Context.Srgb
                    // Use quadratic falloff (notice the ^4)
                    return pow(clamp((curAngleCos - outerAngleCos) / innerMinusOuter, 0.0, 1.0), 4.0);
                #else
                    // Use linear falloff
                    return falloff;
                #endif
            }
            void main(){
                float depth = texture(Context.InGDepth, uv0).r;
                if(depth >= 1.0){
                    Context.OutColor = vec4(0.0f, 0.0f, 0.0f, 1.0f);
                    return;
                }
                vec3 wPosition = getPosition(depth, uv0);
                vec4 _diffuseColor = texture(Context.InGBuffer0, uv0);
                vec4 _specularColorDecode = texture(Context.InGBuffer2, uv0);
                vec3 _specularColor = floor(_specularColorDecode.rgb) * 0.1f;
                vec3 _ambientColor = min(fract(_specularColorDecode.rgb) * 10.0f, vec3(1.0f));
                float _shininess = floor(_diffuseColor.w);
                float alpha     = min(fract(_diffuseColor.w) * 10.0f, 1.0f);
                vec3 normal = texture(Context.InGBuffer1, uv0).xyz;
                // 计算光照
                vec4 lightColor;
                vec4 lightData1;
                vec4 lightDir = vec4(0.0f);
                vec3 lightVec = vec3(0.0f);
                vec2 lightBRDF = vec2(0.0f);
                vec3 viewDir = normalize(Context.CameraPosition.xyz - wPosition.xyz);

                Context.OutColor.rgb = _diffuseColor.rgb * Context.AmbientLightColor * _ambientColor;
                for( int i = 0;i < Context.CurLightCount;i+=3 ){
                    // 后期改为Context.GetLightDir(Context.LightData[i]);
                    lightColor = Context.WLightData[i];
                    lightData1 = Context.WLightData[i + 1];
                    ComputeLightDir(wPosition, lightColor.w, lightData1, lightDir, lightVec);
                    //lightBRDF.x = max( 0.0f, dot( normal, lightDir.xyz ) );

                    // BlinnPhongLighting
                    //vec3 h = normalize( viewDir + lightDir.xzy );
                    //lightBRDF.y = pow( max( 0.0f, dot( normal, h ) ), 32.0f );
                    // 标准PhongLighting
                    //vec3 refDir = reflect( lightData1.xyz, normal );
                    //lightBRDF.y = pow( max( 0.0f, dot( viewDir, refDir ) ), 32.0f);

                    // 计算SpotLight的衰减
                    float spotFallOff = 1.0;
                    if( lightColor.w > 1.0f )
                    {
                        // 计算SpotLight的范围衰减
                        spotFallOff = ComputeSpotFalloff( Context.WLightData[i + 2], lightDir.xyz );
                    }

                    // 如果存在法线纹理,则进一步计算lightDir

                    // 计算反射率
                    ComputeLighting(normal, viewDir, lightDir.xyz, lightDir.w * spotFallOff, _shininess, lightBRDF);

                    // 最终光照值
                    //Context.OutColor.rgb += lightColor.rgb * (vec3(lightBRDF.x) * _diffuseColor.rgb + vec3(lightBRDF.y) * _specularColor.rgb);
                    Context.OutColor.rgb += lightColor.rgb * ( _diffuseColor.rgb * vec3( lightBRDF.x ) + _specularColor.rgb * vec3( lightBRDF.y ));
                    //Context.OutColor.rgb = vec3(spotFallOff);
                }
                Context.OutColor.a = alpha;
            }
        }
    }
    SubTechnology TilePass{
        Vars{
            vec4 wordPosition;
            vec2 uv0;
            mat4 pvInverse;
        }
        Advanced{
            RenderProgram TilePassLighting;
        }
        Vs_Shader{
            void main(){
                Context.OutPosition = vec4(Context.InPosition, 1.0f);
                wordPosition = Context.OutPosition;
                uv0 = Context.InUv0;
                pvInverse = inverse(Context.ProjectViewMatrix);
            }
        }
        Fs_Shader{
            vec3 getPosition(in float depth, in vec2 newTexCoord){

                vec4 pos;
                pos.xy = (newTexCoord * vec2(2.0)) - vec2(1.0);
                pos.z  = depth * 2.0 - 1.0;
                pos.w  = 1.0;
                pos    = pvInverse * pos;
                pos.xyz /= pos.w;
                return pos.xyz;
            }
            // 计算光照方向
            // 对于DirLight,PointLight以及SpotLight,lightType依次为0.0,1.0,2.0
            // 输出光照方向
            // lightDir.w存储衰减率(对于DirLight,衰减值一直为1,对于Point或Spot,衰减值随着半径而变小,衰减值越小,表示衰减度越大)
            void ComputeLightDir(in vec3 worldPos, in float lightType, in vec4 position, out vec4 lightDir, out vec3 lightVec){
                // 只有lightType = 0.0时,posLight为0.0,否则posLight为1.0
                float posLight = step(0.5f, lightType);

                // 计算光照位置
                // 对于DirLight,lightVec = position.xyz * sign(-0.5f) = position.xyz * -1.0f;其中position代表DirLight的方向
                // 对于PointLight和SpotLight,lightVec = position.xyz * sign(1.0f - 0.5f) - (worldPos * 1.0f) = positions.xyz * 1.0f - worldPos;其中position代表Light的位置
                lightVec = position.xyz * sign(posLight - 0.5f) - (worldPos * posLight);
                float dist = length(lightVec);

                // 对于DirLight,lightDir.w = 1.0f
                //lightDir.w = clamp(1.0f - position.w * dist * posLight, 0.0f, 1.0f);

                lightDir.w = (1.0f - position.w * dist) / (1.0f + position.w * dist * dist);
                lightDir.w = clamp(lightDir.w, 1.0f - posLight, 1.0f);

                // 归一化
                lightDir.xyz = lightVec / vec3(dist);
            }
            // 基于BlinnPhong光照模型计算光照因子
            // brdf.x保存漫反射部分;brdf.y保存镜面反射部分
            void ComputeLighting(in vec3 normal, in vec3 viewDir, in vec3 lightDir, in float attenuation, in float shininess, out vec2 brdf){
                // diffuse部分
                float diffuseBRDF = max(0.0f, dot(normal, lightDir));
                // specular部分
                // 半角向量代替viewDir参与光照计算
                vec3 H = normalize(viewDir + lightDir);
                float HdotN = max(0.0f, dot(H, normal));
                float specularBRDF = pow( HdotN, shininess );

                // 衰减,对于PointLight和SpotLight来说有效,对于DirLight而言,attenuation一直为1
                brdf.x = diffuseBRDF * attenuation;
                brdf.y = specularBRDF * attenuation;
            }
            // 返回Spot范围衰减
            float ComputeSpotFalloff(in vec4 spotDirection, in vec3 lightDir){
                float curAngleCos = dot(lightDir, -spotDirection.xyz);
                float innerAngleCos = floor(spotDirection.w) * 0.001f;
                float outerAngleCos = fract(spotDirection.w);
                float innerMinusOuter = innerAngleCos - outerAngleCos;
                float falloff = clamp((curAngleCos - outerAngleCos) / innerMinusOuter, 0.0f, 1.0f);
                //if(curAngleCos > innerMinusOuter)
                //    falloff = 1.0f;
                //else
                //    falloff = 0.0f;

                #ifndef Context.Srgb
                    // Use quadratic falloff (notice the ^4)
                    return pow(clamp((curAngleCos - outerAngleCos) / innerMinusOuter, 0.0, 1.0), 4.0);
                #else
                    // Use linear falloff
                    return falloff;
                #endif
            }
            void main(){
                float depth = texture(Context.InGDepth, uv0).r;
                if(depth >= 1.0){
                    Context.OutColor = vec4(0.0f, 0.0f, 0.0f, 1.0f);
                    return;
                }
                vec3 wPosition = getPosition(depth, uv0);
                vec4 _diffuseColor = texture(Context.InGBuffer0, uv0);
                vec4 _specularColorDecode = texture(Context.InGBuffer2, uv0);
                vec3 _specularColor = floor(_specularColorDecode.rgb) * 0.1f;
                vec3 _ambientColor = min(fract(_specularColorDecode.rgb) * 10.0f, vec3(1.0f));
                float _shininess = floor(_diffuseColor.w);
                float alpha     = min(fract(_diffuseColor.w) * 10.0f, 1.0f);
                vec3 normal = texture(Context.InGBuffer1, uv0).xyz;
                // 计算光照
                vec4 lightColor;
                vec4 lightData1;
                vec4 lightDir = vec4(0.0f);
                vec3 lightVec = vec3(0.0f);
                vec2 lightBRDF = vec2(0.0f);
                vec3 viewDir = normalize(Context.CameraPosition.xyz - wPosition.xyz);

                Context.OutColor.rgb = vec3(0.0f);
                // Tile Based Shading
                // 获取tile信息
                vec3 tile = texture(Context.InTileLightDecode, uv0).xyz;
                int uoffset = int(tile.x);
                int voffset = int(tile.z);
                int count = int(tile.y);
                if(count > 0){
                    int lightId;
                    float temp;
                    int offset;
                    // lightIndex采样范围规范化单位
                    float uvSize = 1.0f / (Context.TileLightOffsetSize - 1.0f);
                    vec2 lightUV;
                    // lightData采样范围规范单位
                    float lightUVSize = 1.0f / (float(Context.TileLightNum) - 1.0f);
                    vec2 lightDataUV;
                    for(int i = 0;i < count;i++){
                        temp = float(uoffset + i);
                        offset = 0;

                        if(temp >= Context.TileLightOffsetSize){
                            temp -= Context.TileLightOffsetSize;
                            offset++;
                        }
                        if(temp == Context.TileLightOffsetSize){
                            temp = 0.0f;
                        }

                        // lightIndexUV
                        lightUV = vec2(temp * uvSize, float(voffset + offset) * uvSize);
                        lightId = int(texture(Context.InTileLightIndex, lightUV).x);

                        // 光源信息
                        lightDataUV = vec2(float(lightId) * lightUVSize);
                        lightColor = texture(Context.InTileWLightData0, lightDataUV);
                        lightData1 = texture(Context.InTileWLightData1, lightDataUV);

                        // point和spot
                        ComputeLightDir(wPosition, lightColor.w, lightData1, lightDir, lightVec);
                        //lightBRDF.x = max( 0.0f, dot( normal, lightDir.xyz ) );

                        // BlinnPhongLighting
                        //vec3 h = normalize( viewDir + lightDir.xzy );
                        //lightBRDF.y = pow( max( 0.0f, dot( normal, h ) ), 32.0f );
                        // 标准PhongLighting
                        //vec3 refDir = reflect( lightData1.xyz, normal );
                        //lightBRDF.y = pow( max( 0.0f, dot( viewDir, refDir ) ), 32.0f);

                        // 计算SpotLight的衰减
                        float spotFallOff = 1.0;
                        if( lightColor.w > 1.0f )
                        {
                            // 计算SpotLight的范围衰减
                            spotFallOff = ComputeSpotFalloff( texture(Context.InTileWLightData2, lightDataUV), lightDir.xyz );
                        }

                        // 如果存在法线纹理,则进一步计算lightDir

                        // 计算反射率
                        ComputeLighting(normal, viewDir, lightDir.xyz, lightDir.w * spotFallOff, _shininess, lightBRDF);

                        // 最终光照值
                        //Context.OutColor.rgb += lightColor.rgb * (vec3(lightBRDF.x) * _diffuseColor.rgb + vec3(lightBRDF.y) * _specularColor.rgb);
                        Context.OutColor.rgb += lightColor.rgb * ( _diffuseColor.rgb * vec3( lightBRDF.x ) + _specularColor.rgb * vec3( lightBRDF.y ));
                    }
                }
                Context.OutColor.a = alpha;
            }
        }
    }
    Technology{
        Sub_Pass DeferredShading{
            Pass GBufferPass{
            }
            Pass DeferredShadingPass{
            }
        }
    }
    Technology MultiPassDeferred{
        Sub_Pass DeferredShading{
            Pass GBufferPass{
            }
            Pass DeferredShadingPass2{
            }
        }
    }
    Technology TileDeferred{
        Sub_Pass TileDeferredShading{
            Pass GBufferPass{
            }
            Pass GlobalPass{
            }
            Pass TilePass{
            }
        }
    }
}
