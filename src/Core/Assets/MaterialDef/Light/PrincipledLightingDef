// 原理化光照材质定义
Def PrincipledLightingDef{
    Params{
        // 基础参数
        vec4 baseColor;
        sampler2D baseColorMap;
        sampler2D normalMap;

        // lightMap或AO
        sampler2D lightMap;
        bool aoMap;
        bool lightMapTexCoord;

        // 自发光
        sampler2D emissiveMap;
        vec4 emissive;
        float emissivePower;
        float emissiveIntensity;

        // metallic管线
        float metallic;
        float roughness;
        sampler2D metallicRoughnessMap;
        sampler2D metallicMap;
        sampler2D roughnessMap;

        // specular管线
        bool useSpecGloss;
        sampler2D specularGlossinessMap;
        sampler2D specularMap;
        sampler2D glossinessMap;
        vec4 specular;
        float glossiness;

        // alphaDiscard
        float alphaDiscard;
    }
    SubTechnology SPPrincipledLighting{
        Vars{
            vec3 wNormal;
            vec4 wTangent;
            vec3 wPosition;
            vec2 wUv0;
            vec2 wUv1;
        }
        Advanced{
            RenderProgram SinglePassIBLLighting;
        }
        Vs_Shader{
            void main(){
                #ifdef Context.Skins
                    mat4 skinMat =
                            Context.InWeight0.x * Context.Joints[int(Context.InJoint0.x)] +
                            Context.InWeight0.y * Context.Joints[int(Context.InJoint0.y)] +
                            Context.InWeight0.z * Context.Joints[int(Context.InJoint0.z)] +
                            Context.InWeight0.w * Context.Joints[int(Context.InJoint0.w)];
                    // vec4 pos = Context.ModelMatrix * skinMat * vec4(Context.InPosition, 1.0f);
                    vec4 pos = skinMat * vec4(Context.InPosition, 1.0f);
                #else
                    vec4 pos = Context.ModelMatrix * vec4(Context.InPosition, 1.0f);
                #endif


                //wPosition = (Context.ModelMatrix * vec4(Context.InPosition, 1.0f)).xyz;
                wPosition = pos.xyz;
                mat3 nMat = mat3(transpose(inverse(Context.ModelMatrix)));
                vec3 norm = normalize(nMat * Context.InNormal);
                //vec3 t = normalize(nMat * Context.InTangent);
                wTangent = vec4(normalize(nMat * Context.InTangent.xyz), Context.InTangent.w);
                //t = normalize(t - dot(t, norm) * norm);
                //vec3 b = cross(norm, t);
                //tbnMat = mat3(t, b, norm);
                wNormal = norm;
                wUv0 = Context.InUv0;
                #ifdef Params.lightMapTexCoord
                    wUv1 = Context.InUv1;
                #endif


                Context.OutPosition = Context.ProjectViewMatrix * pos;
            }
        }

        Fs_Shader{
            // 计算光照方向
            // 对于DirLight,PointLight以及SpotLight,lightType依次为0.0,1.0,2.0
            // 输出光照方向
            // lightDir.w存储衰减率(对于DirLight,衰减值一直为1,对于Point或Spot,衰减值随着半径而变小,衰减值越小,表示衰减度越大)
            void ComputeLightDir(in vec3 worldPos, in float lightType, in vec4 position, out vec4 lightDir, out vec3 lightVec){
                // 只有lightType = 0.0时,posLight为0.0,否则posLight为1.0
                float posLight = step(0.5f, lightType);

                // 计算光照位置
                // 对于DirLight,lightVec = position.xyz * sign(-0.5f) = position.xyz * -1.0f;其中position代表DirLight的方向
                // 对于PointLight和SpotLight,lightVec = position.xyz * sign(1.0f - 0.5f) - (worldPos * 1.0f) = positions.xyz * 1.0f - worldPos;其中position代表Light的位置
                lightVec = position.xyz * sign(posLight - 0.5f) - (worldPos * posLight);
                float dist = length(lightVec);

                #ifndef Context.Srgb
                    lightDir.w = (1.0f - position.w * dist) / (1.0f + position.w * dist * dist);
                    lightDir.w = clamp(lightDir.w, 1.0f - posLight, 1.0f);
                #else
                    // 对于DirLight,lightDir.w = 1.0f
                    lightDir.w = clamp(1.0f - position.w * dist * posLight, 0.0f, 1.0f);
                #endif

                // 归一化
                lightDir.xyz = lightVec / vec3(dist);
            }
            #define PI 3.14159265358979323846264
            // 镜面反射菲涅尔计算
            vec3 F_Shlick(float vh,	vec3 F0){
            	float fresnelFact = pow(2.0f, (-5.55473f * vh - 6.98316f) * vh);
            	return mix(F0, vec3(1.0f, 1.0f, 1.0f), fresnelFact);
            }
            vec3 F_Schlick2(float cosTheta, vec3 F0)
            {
                return F0 + (1.0f - F0) * pow(1.0f - cosTheta, 5.0f);
            }
            // 计算直接光照
            void ComputeDirectLighting(in vec3 normal, in vec3 viewDir, in vec3 lightDir, in vec3 lightColor, in vec3 diffuseColor, in vec3 fZero, in float roughness, in float ndotv, out vec3 directLighting){
                vec3 h = normalize(lightDir + viewDir);
                float ndotl = max( dot( normal, lightDir ), 0.0f );
                float ndoth = max( dot( normal, h), 0.0f );
                float hdotv = max( dot( h, viewDir ), 0.0f );

                // 这里,不使用c/Π计算diffuse fr(x, wi, wo)
                // 而假设恒定
                vec3 diffuse = vec3( ndotl ) * lightColor * diffuseColor;

                // cook-torrence,BRDF : http://blog.selfshadow.com/publications/s2013-shading-course/karis/s2013_pbs_epic_notes_v2.pdf
                float alpha = roughness * roughness;

                // D, GGX 法线分布函数
                float alpha2 = alpha * alpha;
                float sum = (( ndoth * ndoth ) * ( alpha2 - 1.0f ) + 1.0f);
                float denom = PI * sum * sum;
                float D = alpha2 / denom;

                // F, 菲涅尔项
                vec3 F = F_Shlick( hdotv, fZero );

                // G, 几何遮挡项
                float k = alpha * 0.5f;
                float G_V = ndotv + sqrt( ( ndotv - ndotv * k ) * ndotv + k );
                float G_L = ndotl + sqrt( ( ndotl - ndotl * k ) * ndotl + k );
                float G = 1.0f / max( G_V * G_L ,0.01f );

                // specularBRDF
                float t = D * G * ndotl;
                vec3 specular =  vec3( t ) * F * lightColor;

                directLighting = diffuse + specular;
            }
            // 返回Spot范围衰减
            float ComputeSpotFalloff(in vec4 spotDirection, in vec3 lightDir){
                float curAngleCos = dot(lightDir, -spotDirection.xyz);
                float innerAngleCos = floor(spotDirection.w) * 0.001f;
                float outerAngleCos = fract(spotDirection.w);
                float innerMinusOuter = innerAngleCos - outerAngleCos;

                #ifndef Context.Srgb
                    // 使用二次衰减（请注意^ 4）
                    return pow(clamp((curAngleCos - outerAngleCos) / innerMinusOuter, 0.0f, 1.0f), 4.0f);
                #else
                    // 线性空间衰减
                    return clamp((curAngleCos - outerAngleCos) / innerMinusOuter, step(spotDirection.w, 0.001f), 1.0f);
                #endif
            }
            // 球谐函数
            vec3 sphericalHarmonics( const in vec3 normal, const vec3 sph[9] ){
                float x = normal.x;
                float y = normal.y;
                float z = normal.z;

                vec3 result = (
                    sph[0] +

                    sph[1] * y +
                    sph[2] * z +
                    sph[3] * x +

                    sph[4] * y * x +
                    sph[5] * y * z +
                    sph[6] * (3.0f * z * z - 1.0f) +
                    sph[7] * (z * x) +
                    sph[8] * (x*x - y*y)
                );

                return max(result, vec3(0.0f));
            }
            // 镜面反射趋势朝向
            vec3 getSpecularDominantDir(const in vec3 N, const in vec3 R, const in float realRoughness){

                float smoothness = 1.0f - realRoughness;
                float lerpFactor = smoothness * (sqrt(smoothness) + realRoughness);
                // 当我们在立方体贴图中获取时，结果未规范化
                vec3 dominant = mix(N, R, lerpFactor);

                return dominant;
            }
            // 拟合方程
            // 关于镜面部分，有很多优化地方，除了常见的优化，还有很多可以替代方案，几乎可以在保证画质的前提下，在移动端35帧率提升到60帧率，详细可参考我的笔记:https://www.cnblogs.com/JhonKkk/p/14313882.html
            vec3 integrateBRDFApprox( const in vec3 specular, in float roughness, in float NoV ){
                const vec4 c0 = vec4( -1.0f, -0.0275f, -0.572f, 0.022f );
                const vec4 c1 = vec4( 1.0f, 0.0425f, 1.04f, -0.04f );
                vec4 r = roughness * c0 + c1;
                float a004 = min( r.x * r.x, exp2( -9.28f * NoV ) ) * r.x + r.y;
                vec2 ab = vec2( -1.04f, 1.04f ) * a004 + r.zw;
                return specular * ab.x + ab.y;
            }
            // 近似镜面IBL多项式
            vec3 approximateSpecularIBLPolynomial(in samplerCube envMap, in vec3 specularColor , in float roughness, in float ndotv, in vec3 refVec, in float mipMaps){
                float lod = sqrt( roughness ) * (mipMaps - 1.0f);
                vec3 prefilteredColor = textureLod(envMap, refVec.xyz, lod).rgb;
                return prefilteredColor * integrateBRDFApprox(specularColor, roughness, ndotv);
            }
            // Begin_LightProbes
            ivec3 baseGridCoord(in vec3 probeStartPosition, in vec3 probeCounts, in vec3 probeStep, vec3 X){
                return clamp(ivec3((X - probeStartPosition) / probeStep), ivec3(0, 0, 0), ivec3(probeCounts) - ivec3(1, 1, 1));
            }
            vec3 gridCoordToPosition(in vec3 probeStartPosition, in vec3 probeStep, ivec3 c) {
                return probeStep * vec3(c) + probeStartPosition;
            }
            // 返回探针在光场的编号
            int gridCoordToProbeIndex(in vec3 probeCounts, in vec3 probeCoords) {
                return int(probeCoords.x + probeCoords.y * float(probeCounts.x) + probeCoords.z * float(probeCounts.x) * float(probeCounts.y));
            }
            vec3 unpackData( const in vec3 normal, const in vec4 probeData[1152], int probeId ){
                float x = normal.x;
                float y = normal.y;
                float z = normal.z;

                int i = probeId * 9;
                vec3 result = (
                    probeData[i + 0].xyz +

                    probeData[i + 1].xyz * y +
                    probeData[i + 2].xyz * z +
                    probeData[i + 3].xyz * x +

                    probeData[i + 4].xyz * y * x +
                    probeData[i + 5].xyz * y * z +
                    probeData[i + 6].xyz * (3.0f * z * z - 1.0f) +
                    probeData[i + 7].xyz * (z * x) +
                    probeData[i + 8].xyz * (x*x - y*y)
                );

                return max(result, vec3(0.0f));
            }
            // End_LightProbes
            #define GAMMA 2.2f
            #define GAMMA_T 1.0f / GAMMA
            void main(){
                // light probe dist bake
                if(Context.LightProbeDistBaking){
                    // 烘焙探针最近距离,防止漏光现象
                    float distance_to_fragment = length(Context.CameraPosition.xyz - wPosition.xyz);
                    Context.OutColor = vec4(distance_to_fragment, distance_to_fragment * distance_to_fragment, 0.0f, 0.0f);
                }
                else{
                    vec4 lightColor;
                    vec4 lightData1;
                    vec4 lightDir = vec4(0.0f);
                    vec3 lightVec = vec3(0.0f);
                    vec3 directLighting = vec3(0.0f);
                    vec3 viewDir = normalize(Context.CameraPosition.xyz - wPosition.xyz);

                    #ifdef Params.baseColor
                        #ifdef Params.baseColorMap
                            vec4 albedo = texture(Params.baseColorMap, wUv0) * Params.baseColor * vec4(Context.AmbientLightColor, 1.0);
                        #else
                            vec4 albedo = Params.baseColor * vec4(Context.AmbientLightColor, 1.0);
                        #endif
                    #else
                        #ifdef Params.baseColorMap
                            vec4 albedo = texture(Params.baseColorMap, wUv0) * vec4(Context.AmbientLightColor, 1.0);
                        #else
                            vec4 albedo = vec4(1.0f) * vec4(Context.AmbientLightColor, 1.0);
                        #endif
                    #endif

                    #ifdef Params.alphaDiscard
                        if(albedo.a < Params.alphaDiscard){
                            discard;
                        }
                    #endif

                    vec3 normal = wNormal;
                    #ifdef Params.normalMap
                        // 这里做了一种简化,理论上应该在fs阶段计算tbn,但是从插值的角度来看,可以简化为tbn插值,减少在fs阶段计算tbn开销(虽然这么做不精确,但是折中下可以接受)
                        vec3 normalHeight = texture(Params.normalMap, wUv0).xyz;
                        vec3 tangent = normalize(wTangent.xyz);
                        mat3 tbnMat = mat3(tangent, wTangent.w * cross(normal, tangent), normal);
                        normal = normalize(tbnMat * ( normalHeight * 2.0f - 1.0f ));
                    #endif

                    #ifdef Params.metallicRoughnessMap
                        vec2 rm = texture(Params.metallicRoughnessMap, wUv0).gb;
                        #ifdef Params.roughness
                            float _roughness = rm.x * max(Params.roughness, 1e-4);
                        #else
                            float _roughness = rm.x;
                        #endif
                        #ifdef Params.metallic
                            float _metallic = rm.y * max(Params.metallic, 0.0f);
                        #else
                            float _metallic = rm.y;
                        #endif
                    #else
                        #ifdef Params.roughnessMap
                            #ifdef Params.roughness
                                float _roughness = texture(Params.roughnessMap, wUv0).r * max(Params.roughness, 1e-4);
                            #else
                                float _roughness = texture(Params.roughnessMap, wUv0).r;
                            #endif
                        #else
                            #ifdef Params.roughness
                                float _roughness = max(Params.roughness, 1e-4);
                            #else
                                float _roughness = 1.0f;
                            #endif
                        #endif
                        #ifdef Params.metallicMap
                            #ifdef Params.metallic
                                float _metallic = texture(Params.metallicMap, wUv0).r * max(Params.metallic, 0.0f);
                            #else
                                float _metallic = texture(Params.metallicMap, wUv0).r;
                            #endif
                        #else
                            #ifdef Params.metallic
                                float _metallic = max(Params.metallic, 0.0f);
                            #else
                                float _metallic = 1.0f;
                            #endif
                        #endif
                    #endif

                    #ifdef Params.useSpecGloss
                        #ifdef Params.specularGlossinessMap
                            vec4 _specularColor = texture(Params.specularGlossinessMap, wUv0);
                            #ifdef Params.glossiness
                                float _glossiness = _specularColor.a * Params.glossiness;
                            #else
                                float _glossiness = _specularColor.a;
                            #endif
                            #ifdef Params.specular
                                _specularColor *= Params.specular;
                            #endif
                        #else
                            #ifdef Params.specularMap
                                vec4 _specularColor = texture(Params.specularMap, wUv0);
                            #else
                                vec4 _specularColor = vec4(1.0f);
                            #endif
                            #ifdef Params.specular
                                _specularColor *= Params.specular;
                            #endif
                            #ifdef Params.glossinessMap
                                #ifdef Params.glossiness
                                    float _glossiness = texture(Params.glossinessMap, wUv0).r * Params.glossiness;
                                #else
                                    float _glossiness = texture(Params.glossinessMap, wUv0).r;
                                #endif
                            #else
                                #ifdef Params.glossiness
                                    float _glossiness = Params.glossiness;
                                #else
                                    float _glossiness = 1.0f;
                                #endif
                            #endif
                        #endif
                        vec4 _diffuseColor = albedo;
                        _roughness = 1.0f - _glossiness;
                        vec3 fZero = _specularColor.rgb;
                    #else
                        float nonMetalSpec = 0.04f;
                        vec4 _specularColor = (nonMetalSpec - nonMetalSpec * _metallic) + albedo * _metallic;
                        vec4 _diffuseColor = albedo - albedo * _metallic;
                        vec3 fZero = vec3( 0.5f );
                    #endif

                    #ifdef Params.lightMap
                        vec3 _lightMapColor;
                        #ifdef Params.lightMapTexCoord
                            _lightMapColor = texture(Params.lightMap, wUv1).rgb;
                        #else
                            _lightMapColor = texture(Params.lightMap, wUv0).rgb;
                        #endif
                        #ifdef Params.aoMap
                            _lightMapColor.gb = _lightMapColor.rr;
                            vec3 ao = _lightMapColor;
                        #else
                            _specularColor.rgb *= _lightMapColor;
                            _diffuseColor.rgb  *= _lightMapColor;
                            vec3 ao = vec3(1.0f);
                        #endif
                    #else
                        vec3 ao = vec3(1.0f);
                    #endif

                    float ndotv = max( dot( normal, viewDir ), 0.0f );
                    for( int i = 0;i < Context.CurLightCount;i+=3 ){
                        lightColor = Context.WLightData[i];
                        lightData1 = Context.WLightData[i + 1];
                        ComputeLightDir(wPosition, lightColor.w, lightData1, lightDir, lightVec);

                        // 计算PointLight的衰减
                        float spotFallOff = 1.0 * lightDir.w;
                        // 计算SpotLight的衰减
                        if( lightColor.w > 1.0f )
                        {
                            // 计算SpotLight的范围衰减
                            spotFallOff = ComputeSpotFalloff( Context.WLightData[i + 2], lightDir.xyz );
                        }

                        ComputeDirectLighting(normal, viewDir, lightDir.xyz, lightColor.rgb, _diffuseColor.rgb, fZero, _roughness, ndotv, directLighting);
                        Context.OutColor.rgb += directLighting * spotFallOff;
                    }

                    if(Context.BlendGiProbes){
                        #ifdef Context.GIProbes
                            // 作为webGL项目,暂时不实现探针混合(但作为可拓展,仍然加结尾s命名)

                            // 计算反射视线
                            vec3 _rv = reflect( -viewDir.xyz, normal.xyz );
                            float _r = fract( Context.WGIProbe.w );
                            float _mipMaps = Context.WGIProbe.w - _r;
                            _rv = _r * ( wPosition.xyz - Context.WGIProbe.xyz ) + _rv;

                            // 使用球谐计算diffuse( 避免Irr采样 )
                            vec3 giLighting = sphericalHarmonics(normal.xyz, Context.ShCoeffs) * _diffuseColor.rgb;

                            float horiz = dot(_rv, wNormal);
                            float horizFadePower = 1.0f - _roughness;
                            horiz = clamp( 1.0f + horizFadePower * horiz, 0.0f, 1.0f );
                            horiz *= horiz;

                            vec3 _dominantR = getSpecularDominantDir( normal, _rv.xyz, _roughness * _roughness );
                            giLighting += approximateSpecularIBLPolynomial(Context.InPrefEnvMap, _specularColor.rgb, _roughness, ndotv, _dominantR, _mipMaps) * vec3( horiz );
                            giLighting *= ao;

                            Context.OutColor.rgb += giLighting * step( 0.0f, Context.WGIProbe.w );
                            // Context.OutColor.rgb = textureLod(Context.InPrefEnvMap, normal.xyz, 0.0f).rgb;
                        #endif
                        #ifdef Context.GI_ProbesGroup
                            // GIProbes
                            if(Context.ProbeCounts.x > 0.0f){
                                // 计算反射视线
                                //vec3 _rv = reflect( -viewDir.xyz, normal.xyz );
                                //float _r = fract( Context.ProbeCenter.w );
                                //float _mipMaps = Context.ProbeCenter.w - _r;
                                //_rv = _r * ( wPosition.xyz - Context.ProbeCenter.xyz ) + _rv;

                                vec3 giLighting = vec3(0.0f);
                                // PrefilteredIrradiance
                                ivec3 _baseGridCoord = baseGridCoord(Context.ProbeStartPosition.xyz, Context.ProbeCounts.xyz, Context.ProbeStep.xyz, wPosition.xyz);
                                vec3 _baseProbePos = gridCoordToPosition(Context.ProbeStartPosition.xyz, Context.ProbeStep.xyz, _baseGridCoord);
                                float sumWeight = 0.0f;
                                // 三线性插值因子
                                vec3 alpha = clamp((wPosition.xyz - _baseProbePos) / Context.ProbeStep.xyz, vec3(0.0f), vec3(1.0f));
                                // 遍历周围8个探针
                                for (int i = 0; i < 8; ++i) {
                                    // 遍历获取相邻的探针编号
                                    ivec3 offset = ivec3(i, i >> 1, i >> 2) & ivec3(1);
                                    ivec3 probeGridCoord = clamp(_baseGridCoord + offset, ivec3(0), ivec3(ceil(Context.ProbeCounts.xyz) - 1.0f));
                                    int p = gridCoordToProbeIndex(Context.ProbeCounts.xyz, vec3(probeGridCoord));

                                    // 根据网格单元顶点计算三线性权重，以在探针之间平滑过渡。 避免完全归零，因为这会导致边境调查出现问题。
                                    vec3 trilinear = mix(1.0f - alpha, alpha, vec3(offset));
                                    float weight = trilinear.x * trilinear.y * trilinear.z;

                                    // 相对于从表面到探头的角度，在切平面上进行余弦衰减，这样我们就永远不会测试在表面*后面*的探头。 它不一定是余弦，但计算起来很有效，我们必须剪裁到切平面。
                                    vec3 probePos = gridCoordToPosition(Context.ProbeStartPosition.xyz, Context.ProbeStep.xyz, probeGridCoord);
                                    vec3 probeToPoint = wPosition.xyz - probePos;
                                    vec3 dir = normalize(-probeToPoint);

                                    // 平滑背面测试,防止背向probe的着色点获得gi
                                    weight *= max(0.05f, dot(dir, wNormal));

                                    // 防止漏光
                                    vec2 temp = unpackData(-dir, Context.DistProbeGrid, p).rg;
                                    float mean = temp.x;
                                    float variance = abs(temp.y - (mean * mean));
                                    float distToProbe = length(probeToPoint);
                                    // http://www.punkuser.net/vsm/vsm_paper.pdf; equation 5
                                    float t_sub_mean = distToProbe - mean;
                                    float chebychev = variance / (variance + (t_sub_mean * t_sub_mean));

                                    weight *= ((distToProbe <= mean) ? 1.0f : max(chebychev, 0.0f));

                                    // 避免零
                                    weight = max(0.0002f, weight);

                                    sumWeight += weight;

                                    vec3 irradianceDir = normalize(normal.xyz);

                                    vec3 probeIrradiance = unpackData(irradianceDir, Context.ProbeGrid, p);
                                    giLighting += weight * probeIrradiance;
                                }
                                //vec3 giLighting = alpha * _diffuseColor.rgb;
                                giLighting = 2.0f * PI * giLighting / sumWeight;

                                //float horiz = dot(_rv, wNormal);
                                //float horizFadePower = 1.0f - _roughness;
                                //horiz = clamp( 1.0f + horizFadePower * horiz, 0.0f, 1.0f );
                                //horiz *= horiz;

                                //vec3 _dominantR = getSpecularDominantDir( normal, _rv.xyz, _roughness * _roughness );
                                //giLighting += approximateSpecularIBLPolynomial(Context.InPrefEnvMap, _specularColor.rgb, _roughness, ndotv, _dominantR, _mipMaps) * vec3( horiz );
                                //giLighting *= ao;

                                //Context.OutColor.rgb += giLighting * step( 0.0f, Context.ProbeCenter.w );
                                Context.OutColor.rgb += giLighting * _diffuseColor.rgb;
                                //Context.OutColor.rgb = Context.OutColor.rgb / (Context.OutColor.rgb + vec3(1.0f));
                            }
                            //Context.OutColor.rgb = Context.ProbeCounts;
                        #endif
                    }

                    // 唯一shading阶段,在这里处理自发光或只shading一次的逻辑
                    if(Context.UniqueShading){
                        #ifdef Params.emissive
                            float _emissivePower = 3.0f;
                            #ifdef Params.emissivePower
                                _emissivePower = Params.emissivePower;
                            #endif
                            float _emissiveIntensity = 2.0f;
                            #ifdef Params.emissiveIntensity
                                _emissiveIntensity = Params.emissiveIntensity;
                            #endif
                            #ifdef Params.emissiveMap
                                vec4 eMap = texture(Params.emissiveMap, wUv0);
                                Context.OutColor.rgb += Params.emissive.rgb * eMap.rgb * pow(Params.emissive.a * eMap.a, _emissivePower) * _emissiveIntensity;
                            #else
                                Context.OutColor.rgb += Params.emissive.rgb * pow(Params.emissive.a, _emissivePower) * _emissiveIntensity;
                            #endif
                        #else
                            #ifdef Params.emissiveMap
                                float _emissivePower = 3.0f;
                                #ifdef Params.emissivePower
                                    _emissivePower = Params.emissivePower;
                                #endif
                                float _emissiveIntensity = 2.0f;
                                #ifdef Params.emissiveIntensity
                                    _emisiveIntensity = Params.emissiveIntensity;
                                #endif
                                vec4 eMap = texture(Params.emissiveMap, wUv0);
                                Context.OutColor.rgb += eMap.rgb * pow(eMap.a, _emissivePower) * _emissiveIntensity;
                            #endif
                        #endif
                    }

                    Context.OutColor.a = albedo.a;
                }

            }
        }
    }

    Technology{
        Sub_Pass{
            Pass SPPrincipledLighting{
            }
        }
    }
}
