// 基础光照材质定义
Def BasicLightingDef{
    Params{
        //texture2D diffuseMap;
        //texture2D normalMap;
        //texture2D specularMap;
        float Shininess;
    }
    SubTechnology BlinnPhongLighting{
        Vars{
            vec3 wvNormal;
            vec3 wvPosition;
        }
        Advanced{
            RenderProgram SinglePassLighting;
        }
        Vs_Shader{
            void main(){
                Context.OutPosition = Context.ProjectViewMatrix * Context.ModelMatrix * vec4(Context.InPosition, 1.0f);
            }
        }
        Fs_Shader{
            // 计算光照方向
            // 对于DirLight,PointLight以及SpotLight,lightType依次为0.0,1.0,2.0
            // 输出光照方向以及半角向量
            void ComputeLightDir(in vec3 worldPos, in float lightType, in vec4 position, out vec4 lightDir, out vec3 lightVec){
                // 只有lightType = 0.0时,posLight为0.0,否则posLight为1.0
                float posLight = step(0.5f, lightType);

                // 计算光照位置
                // 对于DirLight,lightVec = position.xyz * sign(-0.5f) = position.xyz * -1.0f;其中position代表DirLight的方向
                // 对于PointLight和SpotLight,lightVec = position.xyz * sign(1.0f - 0.5f) - (worldPos * 1.0f) = positions.xyz * 1.0f - worldPos;其中position代表Light的位置
                lightVec = position.xyz * sign(posLight - 0.5f) - (worldPos * posLight);
                float dist = length(lightVec);

                // 对于DirLight,w = 1.0f
                // 对于PointLight,w = 0-1之间的半径比率
                lightDir.w = clamp(1.0 - position.w * dist * posLight, 0.0f, 1.0f);
                // 归一化
                lightDir.xyz = tempVec / vec3(dist);
            }
            // 基于BlinnPhong光照模型计算光照因子
            // brdf.x保存漫反射部分;brdf.y保存镜面反射部分
            void ComputeLighting(in vec3 vwNorm, in vec3 viewDir, in vec3 lightDir, in float attenuation, in float shininess, out vec2 brdf){
                // diffuse部分
                float diffuseBRDF = max(0.0f, dot(vwNorm, lightDir));
                // specular部分
                // 半角向量代替viewDir参与光照计算
                vec3 H = normalize(viewDir + lightDir);
                float HdotN = max(0.0f, dot(H, vwNorm));
                float specularBRDF = HdotN * diffuseBRDF;

                // 衰减,对于PointLight和SpotLight来说有效,对于DirLight而言,attenuation一直为1
                brdf.x = diffuseBRDF * attenuation;
                brdf.y = specularBRDF * attenuation;
            }
            void main(){
                // 计算光照
                vec4 lightColor;
                vec4 lightData1;
                vec4 lightDir;
                vec3 lightVec;
                vec2 lightBRDF;
                for( int i = 0;i < Context.CurLightCount;i+=3 ){
                    // 后期改为Context.GetLightDir(Context.LightData[i]);
                    lightColor = Context.LightData[i];
                    lightData1 = Context.LightData[i + 1];
                    ComputeLightDir(wvPosition, lightColor.w, lightData1, lightDir,lightVec);

                    // 计算SpotLight的衰减
                    float spotFallOff = 1.0;

                    // 如果存在法线纹理,则进一步计算lightDir

                    // 计算反射率
                    ComputeLighting(wvNormal, viewDir, lightDir.xyz, lightDir.w * spotFallOff , Params.shininess, lightBRDF);

                    // 乘以颜色部分
                }
                Context.OutColor = vec4(0.2f, 0.2f, 0.2f, 1.0f);
            }
        }
    }
    Technology{
        Sub_Pass Forward{
            Pass BlinnPhongLighting{
            }
        }
    }
}
